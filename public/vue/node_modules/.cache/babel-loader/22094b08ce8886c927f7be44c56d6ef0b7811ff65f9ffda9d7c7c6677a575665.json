{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*!\n * OverlayScrollbars\n * Version: 2.4.5\n *\n * Copyright (c) Rene Haas | KingSora.\n * https://github.com/KingSora\n *\n * Released under the MIT license.\n */\n\nconst createCache = (t, n) => {\n  const {\n    o: o,\n    u: s,\n    _: e\n  } = t;\n  let c = o;\n  let r;\n  const cacheUpdateContextual = (t, n) => {\n    const o = c;\n    const l = t;\n    const i = n || (s ? !s(o, l) : o !== l);\n    if (i || e) {\n      c = l;\n      r = o;\n    }\n    return [c, i, r];\n  };\n  const cacheUpdateIsolated = t => cacheUpdateContextual(n(c, r), t);\n  const getCurrentCache = t => [c, !!t, r];\n  return [n ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache];\n};\nconst t = typeof window !== \"undefined\";\nconst n = t && Node.ELEMENT_NODE;\nconst {\n  toString: o,\n  hasOwnProperty: s\n} = Object.prototype;\nconst e = /^\\[object (.+)\\]$/;\nconst isUndefined = t => t === void 0;\nconst isNull = t => t === null;\nconst type = t => isUndefined(t) || isNull(t) ? `${t}` : o.call(t).replace(e, \"$1\").toLowerCase();\nconst isNumber = t => typeof t === \"number\";\nconst isString = t => typeof t === \"string\";\nconst isBoolean = t => typeof t === \"boolean\";\nconst isFunction = t => typeof t === \"function\";\nconst isArray = t => Array.isArray(t);\nconst isObject = t => typeof t === \"object\" && !isArray(t) && !isNull(t);\nconst isArrayLike = t => {\n  const n = !!t && t.length;\n  const o = isNumber(n) && n > -1 && n % 1 == 0;\n  return isArray(t) || !isFunction(t) && o ? n > 0 && isObject(t) ? n - 1 in t : true : false;\n};\nconst isPlainObject = t => {\n  if (!t || !isObject(t) || type(t) !== \"object\") {\n    return false;\n  }\n  let n;\n  const o = \"constructor\";\n  const e = t[o];\n  const c = e && e.prototype;\n  const r = s.call(t, o);\n  const l = c && s.call(c, \"isPrototypeOf\");\n  if (e && !r && !l) {\n    return false;\n  }\n  for (n in t) {}\n  return isUndefined(n) || s.call(t, n);\n};\nconst isHTMLElement = t => {\n  const o = HTMLElement;\n  return t ? o ? t instanceof o : t.nodeType === n : false;\n};\nconst isElement = t => {\n  const o = Element;\n  return t ? o ? t instanceof o : t.nodeType === n : false;\n};\nfunction each(t, n) {\n  if (isArrayLike(t)) {\n    for (let o = 0; o < t.length; o++) {\n      if (n(t[o], o, t) === false) {\n        break;\n      }\n    }\n  } else if (t) {\n    each(Object.keys(t), o => n(t[o], o, t));\n  }\n  return t;\n}\nconst inArray = (t, n) => t.indexOf(n) >= 0;\nconst concat = (t, n) => t.concat(n);\nconst push = (t, n, o) => {\n  !o && !isString(n) && isArrayLike(n) ? Array.prototype.push.apply(t, n) : t.push(n);\n  return t;\n};\nconst from = t => {\n  const n = Array.from;\n  const o = [];\n  if (n && t) {\n    return n(t);\n  }\n  if (t instanceof Set) {\n    t.forEach(t => {\n      push(o, t);\n    });\n  } else {\n    each(t, t => {\n      push(o, t);\n    });\n  }\n  return o;\n};\nconst isEmptyArray = t => !!t && !t.length;\nconst deduplicateArray = t => from(new Set(t));\nconst runEachAndClear = (t, n, o) => {\n  const runFn = t => t && t.apply(void 0, n || []);\n  each(t, runFn);\n  !o && (t.length = 0);\n};\nconst hasOwnProperty = (t, n) => Object.prototype.hasOwnProperty.call(t, n);\nconst keys = t => t ? Object.keys(t) : [];\nconst assignDeep = (t, n, o, s, e, c, r) => {\n  const l = [n, o, s, e, c, r];\n  if ((typeof t !== \"object\" || isNull(t)) && !isFunction(t)) {\n    t = {};\n  }\n  each(l, n => {\n    each(n, (o, s) => {\n      const e = n[s];\n      if (t === e) {\n        return true;\n      }\n      const c = isArray(e);\n      if (e && isPlainObject(e)) {\n        const n = t[s];\n        let o = n;\n        if (c && !isArray(n)) {\n          o = [];\n        } else if (!c && !isPlainObject(n)) {\n          o = {};\n        }\n        t[s] = assignDeep(o, e);\n      } else {\n        t[s] = c ? e.slice() : e;\n      }\n    });\n  });\n  return t;\n};\nconst removeUndefinedProperties = (t, n) => each(assignDeep({}, t), (t, o, s) => {\n  if (t === void 0) {\n    delete s[o];\n  } else if (n && t && isPlainObject(t)) {\n    s[o] = removeUndefinedProperties(t, n);\n  }\n});\nconst isEmptyObject = t => {\n  for (const n in t) {\n    return false;\n  }\n  return true;\n};\nconst attr = (t, n, o) => {\n  if (isUndefined(o)) {\n    return t ? t.getAttribute(n) : null;\n  }\n  t && t.setAttribute(n, o);\n};\nconst getValueSet = (t, n) => new Set((attr(t, n) || \"\").split(\" \"));\nconst removeAttr = (t, n) => {\n  t && t.removeAttribute(n);\n};\nconst attrClass = (t, n, o, s) => {\n  if (o) {\n    const e = getValueSet(t, n);\n    e[s ? \"add\" : \"delete\"](o);\n    const c = from(e).join(\" \").trim();\n    attr(t, n, c);\n  }\n};\nconst hasAttrClass = (t, n, o) => getValueSet(t, n).has(o);\nconst c = t && Element.prototype;\nconst find = (t, n) => {\n  const o = [];\n  const s = n ? isElement(n) && n : document;\n  return s ? push(o, s.querySelectorAll(t)) : o;\n};\nconst findFirst = (t, n) => {\n  const o = n ? isElement(n) && n : document;\n  return o ? o.querySelector(t) : null;\n};\nconst is = (t, n) => {\n  if (isElement(t)) {\n    const o = c.matches || c.msMatchesSelector;\n    return o.call(t, n);\n  }\n  return false;\n};\nconst contents = t => t ? from(t.childNodes) : [];\nconst parent = t => t && t.parentElement;\nconst closest = (t, n) => {\n  if (isElement(t)) {\n    const o = c.closest;\n    if (o) {\n      return o.call(t, n);\n    }\n    do {\n      if (is(t, n)) {\n        return t;\n      }\n      t = parent(t);\n    } while (t);\n  }\n};\nconst liesBetween = (t, n, o) => {\n  const s = closest(t, n);\n  const e = t && findFirst(o, s);\n  const c = closest(e, n) === s;\n  return s && e ? s === t || e === t || c && closest(closest(t, o), n) !== s : false;\n};\nconst noop = () => {};\nconst removeElements = t => {\n  if (isArrayLike(t)) {\n    each(from(t), t => removeElements(t));\n  } else if (t) {\n    const n = parent(t);\n    n && n.removeChild(t);\n  }\n};\nconst before = (t, n, o) => {\n  if (o && t) {\n    let s = n;\n    let e;\n    if (isArrayLike(o)) {\n      e = document.createDocumentFragment();\n      each(o, t => {\n        if (t === s) {\n          s = t.previousSibling;\n        }\n        e.appendChild(t);\n      });\n    } else {\n      e = o;\n    }\n    if (n) {\n      if (!s) {\n        s = t.firstChild;\n      } else if (s !== n) {\n        s = s.nextSibling;\n      }\n    }\n    t.insertBefore(e, s || null);\n    return () => removeElements(o);\n  }\n  return noop;\n};\nconst appendChildren = (t, n) => before(t, null, n);\nconst insertBefore = (t, n) => before(parent(t), t, n);\nconst insertAfter = (t, n) => before(parent(t), t && t.nextSibling, n);\nconst createDiv = t => {\n  const n = document.createElement(\"div\");\n  attr(n, \"class\", t);\n  return n;\n};\nconst createDOM = t => {\n  const n = createDiv();\n  n.innerHTML = t.trim();\n  return each(contents(n), t => removeElements(t));\n};\nconst r = t ? window : {};\nconst l = Math.max;\nconst i = Math.min;\nconst a = Math.round;\nconst u = Math.abs;\nconst f = r.cancelAnimationFrame;\nconst _ = r.requestAnimationFrame;\nconst d = r.setTimeout;\nconst v = r.clearTimeout;\nconst firstLetterToUpper = t => t.charAt(0).toUpperCase() + t.slice(1);\nconst getDummyStyle = () => createDiv().style;\nconst h = [\"-webkit-\", \"-moz-\", \"-o-\", \"-ms-\"];\nconst p = [\"WebKit\", \"Moz\", \"O\", \"MS\", \"webkit\", \"moz\", \"o\", \"ms\"];\nconst g = {};\nconst b = {};\nconst cssProperty = t => {\n  let n = b[t];\n  if (hasOwnProperty(b, t)) {\n    return n;\n  }\n  const o = firstLetterToUpper(t);\n  const s = getDummyStyle();\n  each(h, e => {\n    const c = e.replace(/-/g, \"\");\n    const r = [t, e + t, c + o, firstLetterToUpper(c) + o];\n    return !(n = r.find(t => s[t] !== void 0));\n  });\n  return b[t] = n || \"\";\n};\nconst jsAPI = t => {\n  let n = g[t] || r[t];\n  if (hasOwnProperty(g, t)) {\n    return n;\n  }\n  each(p, o => {\n    n = n || r[o + firstLetterToUpper(t)];\n    return !n;\n  });\n  g[t] = n;\n  return n;\n};\nconst w = jsAPI(\"MutationObserver\");\nconst y = jsAPI(\"IntersectionObserver\");\nconst m = jsAPI(\"ResizeObserver\");\nconst S = jsAPI(\"ScrollTimeline\");\nconst bind = (t, ...n) => t.bind(0, ...n);\nconst selfClearTimeout = t => {\n  let n;\n  const o = t ? d : _;\n  const s = t ? v : f;\n  return [e => {\n    s(n);\n    n = o(e, isFunction(t) ? t() : t);\n  }, () => s(n)];\n};\nconst debounce = (t, n) => {\n  let o;\n  let s;\n  let e;\n  let c = noop;\n  const {\n    v: r,\n    p: l,\n    g: i\n  } = n || {};\n  const a = function invokeFunctionToDebounce(n) {\n    c();\n    v(o);\n    o = s = void 0;\n    c = noop;\n    t.apply(this, n);\n  };\n  const mergeParms = t => i && s ? i(s, t) : t;\n  const flush = () => {\n    if (c !== noop) {\n      a(mergeParms(e) || e);\n    }\n  };\n  const u = function debouncedFn() {\n    const t = from(arguments);\n    const n = isFunction(r) ? r() : r;\n    const i = isNumber(n) && n >= 0;\n    if (i) {\n      const r = isFunction(l) ? l() : l;\n      const i = isNumber(r) && r >= 0;\n      const u = n > 0 ? d : _;\n      const h = n > 0 ? v : f;\n      const p = mergeParms(t);\n      const g = p || t;\n      const b = a.bind(0, g);\n      c();\n      const w = u(b, n);\n      c = () => h(w);\n      if (i && !o) {\n        o = d(flush, r);\n      }\n      s = e = g;\n    } else {\n      a(t);\n    }\n  };\n  u.m = flush;\n  return u;\n};\nconst $ = /[^\\x20\\t\\r\\n\\f]+/g;\nconst classListAction = (t, n, o) => {\n  const s = t && t.classList;\n  let e;\n  let c = 0;\n  let r = false;\n  if (s && n && isString(n)) {\n    const t = n.match($) || [];\n    r = t.length > 0;\n    while (e = t[c++]) {\n      r = !!o(s, e) && r;\n    }\n  }\n  return r;\n};\nconst removeClass = (t, n) => {\n  classListAction(t, n, (t, n) => t.remove(n));\n};\nconst addClass = (t, n) => {\n  classListAction(t, n, (t, n) => t.add(n));\n  return bind(removeClass, t, n);\n};\nconst x = {\n  opacity: 1,\n  zIndex: 1\n};\nconst parseToZeroOrNumber = (t, n) => {\n  const o = t || \"\";\n  const s = n ? parseFloat(o) : parseInt(o, 10);\n  return s === s ? s : 0;\n};\nconst adaptCSSVal = (t, n) => !x[t] && isNumber(n) ? `${n}px` : n;\nconst getCSSVal = (t, n, o) => String((n != null ? n[o] || n.getPropertyValue(o) : t.style[o]) || \"\");\nconst setCSSVal = (t, n, o) => {\n  try {\n    const {\n      style: s\n    } = t;\n    if (!isUndefined(s[n])) {\n      s[n] = adaptCSSVal(n, o);\n    } else {\n      s.setProperty(n, o);\n    }\n  } catch (s) {}\n};\nconst validFiniteNumber = t => {\n  const n = t || 0;\n  return isFinite(n) ? n : 0;\n};\nfunction style(t, n) {\n  const o = isString(n);\n  const s = isArray(n) || o;\n  if (s) {\n    let s = o ? \"\" : {};\n    if (t) {\n      const e = r.getComputedStyle(t, null);\n      s = o ? getCSSVal(t, e, n) : n.reduce((n, o) => {\n        n[o] = getCSSVal(t, e, o);\n        return n;\n      }, s);\n    }\n    return s;\n  }\n  t && each(n, (o, s) => setCSSVal(t, s, n[s]));\n}\nconst getDirectionIsRTL = t => style(t, \"direction\") === \"rtl\";\nconst topRightBottomLeft = (t, n, o) => {\n  const s = n ? `${n}-` : \"\";\n  const e = o ? `-${o}` : \"\";\n  const c = `${s}top${e}`;\n  const r = `${s}right${e}`;\n  const l = `${s}bottom${e}`;\n  const i = `${s}left${e}`;\n  const a = style(t, [c, r, l, i]);\n  return {\n    t: parseToZeroOrNumber(a[c], true),\n    r: parseToZeroOrNumber(a[r], true),\n    b: parseToZeroOrNumber(a[l], true),\n    l: parseToZeroOrNumber(a[i], true)\n  };\n};\nconst getTrasformTranslateValue = (t, n) => `translate${isObject(t) ? `(${t.x},${t.y})` : `${n ? \"X\" : \"Y\"}(${t})`}`;\nconst ratioToCssPercent = t => `${(validFiniteNumber(t) * 100).toFixed(3)}%`;\nconst numberToCssPx = t => `${validFiniteNumber(t)}px`;\nconst O = \"paddingTop\";\nconst C = \"paddingRight\";\nconst H = \"paddingLeft\";\nconst z = \"paddingBottom\";\nconst I = \"marginLeft\";\nconst A = \"marginRight\";\nconst E = \"marginBottom\";\nconst T = \"overflowX\";\nconst D = \"overflowY\";\nconst k = \"width\";\nconst M = \"height\";\nconst R = \"hidden\";\nconst P = {\n  w: 0,\n  h: 0\n};\nconst getElmWidthHeightProperty = (t, n) => n ? {\n  w: n[`${t}Width`],\n  h: n[`${t}Height`]\n} : P;\nconst windowSize = t => getElmWidthHeightProperty(\"inner\", t || r);\nconst L = bind(getElmWidthHeightProperty, \"offset\");\nconst V = bind(getElmWidthHeightProperty, \"client\");\nconst U = bind(getElmWidthHeightProperty, \"scroll\");\nconst fractionalSize = t => {\n  const n = parseFloat(style(t, k)) || 0;\n  const o = parseFloat(style(t, M)) || 0;\n  return {\n    w: n - a(n),\n    h: o - a(o)\n  };\n};\nconst getBoundingClientRect = t => t.getBoundingClientRect();\nconst domRectHasDimensions = t => !!(t && (t[M] || t[k]));\nconst domRectAppeared = (t, n) => {\n  const o = domRectHasDimensions(t);\n  const s = domRectHasDimensions(n);\n  return !s && o;\n};\nconst animationCurrentTime = () => performance.now();\nconst animateNumber = (t, n, o, s, e) => {\n  let c = 0;\n  const r = animationCurrentTime();\n  const i = l(0, o);\n  const frame = o => {\n    const a = animationCurrentTime();\n    const u = a - r;\n    const f = u >= i;\n    const d = o ? 1 : 1 - (l(0, r + i - a) / i || 0);\n    const v = (n - t) * (isFunction(e) ? e(d, d * i, 0, 1, i) : d) + t;\n    const h = f || d === 1;\n    s && s(v, d, h);\n    c = h ? 0 : _(() => frame());\n  };\n  frame();\n  return t => {\n    f(c);\n    t && frame(t);\n  };\n};\nconst equal = (t, n, o, s) => {\n  if (t && n) {\n    let e = true;\n    each(o, o => {\n      const c = s ? s(t[o]) : t[o];\n      const r = s ? s(n[o]) : n[o];\n      if (c !== r) {\n        e = false;\n      }\n    });\n    return e;\n  }\n  return false;\n};\nconst equalWH = (t, n) => equal(t, n, [\"w\", \"h\"]);\nconst equalXY = (t, n) => equal(t, n, [\"x\", \"y\"]);\nconst equalTRBL = (t, n) => equal(t, n, [\"t\", \"r\", \"b\", \"l\"]);\nconst equalBCRWH = (t, n, o) => equal(t, n, [k, M], o && (t => a(t)));\nlet B;\nconst j = \"passive\";\nconst supportPassiveEvents = () => {\n  if (isUndefined(B)) {\n    B = false;\n    try {\n      r.addEventListener(j, noop, Object.defineProperty({}, j, {\n        get() {\n          B = true;\n        }\n      }));\n    } catch (t) {}\n  }\n  return B;\n};\nconst splitEventNames = t => t.split(\" \");\nconst removeEventListener = (t, n, o, s) => {\n  each(splitEventNames(n), n => {\n    t.removeEventListener(n, o, s);\n  });\n};\nconst addEventListener = (t, n, o, s) => {\n  var e;\n  const c = supportPassiveEvents();\n  const r = (e = c && s && s.S) != null ? e : c;\n  const l = s && s.$ || false;\n  const i = s && s.O || false;\n  const a = c ? {\n    passive: r,\n    capture: l\n  } : l;\n  return bind(runEachAndClear, splitEventNames(n).map(n => {\n    const s = i ? e => {\n      removeEventListener(t, n, s, l);\n      o(e);\n    } : o;\n    t.addEventListener(n, s, a);\n    return bind(removeEventListener, t, n, s, l);\n  }));\n};\nconst stopPropagation = t => t.stopPropagation();\nconst preventDefault = t => t.preventDefault();\nconst N = {\n  x: 0,\n  y: 0\n};\nconst absoluteCoordinates = t => {\n  const n = t && getBoundingClientRect(t);\n  return n ? {\n    x: n.left + r.pageYOffset,\n    y: n.top + r.pageXOffset\n  } : N;\n};\nconst getRTLCompatibleScrollPosition = (t, n, o) => o ? o.n ? -t : o.i ? n - t : t : t;\nconst getRTLCompatibleScrollBounds = (t, n) => [n ? n.i ? t : 0 : 0, getRTLCompatibleScrollPosition(t, t, n)];\nconst scrollElementTo = (t, n) => {\n  const {\n    x: o,\n    y: s\n  } = isNumber(n) ? {\n    x: n,\n    y: n\n  } : n || {};\n  isNumber(o) && (t.scrollLeft = o);\n  isNumber(s) && (t.scrollTop = s);\n};\nconst getElmentScroll = t => ({\n  x: t.scrollLeft,\n  y: t.scrollTop\n});\nconst manageListener = (t, n) => {\n  each(isArray(n) ? n : [n], t);\n};\nconst createEventListenerHub = t => {\n  const n = new Map();\n  const removeEvent = (t, o) => {\n    if (t) {\n      const s = n.get(t);\n      manageListener(t => {\n        if (s) {\n          s[t ? \"delete\" : \"clear\"](t);\n        }\n      }, o);\n    } else {\n      n.forEach(t => {\n        t.clear();\n      });\n      n.clear();\n    }\n  };\n  const addEvent = (t, o) => {\n    if (isString(t)) {\n      const s = n.get(t) || new Set();\n      n.set(t, s);\n      manageListener(t => {\n        isFunction(t) && s.add(t);\n      }, o);\n      return bind(removeEvent, t, o);\n    }\n    if (isBoolean(o) && o) {\n      removeEvent();\n    }\n    const s = keys(t);\n    const e = [];\n    each(s, n => {\n      const o = t[n];\n      o && push(e, addEvent(n, o));\n    });\n    return bind(runEachAndClear, e);\n  };\n  const triggerEvent = (t, o) => {\n    each(from(n.get(t)), t => {\n      if (o && !isEmptyArray(o)) {\n        t.apply(0, o);\n      } else {\n        t();\n      }\n    });\n  };\n  addEvent(t || {});\n  return [addEvent, removeEvent, triggerEvent];\n};\nconst opsStringify = t => JSON.stringify(t, (t, n) => {\n  if (isFunction(n)) {\n    throw 0;\n  }\n  return n;\n});\nconst getPropByPath = (t, n) => t ? `${n}`.split(\".\").reduce((t, n) => t && hasOwnProperty(t, n) ? t[n] : void 0, t) : void 0;\nconst G = {\n  paddingAbsolute: false,\n  showNativeOverlaidScrollbars: false,\n  update: {\n    elementEvents: [[\"img\", \"load\"]],\n    debounce: [0, 33],\n    attributes: null,\n    ignoreMutation: null\n  },\n  overflow: {\n    x: \"scroll\",\n    y: \"scroll\"\n  },\n  scrollbars: {\n    theme: \"os-theme-dark\",\n    visibility: \"auto\",\n    autoHide: \"never\",\n    autoHideDelay: 1300,\n    autoHideSuspend: false,\n    dragScroll: true,\n    clickScroll: false,\n    pointers: [\"mouse\", \"touch\", \"pen\"]\n  }\n};\nconst getOptionsDiff = (t, n) => {\n  const o = {};\n  const s = concat(keys(n), keys(t));\n  each(s, s => {\n    const e = t[s];\n    const c = n[s];\n    if (isObject(e) && isObject(c)) {\n      assignDeep(o[s] = {}, getOptionsDiff(e, c));\n      if (isEmptyObject(o[s])) {\n        delete o[s];\n      }\n    } else if (hasOwnProperty(n, s) && c !== e) {\n      let t = true;\n      if (isArray(e) || isArray(c)) {\n        try {\n          if (opsStringify(e) === opsStringify(c)) {\n            t = false;\n          }\n        } catch (r) {}\n      }\n      if (t) {\n        o[s] = c;\n      }\n    }\n  });\n  return o;\n};\nconst createOptionCheck = (t, n, o) => s => [getPropByPath(t, s), o || getPropByPath(n, s) !== void 0];\nconst q = `data-overlayscrollbars`;\nconst F = \"os-environment\";\nconst W = `${F}-flexbox-glue`;\nconst X = `${W}-max`;\nconst Y = `os-scrollbar-hidden`;\nconst J = `${q}-initialize`;\nconst K = q;\nconst Z = `${K}-overflow-x`;\nconst Q = `${K}-overflow-y`;\nconst tt = \"overflowVisible\";\nconst nt = \"scrollbarHidden\";\nconst ot = \"scrollbarPressed\";\nconst st = \"updating\";\nconst et = `${q}-viewport`;\nconst ct = \"arrange\";\nconst rt = \"scrollbarHidden\";\nconst lt = tt;\nconst it = `${q}-padding`;\nconst at = lt;\nconst ut = `${q}-content`;\nconst ft = \"os-size-observer\";\nconst _t = `${ft}-appear`;\nconst dt = `${ft}-listener`;\nconst vt = `${dt}-scroll`;\nconst ht = `${dt}-item`;\nconst pt = `${ht}-final`;\nconst gt = \"os-trinsic-observer\";\nconst bt = \"os-no-css-vars\";\nconst wt = \"os-theme-none\";\nconst yt = \"os-scrollbar\";\nconst mt = `${yt}-rtl`;\nconst St = `${yt}-horizontal`;\nconst $t = `${yt}-vertical`;\nconst xt = `${yt}-track`;\nconst Ot = `${yt}-handle`;\nconst Ct = `${yt}-visible`;\nconst Ht = `${yt}-cornerless`;\nconst zt = `${yt}-transitionless`;\nconst It = `${yt}-interaction`;\nconst At = `${yt}-unusable`;\nconst Et = `${yt}-auto-hide`;\nconst Tt = `${Et}-hidden`;\nconst Dt = `${yt}-wheel`;\nconst kt = `${xt}-interactive`;\nconst Mt = `${Ot}-interactive`;\nconst Rt = {};\nconst Pt = {};\nconst addPlugins = t => {\n  each(t, t => each(t, (n, o) => {\n    Rt[o] = t[o];\n  }));\n};\nconst registerPluginModuleInstances = (t, n, o) => keys(t).map(s => {\n  const {\n    static: e,\n    instance: c\n  } = t[s];\n  const [r, l, i] = o || [];\n  const a = o ? c : e;\n  if (a) {\n    const t = o ? a(r, l, n) : a(n);\n    return (i || Pt)[s] = t;\n  }\n});\nconst getStaticPluginModuleInstance = t => Pt[t];\nconst Lt = \"__osOptionsValidationPlugin\";\nconst Vt = \"__osSizeObserverPlugin\";\nconst Ut = /* @__PURE__ */(() => ({\n  [Vt]: {\n    static: () => (t, n, o) => {\n      const s = 3333333;\n      const e = \"scroll\";\n      const c = createDOM(`<div class=\"${ht}\" dir=\"ltr\"><div class=\"${ht}\"><div class=\"${pt}\"></div></div><div class=\"${ht}\"><div class=\"${pt}\" style=\"width: 200%; height: 200%\"></div></div></div>`);\n      const r = c[0];\n      const l = r.lastChild;\n      const i = r.firstChild;\n      const a = i == null ? void 0 : i.firstChild;\n      let u = L(r);\n      let d = u;\n      let v = false;\n      let h;\n      const reset = () => {\n        scrollElementTo(i, s);\n        scrollElementTo(l, s);\n      };\n      const onResized = t => {\n        h = 0;\n        if (v) {\n          u = d;\n          n(t === true);\n        }\n      };\n      const onScroll = t => {\n        d = L(r);\n        v = !t || !equalWH(d, u);\n        if (t) {\n          stopPropagation(t);\n          if (v && !h) {\n            f(h);\n            h = _(onResized);\n          }\n        } else {\n          onResized(t === false);\n        }\n        reset();\n      };\n      const p = [appendChildren(t, c), addEventListener(i, e, onScroll), addEventListener(l, e, onScroll)];\n      addClass(t, vt);\n      style(a, {\n        [k]: s,\n        [M]: s\n      });\n      _(reset);\n      return [o ? bind(onScroll, false) : reset, p];\n    }\n  }\n}))();\nlet Bt = 0;\nconst jt = \"__osScrollbarsHidingPlugin\";\nconst Nt = /* @__PURE__ */(() => ({\n  [jt]: {\n    static: () => ({\n      C: t => {\n        const {\n          H: n,\n          I: o,\n          A: s\n        } = t;\n        const e = !s && !n && (o.x || o.y);\n        const c = e ? document.createElement(\"style\") : false;\n        if (c) {\n          attr(c, \"id\", `${et}-${ct}-${Bt}`);\n          Bt++;\n        }\n        return c;\n      },\n      T: (t, n, o, s, e, c, r) => {\n        const arrangeViewport = (n, c, r, l) => {\n          if (t) {\n            const {\n              D: t\n            } = e;\n            const {\n              k: i,\n              M: a\n            } = n;\n            const {\n              x: u,\n              y: f\n            } = a;\n            const {\n              x: _,\n              y: d\n            } = i;\n            const v = l ? C : H;\n            const h = t[v];\n            const p = t.paddingTop;\n            const g = c.w + r.w;\n            const b = c.h + r.h;\n            const w = {\n              w: d && f ? `${d + g - h}px` : \"\",\n              h: _ && u ? `${_ + b - p}px` : \"\"\n            };\n            if (s) {\n              const {\n                sheet: t\n              } = s;\n              if (t) {\n                const {\n                  cssRules: n\n                } = t;\n                if (n) {\n                  if (!n.length) {\n                    t.insertRule(`#${attr(s, \"id\")} + [${et}~='${ct}']::before {}`, 0);\n                  }\n                  const o = n[0].style;\n                  o[k] = w.w;\n                  o[M] = w.h;\n                }\n              }\n            } else {\n              style(o, {\n                \"--os-vaw\": w.w,\n                \"--os-vah\": w.h\n              });\n            }\n          }\n          return t;\n        };\n        const undoViewportArrange = (s, l, i) => {\n          if (t) {\n            const a = i || c(s);\n            const {\n              D: u\n            } = e;\n            const {\n              M: f\n            } = a;\n            const {\n              x: _,\n              y: d\n            } = f;\n            const v = {};\n            const assignProps = t => each(t, t => {\n              v[t] = u[t];\n            });\n            if (_) {\n              assignProps([E, O, z]);\n            }\n            if (d) {\n              assignProps([I, A, H, C]);\n            }\n            const h = style(o, keys(v));\n            attrClass(o, et, ct);\n            if (!n) {\n              v[M] = \"\";\n            }\n            style(o, v);\n            return [() => {\n              r(a, l, t, h);\n              style(o, h);\n              attrClass(o, et, ct, true);\n            }, a];\n          }\n          return [noop];\n        };\n        return [arrangeViewport, undoViewportArrange];\n      },\n      R: () => {\n        let t = {\n          w: 0,\n          h: 0\n        };\n        let n = 0;\n        const getWindowDPR = () => {\n          const t = r.screen;\n          const n = t.deviceXDPI || 0;\n          const o = t.logicalXDPI || 1;\n          return r.devicePixelRatio || n / o;\n        };\n        const diffBiggerThanOne = (t, n) => {\n          const o = u(t);\n          const s = u(n);\n          return !(o === s || o + 1 === s || o - 1 === s);\n        };\n        return (o, s) => {\n          const e = windowSize();\n          const c = {\n            w: e.w - t.w,\n            h: e.h - t.h\n          };\n          if (c.w === 0 && c.h === 0) {\n            return;\n          }\n          const r = {\n            w: u(c.w),\n            h: u(c.h)\n          };\n          const l = {\n            w: u(a(e.w / (t.w / 100))),\n            h: u(a(e.h / (t.h / 100)))\n          };\n          const i = getWindowDPR();\n          const f = r.w > 2 && r.h > 2;\n          const _ = !diffBiggerThanOne(l.w, l.h);\n          const d = i !== n && i > 0;\n          const v = f && _ && d;\n          let h;\n          let p;\n          if (v) {\n            [p, h] = s();\n            assignDeep(o.P, p);\n          }\n          t = e;\n          n = i;\n          return h;\n        };\n      }\n    })\n  }\n}))();\nconst Gt = \"__osClickScrollPlugin\";\nconst qt = /* @__PURE__ */(() => ({\n  [Gt]: {\n    static: () => (t, n, o, s, e) => {\n      let c = 0;\n      let r = noop;\n      const animateClickScroll = l => {\n        r = animateNumber(l, l + s * Math.sign(o), 133, (o, l, i) => {\n          t(o);\n          const a = n();\n          const u = a + s;\n          const f = e >= a && e <= u;\n          if (i && !f) {\n            if (c) {\n              animateClickScroll(o);\n            } else {\n              const t = d(() => {\n                animateClickScroll(o);\n              }, 222);\n              r = () => {\n                clearTimeout(t);\n              };\n            }\n            c++;\n          }\n        });\n      };\n      animateClickScroll(0);\n      return () => r();\n    }\n  }\n}))();\nlet Ft;\nconst getNativeScrollbarSize = (t, n, o, s) => {\n  appendChildren(t, n);\n  const e = V(n);\n  const c = L(n);\n  const r = fractionalSize(o);\n  s && removeElements(n);\n  return {\n    x: c.h - e.h + r.h,\n    y: c.w - e.w + r.w\n  };\n};\nconst getNativeScrollbarsHiding = t => {\n  let n = false;\n  const o = addClass(t, Y);\n  try {\n    n = style(t, cssProperty(\"scrollbar-width\")) === \"none\" || r.getComputedStyle(t, \"::-webkit-scrollbar\").getPropertyValue(\"display\") === \"none\";\n  } catch (s) {}\n  o();\n  return n;\n};\nconst getRtlScrollBehavior = (t, n) => {\n  style(t, {\n    [T]: R,\n    [D]: R,\n    direction: \"rtl\"\n  });\n  scrollElementTo(t, {\n    x: 0\n  });\n  const o = absoluteCoordinates(t);\n  const s = absoluteCoordinates(n);\n  scrollElementTo(t, {\n    x: -999\n  });\n  const e = absoluteCoordinates(n);\n  return {\n    i: o.x === s.x,\n    n: s.x !== e.x\n  };\n};\nconst getFlexboxGlue = (t, n) => {\n  const o = addClass(t, W);\n  const s = getBoundingClientRect(t);\n  const e = getBoundingClientRect(n);\n  const c = equalBCRWH(e, s, true);\n  const r = addClass(t, X);\n  const l = getBoundingClientRect(t);\n  const i = getBoundingClientRect(n);\n  const a = equalBCRWH(i, l, true);\n  o();\n  r();\n  return c && a;\n};\nconst createEnvironment = () => {\n  const {\n    body: t\n  } = document;\n  const n = createDOM(`<div class=\"${F}\"><div></div></div>`);\n  const o = n[0];\n  const s = o.firstChild;\n  const [e,, c] = createEventListenerHub();\n  const [l, i] = createCache({\n    o: getNativeScrollbarSize(t, o, s),\n    u: equalXY\n  }, bind(getNativeScrollbarSize, t, o, s, true));\n  const [a] = i();\n  const u = getNativeScrollbarsHiding(o);\n  const f = {\n    x: a.x === 0,\n    y: a.y === 0\n  };\n  const _ = {\n    elements: {\n      host: null,\n      padding: !u,\n      viewport: t => u && t === t.ownerDocument.body && t,\n      content: false\n    },\n    scrollbars: {\n      slot: true\n    },\n    cancel: {\n      nativeScrollbarsOverlaid: false,\n      body: null\n    }\n  };\n  const d = assignDeep({}, G);\n  const v = bind(assignDeep, {}, d);\n  const h = bind(assignDeep, {}, _);\n  const p = {\n    P: a,\n    I: f,\n    H: u,\n    A: style(o, \"zIndex\") === \"-1\",\n    L: !!S,\n    V: getRtlScrollBehavior(o, s),\n    U: getFlexboxGlue(o, s),\n    B: bind(e, \"r\"),\n    j: h,\n    N: t => assignDeep(_, t) && h(),\n    G: v,\n    q: t => assignDeep(d, t) && v(),\n    F: assignDeep({}, _),\n    W: assignDeep({}, d)\n  };\n  removeAttr(o, \"style\");\n  removeElements(o);\n  r.addEventListener(\"resize\", () => {\n    let t;\n    if (!u && (!f.x || !f.y)) {\n      const n = getStaticPluginModuleInstance(jt);\n      const o = n ? n.R() : noop;\n      t = !!o(p, l);\n    }\n    c(\"r\", [t]);\n  });\n  return p;\n};\nconst getEnvironment = () => {\n  if (!Ft) {\n    Ft = createEnvironment();\n  }\n  return Ft;\n};\nconst resolveInitialization = (t, n) => isFunction(n) ? n.apply(0, t) : n;\nconst staticInitializationElement = (t, n, o, s) => {\n  const e = isUndefined(s) ? o : s;\n  const c = resolveInitialization(t, e);\n  return c || n.apply(0, t);\n};\nconst dynamicInitializationElement = (t, n, o, s) => {\n  const e = isUndefined(s) ? o : s;\n  const c = resolveInitialization(t, e);\n  return !!c && (isHTMLElement(c) ? c : n.apply(0, t));\n};\nconst cancelInitialization = (t, n) => {\n  const {\n    nativeScrollbarsOverlaid: o,\n    body: s\n  } = n || {};\n  const {\n    I: e,\n    H: c,\n    j: r\n  } = getEnvironment();\n  const {\n    nativeScrollbarsOverlaid: l,\n    body: i\n  } = r().cancel;\n  const a = o != null ? o : l;\n  const u = isUndefined(s) ? i : s;\n  const f = (e.x || e.y) && a;\n  const _ = t && (isNull(u) ? !c : u);\n  return !!f || !!_;\n};\nconst Wt = new WeakMap();\nconst addInstance = (t, n) => {\n  Wt.set(t, n);\n};\nconst removeInstance = t => {\n  Wt.delete(t);\n};\nconst getInstance = t => Wt.get(t);\nconst createEventContentChange = (t, n, o) => {\n  let s = false;\n  const e = o ? new WeakMap() : false;\n  const destroy = () => {\n    s = true;\n  };\n  const updateElements = c => {\n    if (e && o) {\n      const r = o.map(n => {\n        const [o, s] = n || [];\n        const e = s && o ? (c || find)(o, t) : [];\n        return [e, s];\n      });\n      each(r, o => each(o[0], c => {\n        const r = o[1];\n        const l = e.get(c) || [];\n        const i = t.contains(c);\n        if (i && r) {\n          const t = addEventListener(c, r.trim(), o => {\n            if (s) {\n              t();\n              e.delete(c);\n            } else {\n              n(o);\n            }\n          });\n          e.set(c, push(l, t));\n        } else {\n          runEachAndClear(l);\n          e.delete(c);\n        }\n      }));\n    }\n  };\n  updateElements();\n  return [destroy, updateElements];\n};\nconst createDOMObserver = (t, n, o, s) => {\n  let e = false;\n  const {\n    X: c,\n    Y: r,\n    J: l,\n    K: i,\n    Z: a,\n    tt: u\n  } = s || {};\n  const f = debounce(() => e && o(true), {\n    v: 33,\n    p: 99\n  });\n  const [_, d] = createEventContentChange(t, f, l);\n  const v = c || [];\n  const h = r || [];\n  const p = concat(v, h);\n  const observerCallback = (e, c) => {\n    if (!isEmptyArray(c)) {\n      const r = a || noop;\n      const l = u || noop;\n      const f = [];\n      const _ = [];\n      let v = false;\n      let p = false;\n      each(c, o => {\n        const {\n          attributeName: e,\n          target: c,\n          type: a,\n          oldValue: u,\n          addedNodes: d,\n          removedNodes: g\n        } = o;\n        const b = a === \"attributes\";\n        const w = a === \"childList\";\n        const y = t === c;\n        const m = b && e;\n        const S = m ? attr(c, e || \"\") : null;\n        const $ = m && u !== S;\n        const x = inArray(h, e) && $;\n        if (n && (w || !y)) {\n          const n = b && $;\n          const a = n && i && is(c, i);\n          const _ = a ? !r(c, e, u, S) : !b || n;\n          const v = _ && !l(o, !!a, t, s);\n          each(d, t => push(f, t));\n          each(g, t => push(f, t));\n          p = p || v;\n        }\n        if (!n && y && $ && !r(c, e, u, S)) {\n          push(_, e);\n          v = v || x;\n        }\n      });\n      d(t => deduplicateArray(f).reduce((n, o) => {\n        push(n, find(t, o));\n        return is(o, t) ? push(n, o) : n;\n      }, []));\n      if (n) {\n        !e && p && o(false);\n        return [false];\n      }\n      if (!isEmptyArray(_) || v) {\n        const t = [deduplicateArray(_), v];\n        !e && o.apply(0, t);\n        return t;\n      }\n    }\n  };\n  const g = new w(bind(observerCallback, false));\n  return [() => {\n    g.observe(t, {\n      attributes: true,\n      attributeOldValue: true,\n      attributeFilter: p,\n      subtree: n,\n      childList: n,\n      characterData: n\n    });\n    e = true;\n    return () => {\n      if (e) {\n        _();\n        g.disconnect();\n        e = false;\n      }\n    };\n  }, () => {\n    if (e) {\n      f.m();\n      return observerCallback(true, g.takeRecords());\n    }\n  }];\n};\nconst createSizeObserver = (t, n, o) => {\n  const s = 3333333;\n  const {\n    nt: e,\n    ot: c\n  } = o || {};\n  const r = getStaticPluginModuleInstance(Vt);\n  const {\n    V: l\n  } = getEnvironment();\n  const i = bind(getDirectionIsRTL, t);\n  const [a] = createCache({\n    o: false,\n    _: true\n  });\n  return () => {\n    const o = [];\n    const u = createDOM(`<div class=\"${ft}\"><div class=\"${dt}\"></div></div>`);\n    const f = u[0];\n    const _ = f.firstChild;\n    const onSizeChangedCallbackProxy = t => {\n      const o = t instanceof ResizeObserverEntry;\n      const c = !o && isArray(t);\n      let r = false;\n      let i = false;\n      let u = true;\n      if (o) {\n        const [n,, o] = a(t.contentRect);\n        const s = domRectHasDimensions(n);\n        const e = domRectAppeared(n, o);\n        const c = !o;\n        i = c || e;\n        r = !i && !s;\n        u = !r;\n      } else if (c) {\n        [, u] = t;\n      } else {\n        i = t === true;\n      }\n      if (e && u) {\n        const n = c ? t[0] : getDirectionIsRTL(f);\n        scrollElementTo(f, {\n          x: getRTLCompatibleScrollPosition(s, s, n && l),\n          y: s\n        });\n      }\n      if (!r) {\n        n({\n          st: c ? t : void 0,\n          et: !c,\n          ot: i\n        });\n      }\n    };\n    if (m) {\n      const t = new m(t => onSizeChangedCallbackProxy(t.pop()));\n      t.observe(_);\n      push(o, () => {\n        t.disconnect();\n      });\n    } else if (r) {\n      const [t, n] = r(_, onSizeChangedCallbackProxy, c);\n      push(o, concat([addClass(f, _t), addEventListener(f, \"animationstart\", t)], n));\n    } else {\n      return noop;\n    }\n    if (e) {\n      const [t] = createCache({\n        o: void 0\n      }, i);\n      push(o, addEventListener(f, \"scroll\", n => {\n        const o = t();\n        const [s, e, c] = o;\n        if (e) {\n          removeClass(_, \"ltr rtl\");\n          addClass(_, s ? \"rtl\" : \"ltr\");\n          onSizeChangedCallbackProxy([!!s, e, c]);\n        }\n        stopPropagation(n);\n      }));\n    }\n    return bind(runEachAndClear, push(o, appendChildren(t, f)));\n  };\n};\nconst createTrinsicObserver = (t, n) => {\n  let o;\n  const isHeightIntrinsic = t => t.h === 0 || t.isIntersecting || t.intersectionRatio > 0;\n  const s = createDiv(gt);\n  const [e] = createCache({\n    o: false\n  });\n  const triggerOnTrinsicChangedCallback = (t, o) => {\n    if (t) {\n      const s = e(isHeightIntrinsic(t));\n      const [, c] = s;\n      return c && !o && n(s) && [s];\n    }\n  };\n  const intersectionObserverCallback = (t, n) => triggerOnTrinsicChangedCallback(n.pop(), t);\n  return [() => {\n    const n = [];\n    if (y) {\n      o = new y(bind(intersectionObserverCallback, false), {\n        root: t\n      });\n      o.observe(s);\n      push(n, () => {\n        o.disconnect();\n      });\n    } else {\n      const onSizeChanged = () => {\n        const t = L(s);\n        triggerOnTrinsicChangedCallback(t);\n      };\n      push(n, createSizeObserver(s, onSizeChanged)());\n      onSizeChanged();\n    }\n    return bind(runEachAndClear, push(n, appendChildren(t, s)));\n  }, () => o && intersectionObserverCallback(true, o.takeRecords())];\n};\nconst createObserversSetup = (t, n) => {\n  let o;\n  let s;\n  let e;\n  let c;\n  let r;\n  const {\n    H: l\n  } = getEnvironment();\n  const i = `[${K}]`;\n  const a = `[${et}]`;\n  const u = [\"tabindex\"];\n  const f = [\"wrap\", \"cols\", \"rows\"];\n  const _ = [\"id\", \"class\", \"style\", \"open\"];\n  const d = {\n    ct: false,\n    rt: getDirectionIsRTL(t.lt)\n  };\n  const {\n    lt: v,\n    it: h,\n    ut: p,\n    ft: g,\n    _t: b,\n    dt: w,\n    vt: y\n  } = t;\n  const {\n    U: S,\n    B: $\n  } = getEnvironment();\n  const [x] = createCache({\n    u: equalWH,\n    o: {\n      w: 0,\n      h: 0\n    }\n  }, () => {\n    const t = w(lt, tt);\n    const n = w(ct, \"\");\n    const o = n && getElmentScroll(h);\n    y(lt, tt);\n    y(ct, \"\");\n    y(\"\", st, true);\n    const s = U(p);\n    const e = U(h);\n    const c = fractionalSize(h);\n    y(lt, tt, t);\n    y(ct, \"\", n);\n    y(\"\", st);\n    scrollElementTo(h, o);\n    return {\n      w: e.w + s.w + c.w,\n      h: e.h + s.h + c.h\n    };\n  });\n  const O = g ? f : concat(_, f);\n  const C = debounce(n, {\n    v: () => o,\n    p: () => s,\n    g(t, n) {\n      const [o] = t;\n      const [s] = n;\n      return [concat(keys(o), keys(s)).reduce((t, n) => {\n        t[n] = o[n] || s[n];\n        return t;\n      }, {})];\n    }\n  });\n  const updateViewportAttrsFromHost = t => {\n    each(t || u, t => {\n      if (inArray(u, t)) {\n        const n = attr(v, t);\n        if (isString(n)) {\n          attr(h, t, n);\n        } else {\n          removeAttr(h, t);\n        }\n      }\n    });\n  };\n  const onTrinsicChanged = (t, o) => {\n    const [s, e] = t;\n    const c = {\n      ht: e\n    };\n    assignDeep(d, {\n      ct: s\n    });\n    !o && n(c);\n    return c;\n  };\n  const onSizeChanged = ({\n    et: t,\n    st: o,\n    ot: s\n  }) => {\n    const e = t && !s && !o;\n    const c = !e && l ? C : n;\n    const [r, i] = o || [];\n    o && assignDeep(d, {\n      rt: r\n    });\n    c({\n      et: t || s,\n      ot: s,\n      gt: i\n    });\n  };\n  const onContentMutation = (t, o) => {\n    const [, s] = x();\n    const e = {\n      bt: s\n    };\n    const c = t ? n : C;\n    s && !o && c(e);\n    return e;\n  };\n  const onHostMutation = (t, n, o) => {\n    const s = {\n      wt: n\n    };\n    if (n && !o) {\n      C(s);\n    } else if (!b) {\n      updateViewportAttrsFromHost(t);\n    }\n    return s;\n  };\n  const [H, z] = p || !S ? createTrinsicObserver(v, onTrinsicChanged) : [];\n  const I = !b && createSizeObserver(v, onSizeChanged, {\n    ot: true,\n    nt: true\n  });\n  const [A, E] = createDOMObserver(v, false, onHostMutation, {\n    Y: _,\n    X: concat(_, u)\n  });\n  const T = b && m && new m(t => {\n    const n = t[t.length - 1].contentRect;\n    onSizeChanged({\n      et: true,\n      ot: domRectAppeared(n, r)\n    });\n    r = n;\n  });\n  return [() => {\n    updateViewportAttrsFromHost();\n    T && T.observe(v);\n    const t = I && I();\n    const n = H && H();\n    const o = A();\n    const s = $(t => {\n      const [, n] = x();\n      C({\n        yt: t,\n        bt: n\n      });\n    });\n    return () => {\n      T && T.disconnect();\n      t && t();\n      n && n();\n      c && c();\n      o();\n      s();\n    };\n  }, ({\n    St: t,\n    $t: n,\n    xt: r\n  }) => {\n    const l = {};\n    const [u] = t(\"update.ignoreMutation\");\n    const [f, _] = t(\"update.attributes\");\n    const [d, v] = t(\"update.elementEvents\");\n    const [g, w] = t(\"update.debounce\");\n    const y = v || _;\n    const m = n || r;\n    const ignoreMutationFromOptions = t => isFunction(u) && u(t);\n    if (y) {\n      e && e();\n      c && c();\n      const [t, n] = createDOMObserver(p || h, true, onContentMutation, {\n        X: concat(O, f || []),\n        J: d,\n        K: i,\n        tt: (t, n) => {\n          const {\n            target: o,\n            attributeName: s\n          } = t;\n          const e = !n && s && !b ? liesBetween(o, i, a) : false;\n          return e || !!closest(o, `.${yt}`) || !!ignoreMutationFromOptions(t);\n        }\n      });\n      c = t();\n      e = n;\n    }\n    if (w) {\n      C.m();\n      if (isArray(g)) {\n        const t = g[0];\n        const n = g[1];\n        o = isNumber(t) && t;\n        s = isNumber(n) && n;\n      } else if (isNumber(g)) {\n        o = g;\n        s = false;\n      } else {\n        o = false;\n        s = false;\n      }\n    }\n    if (m) {\n      const t = E();\n      const n = z && z();\n      const o = e && e();\n      t && assignDeep(l, onHostMutation(t[0], t[1], m));\n      n && assignDeep(l, onTrinsicChanged(n[0], m));\n      o && assignDeep(l, onContentMutation(o[0], m));\n    }\n    return l;\n  }, d];\n};\nconst capNumber = (t, n, o) => l(t, i(n, o));\nconst getScrollbarHandleOffsetPercent = (t, n, o) => {\n  const s = a(n);\n  const [e, c] = getRTLCompatibleScrollBounds(s, o);\n  const r = (c - t) / c;\n  const l = t / e;\n  const i = t / c;\n  const u = o ? o.n ? r : o.i ? l : i : i;\n  return capNumber(0, 1, u);\n};\nconst getScrollbarHandleLengthRatio = (t, n, o) => {\n  if (o) {\n    const t = n ? k : M;\n    const {\n      Ot: s,\n      Ct: e\n    } = o;\n    const c = getBoundingClientRect(e)[t];\n    const r = getBoundingClientRect(s)[t];\n    return capNumber(0, 1, c / r);\n  }\n  const s = n ? \"x\" : \"y\";\n  const {\n    Ht: e,\n    zt: c\n  } = t;\n  const r = c[s];\n  const l = e[s];\n  return capNumber(0, 1, r / (r + l));\n};\nconst getScrollbarHandleOffsetRatio = (t, n, o, s) => {\n  const e = getScrollbarHandleLengthRatio(t, s, n);\n  return 1 / e * (1 - e) * o;\n};\nconst createScrollbarsSetupElements = (t, n, o, s) => {\n  const {\n    j: e,\n    A: c\n  } = getEnvironment();\n  const {\n    scrollbars: r\n  } = e();\n  const {\n    slot: i\n  } = r;\n  const {\n    It: a,\n    lt: u,\n    it: f,\n    At: _,\n    Et: v,\n    Tt: h,\n    _t: p\n  } = n;\n  const {\n    scrollbars: g\n  } = _ ? {} : t;\n  const {\n    slot: b\n  } = g || {};\n  const w = new Map();\n  const initScrollTimeline = t => S && new S({\n    source: v,\n    axis: t\n  });\n  const y = initScrollTimeline(\"x\");\n  const m = initScrollTimeline(\"y\");\n  const $ = dynamicInitializationElement([a, u, f], () => p && h ? a : u, i, b);\n  const doRefreshScrollbarOffset = t => p && !h && parent(t) === f;\n  const cancelElementAnimations = t => {\n    w.forEach((n, o) => {\n      const s = t ? inArray(isArray(t) ? t : [t], o) : true;\n      if (s) {\n        (n || []).forEach(t => {\n          t && t.cancel();\n        });\n        w.delete(o);\n      }\n    });\n  };\n  const scrollbarStructureAddRemoveClass = (t, n, o) => {\n    const s = o ? addClass : removeClass;\n    each(t, t => {\n      s(t.Dt, n);\n    });\n  };\n  const scrollbarStyle = (t, n) => {\n    each(t, t => {\n      const [o, s] = n(t);\n      style(o, s);\n    });\n  };\n  const animateElement = (t, n, o, s) => n && t.animate(o, {\n    timeline: n,\n    composite: s\n  });\n  const scrollbarStructureRefreshHandleLength = (t, n) => {\n    scrollbarStyle(t, t => {\n      const {\n        Ct: s\n      } = t;\n      return [s, {\n        [n ? k : M]: ratioToCssPercent(getScrollbarHandleLengthRatio(o, n))\n      }];\n    });\n  };\n  const scrollbarStructureRefreshHandleOffset = (t, n) => {\n    if (y && m) {\n      t.forEach(t => {\n        const {\n          Dt: s,\n          Ct: e\n        } = t;\n        const c = bind(getScrollbarHandleOffsetRatio, o, t);\n        const r = n && getDirectionIsRTL(s);\n        const l = c(r ? 1 : 0, n);\n        const i = c(r ? 0 : 1, n);\n        cancelElementAnimations(e);\n        w.set(e, [animateElement(e, n ? y : m, assignDeep({\n          transform: [getTrasformTranslateValue(ratioToCssPercent(l), n), getTrasformTranslateValue(ratioToCssPercent(i), n)]\n        }, r ? {\n          clear: [\"left\"]\n        } : {}))]);\n      });\n    } else {\n      scrollbarStyle(t, t => {\n        const {\n          Ct: s,\n          Dt: e\n        } = t;\n        const {\n          V: c\n        } = getEnvironment();\n        const r = n ? \"x\" : \"y\";\n        const {\n          Ht: l\n        } = o;\n        const i = getDirectionIsRTL(e);\n        const a = getScrollbarHandleOffsetRatio(o, t, getScrollbarHandleOffsetPercent(getElmentScroll(v)[r], l[r], n && i && c), n);\n        return [s, {\n          transform: getTrasformTranslateValue(ratioToCssPercent(a), n)\n        }];\n      });\n    }\n  };\n  const styleScrollbarPosition = t => {\n    const {\n      Dt: n\n    } = t;\n    const o = doRefreshScrollbarOffset(n) && n;\n    const {\n      x: s,\n      y: e\n    } = getElmentScroll(v);\n    return [o, {\n      transform: o ? getTrasformTranslateValue({\n        x: numberToCssPx(s),\n        y: numberToCssPx(e)\n      }) : \"\"\n    }];\n  };\n  const animateScrollbarOffset = (t, n, o, s) => animateElement(t, n, {\n    transform: [getTrasformTranslateValue(numberToCssPx(0), s), getTrasformTranslateValue(numberToCssPx(l(0, o - .5)), s)]\n  }, \"add\");\n  const x = [];\n  const O = [];\n  const C = [];\n  const scrollbarsAddRemoveClass = (t, n, o) => {\n    const s = isBoolean(o);\n    const e = s ? o : true;\n    const c = s ? !o : true;\n    e && scrollbarStructureAddRemoveClass(O, t, n);\n    c && scrollbarStructureAddRemoveClass(C, t, n);\n  };\n  const refreshScrollbarsHandleLength = () => {\n    scrollbarStructureRefreshHandleLength(O, true);\n    scrollbarStructureRefreshHandleLength(C);\n  };\n  const refreshScrollbarsHandleOffset = () => {\n    scrollbarStructureRefreshHandleOffset(O, true);\n    scrollbarStructureRefreshHandleOffset(C);\n  };\n  const refreshScrollbarsScrollbarOffset = () => {\n    if (p) {\n      if (m && m) {\n        const {\n          Ht: t\n        } = o;\n        concat(C, O).forEach(({\n          Dt: n\n        }) => {\n          cancelElementAnimations(n);\n          if (doRefreshScrollbarOffset(n)) {\n            w.set(n, [animateScrollbarOffset(n, y, t.x, true), animateScrollbarOffset(n, m, t.y)]);\n          }\n        });\n      } else {\n        scrollbarStyle(O, styleScrollbarPosition);\n        scrollbarStyle(C, styleScrollbarPosition);\n      }\n    }\n  };\n  const generateScrollbarDOM = t => {\n    const n = t ? St : $t;\n    const o = t ? O : C;\n    const e = isEmptyArray(o) ? zt : \"\";\n    const r = createDiv(`${yt} ${n} ${e}`);\n    const l = createDiv(xt);\n    const i = createDiv(Ot);\n    const a = {\n      Dt: r,\n      Ot: l,\n      Ct: i\n    };\n    if (!c) {\n      addClass(r, bt);\n    }\n    push(o, a);\n    push(x, [appendChildren(r, l), appendChildren(l, i), bind(removeElements, r), cancelElementAnimations, s(a, scrollbarsAddRemoveClass, scrollbarStructureRefreshHandleOffset, t)]);\n    return a;\n  };\n  const H = bind(generateScrollbarDOM, true);\n  const z = bind(generateScrollbarDOM, false);\n  const appendElements = () => {\n    appendChildren($, O[0].Dt);\n    appendChildren($, C[0].Dt);\n    d(() => {\n      scrollbarsAddRemoveClass(zt);\n    }, 300);\n    return bind(runEachAndClear, x);\n  };\n  H();\n  z();\n  return [{\n    kt: refreshScrollbarsHandleLength,\n    Mt: refreshScrollbarsHandleOffset,\n    Rt: refreshScrollbarsScrollbarOffset,\n    Pt: scrollbarsAddRemoveClass,\n    Lt: {\n      L: y,\n      Vt: O,\n      Ut: H,\n      Bt: bind(scrollbarStyle, O)\n    },\n    jt: {\n      L: m,\n      Vt: C,\n      Ut: z,\n      Bt: bind(scrollbarStyle, C)\n    }\n  }, appendElements];\n};\nconst createScrollbarsSetupEvents = (t, n, o) => {\n  const {\n    lt: s,\n    Et: e,\n    Nt: c\n  } = n;\n  return (n, r, l, i) => {\n    const {\n      Dt: u,\n      Ot: f,\n      Ct: _\n    } = n;\n    const [d, v] = selfClearTimeout(333);\n    const [h, p] = selfClearTimeout();\n    const g = bind(l, [n], i);\n    const b = !!e.scrollBy;\n    const w = `client${i ? \"X\" : \"Y\"}`;\n    const y = i ? k : M;\n    const m = i ? \"left\" : \"top\";\n    const S = i ? \"w\" : \"h\";\n    const $ = i ? \"x\" : \"y\";\n    const isAffectingTransition = t => t.propertyName.indexOf(y) > -1;\n    const createInteractiveScrollEvents = () => {\n      const n = \"pointerup pointerleave pointercancel lostpointercapture\";\n      const createRelativeHandleMove = (t, n) => s => {\n        const {\n          Ht: c\n        } = o;\n        const r = L(f)[S] - L(_)[S];\n        const l = n * s / r;\n        const i = l * c[$];\n        scrollElementTo(e, {\n          [$]: t + i\n        });\n      };\n      return addEventListener(f, \"pointerdown\", o => {\n        const r = closest(o.target, `.${Ot}`) === _;\n        const l = r ? _ : f;\n        const i = t.scrollbars;\n        const {\n          button: u,\n          isPrimary: d,\n          pointerType: v\n        } = o;\n        const {\n          pointers: h\n        } = i;\n        const p = u === 0 && d && i[r ? \"dragScroll\" : \"clickScroll\"] && (h || []).includes(v);\n        attrClass(s, K, ot, true);\n        if (p) {\n          const t = !r && o.shiftKey;\n          const i = bind(getBoundingClientRect, _);\n          const u = bind(getBoundingClientRect, f);\n          const getHandleOffset = (t, n) => (t || i())[m] - (n || u())[m];\n          const d = a(getBoundingClientRect(e)[y]) / L(e)[S] || 1;\n          const v = createRelativeHandleMove(getElmentScroll(e)[$] || 0, 1 / d);\n          const h = o[w];\n          const p = i();\n          const g = u();\n          const b = p[y];\n          const x = getHandleOffset(p, g) + b / 2;\n          const O = h - g[m];\n          const C = r ? 0 : O - x;\n          const releasePointerCapture = t => {\n            runEachAndClear(H);\n            l.releasePointerCapture(t.pointerId);\n          };\n          const H = [bind(attrClass, s, K, ot), addEventListener(c, n, releasePointerCapture), addEventListener(c, \"selectstart\", t => preventDefault(t), {\n            S: false\n          }), addEventListener(f, n, releasePointerCapture), addEventListener(f, \"pointermove\", n => {\n            const o = n[w] - h;\n            if (r || t) {\n              v(C + o);\n            }\n          })];\n          if (t) {\n            v(C);\n          } else if (!r) {\n            const t = getStaticPluginModuleInstance(Gt);\n            t && push(H, t(v, getHandleOffset, C, b, O));\n          }\n          l.setPointerCapture(o.pointerId);\n        }\n      });\n    };\n    let x = true;\n    return bind(runEachAndClear, [addEventListener(u, \"pointerenter\", () => {\n      r(It, true);\n    }), addEventListener(u, \"pointerleave pointercancel\", () => {\n      r(It, false);\n    }), addEventListener(u, \"wheel\", t => {\n      const {\n        deltaX: n,\n        deltaY: o,\n        deltaMode: c\n      } = t;\n      if (b && x && c === 0 && parent(u) === s) {\n        e.scrollBy({\n          left: n,\n          top: o,\n          behavior: \"smooth\"\n        });\n      }\n      x = false;\n      r(Dt, true);\n      d(() => {\n        x = true;\n        r(Dt);\n      });\n      preventDefault(t);\n    }, {\n      S: false,\n      $: true\n    }), addEventListener(_, \"transitionstart\", t => {\n      if (isAffectingTransition(t)) {\n        const animateHandleOffset = () => {\n          g();\n          h(animateHandleOffset);\n        };\n        animateHandleOffset();\n      }\n    }), addEventListener(_, \"transitionend transitioncancel\", t => {\n      if (isAffectingTransition(t)) {\n        p();\n        g();\n      }\n    }), addEventListener(u, \"mousedown\", bind(addEventListener, c, \"click\", stopPropagation, {\n      O: true,\n      $: true\n    }), {\n      $: true\n    }), createInteractiveScrollEvents(), v, p]);\n  };\n};\nconst createScrollbarsSetup = (t, n, o, s, e, c) => {\n  let r;\n  let l;\n  let i;\n  let a;\n  let u;\n  let f = noop;\n  let _ = 0;\n  const [d, v] = selfClearTimeout();\n  const [h, p] = selfClearTimeout();\n  const [g, b] = selfClearTimeout(100);\n  const [w, y] = selfClearTimeout(100);\n  const [m, S] = selfClearTimeout(100);\n  const [$, x] = selfClearTimeout(() => _);\n  const [O, C] = createScrollbarsSetupElements(t, e, s, createScrollbarsSetupEvents(n, e, s));\n  const {\n    lt: H,\n    Gt: z,\n    Tt: I\n  } = e;\n  const {\n    Pt: A,\n    kt: E,\n    Mt: T,\n    Rt: D\n  } = O;\n  const manageAutoHideSuspension = t => {\n    A(Et, t, true);\n    A(Et, t, false);\n  };\n  const manageScrollbarsAutoHide = (t, n) => {\n    x();\n    if (t) {\n      A(Tt);\n    } else {\n      const t = bind(A, Tt, true);\n      if (_ > 0 && !n) {\n        $(t);\n      } else {\n        t();\n      }\n    }\n  };\n  const isHoverablePointerType = t => t.pointerType === \"mouse\";\n  const onHostMouseEnter = t => {\n    if (isHoverablePointerType(t)) {\n      a = l;\n      a && manageScrollbarsAutoHide(true);\n    }\n  };\n  const k = [b, x, y, S, p, v, () => f(), addEventListener(H, \"pointerover\", onHostMouseEnter, {\n    O: true\n  }), addEventListener(H, \"pointerenter\", onHostMouseEnter), addEventListener(H, \"pointerleave\", t => {\n    if (isHoverablePointerType(t)) {\n      a = false;\n      l && manageScrollbarsAutoHide(false);\n    }\n  }), addEventListener(H, \"pointermove\", t => {\n    isHoverablePointerType(t) && r && d(() => {\n      b();\n      manageScrollbarsAutoHide(true);\n      w(() => {\n        r && manageScrollbarsAutoHide(false);\n      });\n    });\n  }), addEventListener(z, \"scroll\", t => {\n    h(() => {\n      T();\n      i && manageScrollbarsAutoHide(true);\n      g(() => {\n        i && !a && manageScrollbarsAutoHide(false);\n      });\n    });\n    c(t);\n    D();\n  })];\n  return [() => bind(runEachAndClear, push(k, C())), ({\n    St: t,\n    xt: n,\n    qt: e,\n    Ft: c\n  }) => {\n    const {\n      Wt: a,\n      Xt: d,\n      Yt: v\n    } = c || {};\n    const {\n      gt: h,\n      ot: p\n    } = e || {};\n    const {\n      rt: g\n    } = o;\n    const {\n      I: b\n    } = getEnvironment();\n    const {\n      Ht: w,\n      Jt: y,\n      Kt: S\n    } = s;\n    const [$, x] = t(\"showNativeOverlaidScrollbars\");\n    const [O, C] = t(\"scrollbars.theme\");\n    const [H, k] = t(\"scrollbars.visibility\");\n    const [M, R] = t(\"scrollbars.autoHide\");\n    const [P, L] = t(\"scrollbars.autoHideSuspend\");\n    const [V] = t(\"scrollbars.autoHideDelay\");\n    const [U, B] = t(\"scrollbars.dragScroll\");\n    const [j, N] = t(\"scrollbars.clickScroll\");\n    const G = p && !n;\n    const q = S.x || S.y;\n    const F = a || d || h || n;\n    const W = v || k;\n    const X = $ && b.x && b.y;\n    const setScrollbarVisibility = (t, n) => {\n      const o = H === \"visible\" || H === \"auto\" && t === \"scroll\";\n      A(Ct, o, n);\n      return o;\n    };\n    _ = V;\n    if (G) {\n      if (P && q) {\n        manageAutoHideSuspension(false);\n        f();\n        m(() => {\n          f = addEventListener(z, \"scroll\", bind(manageAutoHideSuspension, true), {\n            O: true\n          });\n        });\n      } else {\n        manageAutoHideSuspension(true);\n      }\n    }\n    if (x) {\n      A(wt, X);\n    }\n    if (C) {\n      A(u);\n      A(O, true);\n      u = O;\n    }\n    if (L && !P) {\n      manageAutoHideSuspension(true);\n    }\n    if (R) {\n      r = M === \"move\";\n      l = M === \"leave\";\n      i = M !== \"never\";\n      manageScrollbarsAutoHide(!i, true);\n    }\n    if (B) {\n      A(Mt, U);\n    }\n    if (N) {\n      A(kt, j);\n    }\n    if (W) {\n      const t = setScrollbarVisibility(y.x, true);\n      const n = setScrollbarVisibility(y.y, false);\n      const o = t && n;\n      A(Ht, !o);\n    }\n    if (F) {\n      E();\n      T();\n      D();\n      A(At, !w.x, true);\n      A(At, !w.y, false);\n      A(mt, g && !I);\n    }\n  }, {}, O];\n};\nconst createStructureSetupElements = t => {\n  const n = getEnvironment();\n  const {\n    j: o,\n    H: s\n  } = n;\n  const e = getStaticPluginModuleInstance(jt);\n  const c = e && e.C;\n  const {\n    elements: r\n  } = o();\n  const {\n    host: l,\n    padding: i,\n    viewport: a,\n    content: u\n  } = r;\n  const f = isHTMLElement(t);\n  const _ = f ? {} : t;\n  const {\n    elements: d\n  } = _;\n  const {\n    host: v,\n    padding: h,\n    viewport: p,\n    content: g\n  } = d || {};\n  const b = f ? t : _.target;\n  const w = is(b, \"textarea\");\n  const y = b.ownerDocument;\n  const m = y.documentElement;\n  const S = b === y.body;\n  const $ = y.defaultView;\n  const x = bind(staticInitializationElement, [b]);\n  const O = bind(dynamicInitializationElement, [b]);\n  const C = bind(resolveInitialization, [b]);\n  const H = bind(createDiv, \"\");\n  const z = bind(x, H, a);\n  const I = bind(O, H, u);\n  const A = z(p);\n  const E = A === b;\n  const T = E && S;\n  const D = !E && I(g);\n  const k = !E && isHTMLElement(A) && A === D;\n  const M = k && !!C(u);\n  const R = M ? z() : A;\n  const P = M ? D : I();\n  const L = k ? R : A;\n  const V = T ? m : L;\n  const U = w ? x(H, l, v) : b;\n  const B = T ? V : U;\n  const j = k ? P : D;\n  const N = y.activeElement;\n  const G = !E && $.top === $ && N === b;\n  const q = {\n    It: b,\n    lt: B,\n    it: V,\n    Zt: !E && O(H, i, h),\n    ut: j,\n    Qt: !E && !s && c && c(n),\n    Et: T ? m : V,\n    Gt: T ? y : V,\n    tn: $,\n    Nt: y,\n    ft: w,\n    Tt: S,\n    At: f,\n    _t: E,\n    nn: k,\n    dt: (t, n) => hasAttrClass(V, E ? K : et, E ? n : t),\n    vt: (t, n, o) => attrClass(V, E ? K : et, E ? n : t, o)\n  };\n  const F = keys(q).reduce((t, n) => {\n    const o = q[n];\n    return push(t, o && isHTMLElement(o) && !parent(o) ? o : false);\n  }, []);\n  const elementIsGenerated = t => t ? inArray(F, t) : null;\n  const {\n    It: W,\n    lt: X,\n    Zt: tt,\n    it: nt,\n    ut: ot,\n    Qt: st\n  } = q;\n  const ct = [() => {\n    removeAttr(X, K);\n    removeAttr(X, J);\n    removeAttr(W, J);\n    if (S) {\n      removeAttr(m, K);\n      removeAttr(m, J);\n    }\n  }];\n  const lt = w && elementIsGenerated(X);\n  let at = w ? W : contents([ot, nt, tt, X, W].find(t => elementIsGenerated(t) === false));\n  const ft = T ? W : ot || nt;\n  const _t = bind(runEachAndClear, ct);\n  const appendElements = () => {\n    attr(X, K, E ? \"viewport\" : \"host\");\n    attr(tt, it, \"\");\n    attr(ot, ut, \"\");\n    if (!E) {\n      attr(nt, et, \"\");\n    }\n    const t = S && !E ? addClass(parent(b), Y) : noop;\n    const unwrap = t => {\n      appendChildren(parent(t), contents(t));\n      removeElements(t);\n    };\n    if (lt) {\n      insertAfter(W, X);\n      push(ct, () => {\n        insertAfter(X, W);\n        removeElements(X);\n      });\n    }\n    appendChildren(ft, at);\n    appendChildren(X, tt);\n    appendChildren(tt || X, !E && nt);\n    appendChildren(nt, ot);\n    push(ct, () => {\n      t();\n      removeAttr(tt, it);\n      removeAttr(ot, ut);\n      removeAttr(nt, Z);\n      removeAttr(nt, Q);\n      removeAttr(nt, et);\n      elementIsGenerated(ot) && unwrap(ot);\n      elementIsGenerated(nt) && unwrap(nt);\n      elementIsGenerated(tt) && unwrap(tt);\n    });\n    if (s && !E) {\n      attrClass(nt, et, rt, true);\n      push(ct, bind(removeAttr, nt, et));\n    }\n    if (st) {\n      insertBefore(nt, st);\n      push(ct, bind(removeElements, st));\n    }\n    if (G) {\n      const t = \"tabindex\";\n      const n = attr(nt, t);\n      attr(nt, t, \"-1\");\n      nt.focus();\n      const revertViewportTabIndex = () => n ? attr(nt, t, n) : removeAttr(nt, t);\n      const o = addEventListener(y, \"pointerdown keydown\", () => {\n        revertViewportTabIndex();\n        o();\n      });\n      push(ct, [revertViewportTabIndex, o]);\n    } else if (N && N.focus) {\n      N.focus();\n    }\n    at = 0;\n    return _t;\n  };\n  return [q, appendElements, _t];\n};\nconst createTrinsicUpdateSegment = ({\n  ut: t\n}) => ({\n  qt: n,\n  sn: o,\n  xt: s\n}) => {\n  const {\n    U: e\n  } = getEnvironment();\n  const {\n    ht: c\n  } = n || {};\n  const {\n    ct: r\n  } = o;\n  const l = (t || !e) && (c || s);\n  if (l) {\n    style(t, {\n      [M]: r ? \"\" : \"100%\"\n    });\n  }\n};\nconst createPaddingUpdateSegment = ({\n  lt: t,\n  Zt: n,\n  it: o,\n  _t: s\n}, e) => {\n  const [c, r] = createCache({\n    u: equalTRBL,\n    o: topRightBottomLeft()\n  }, bind(topRightBottomLeft, t, \"padding\", \"\"));\n  return ({\n    St: t,\n    qt: l,\n    sn: i,\n    xt: a\n  }) => {\n    let [u, f] = r(a);\n    const {\n      H: _,\n      U: d\n    } = getEnvironment();\n    const {\n      et: v,\n      bt: h,\n      gt: p\n    } = l || {};\n    const {\n      rt: g\n    } = i;\n    const [b, w] = t(\"paddingAbsolute\");\n    const y = a || !d && h;\n    if (v || f || y) {\n      [u, f] = c(a);\n    }\n    const m = !s && (w || p || f);\n    if (m) {\n      const t = !b || !n && !_;\n      const s = u.r + u.l;\n      const c = u.t + u.b;\n      const r = {\n        [A]: t && !g ? -s : 0,\n        [E]: t ? -c : 0,\n        [I]: t && g ? -s : 0,\n        top: t ? -u.t : 0,\n        right: t ? g ? -u.r : \"auto\" : 0,\n        left: t ? g ? \"auto\" : -u.l : 0,\n        [k]: t ? `calc(100% + ${s}px)` : \"\"\n      };\n      const l = {\n        [O]: t ? u.t : 0,\n        [C]: t ? u.r : 0,\n        [z]: t ? u.b : 0,\n        [H]: t ? u.l : 0\n      };\n      style(n || o, r);\n      style(o, l);\n      assignDeep(e, {\n        Zt: u,\n        en: !t,\n        D: n ? l : assignDeep({}, r, l)\n      });\n    }\n    return {\n      cn: m\n    };\n  };\n};\nconst createOverflowUpdateSegment = ({\n  lt: t,\n  Zt: n,\n  it: o,\n  Qt: s,\n  _t: e,\n  vt: c,\n  Tt: i,\n  tn: a\n}, u) => {\n  const f = bind(l, 0);\n  const _ = \"visible\";\n  const d = 42;\n  const v = {\n    u: equalWH,\n    o: {\n      w: 0,\n      h: 0\n    }\n  };\n  const h = {\n    u: equalXY,\n    o: {\n      x: R,\n      y: R\n    }\n  };\n  const getOverflowAmount = (t, n) => {\n    const o = r.devicePixelRatio % 1 !== 0 ? 1 : 0;\n    const s = {\n      w: f(t.w - n.w),\n      h: f(t.h - n.h)\n    };\n    return {\n      w: s.w > o ? s.w : 0,\n      h: s.h > o ? s.h : 0\n    };\n  };\n  const overflowIsVisible = t => t.indexOf(_) === 0;\n  const {\n    P: p,\n    U: g,\n    H: b,\n    I: w\n  } = getEnvironment();\n  const y = getStaticPluginModuleInstance(jt);\n  const m = !e && !b && (w.x || w.y);\n  const S = i && e;\n  const [$, x] = createCache(v, bind(fractionalSize, o));\n  const [O, P] = createCache(v, bind(U, o));\n  const [L, B] = createCache(v);\n  const [j, N] = createCache(v);\n  const [G] = createCache(h);\n  const fixFlexboxGlue = (n, s) => {\n    style(o, {\n      [M]: \"\"\n    });\n    if (s) {\n      const {\n        en: s,\n        Zt: e\n      } = u;\n      const {\n        rn: c,\n        k: r\n      } = n;\n      const l = fractionalSize(t);\n      const i = V(t);\n      const a = style(o, \"boxSizing\") === \"content-box\";\n      const f = s || a ? e.b + e.t : 0;\n      const _ = !(w.x && a);\n      style(o, {\n        [M]: i.h + l.h + (c.x && _ ? r.x : 0) - f\n      });\n    }\n  };\n  const getViewportOverflowState = (t, n) => {\n    const s = !b && !t ? d : 0;\n    const getStatePerAxis = (t, e, c) => {\n      const r = style(o, t);\n      const l = n ? n[t] : r;\n      const i = l === \"scroll\";\n      const a = e ? s : c;\n      const u = i && !b ? a : 0;\n      const f = e && !!s;\n      return [r, i, u, f];\n    };\n    const [e, c, r, l] = getStatePerAxis(T, w.x, p.x);\n    const [i, a, u, f] = getStatePerAxis(D, w.y, p.y);\n    return {\n      Jt: {\n        x: e,\n        y: i\n      },\n      rn: {\n        x: c,\n        y: a\n      },\n      k: {\n        x: r,\n        y: u\n      },\n      M: {\n        x: l,\n        y: f\n      }\n    };\n  };\n  const setViewportOverflowState = (t, n, o, s) => {\n    const setAxisOverflowStyle = (t, n) => {\n      const o = overflowIsVisible(t);\n      const s = n && o && t.replace(`${_}-`, \"\") || \"\";\n      return [n && !o ? t : \"\", overflowIsVisible(s) ? \"hidden\" : s];\n    };\n    const [e, c] = setAxisOverflowStyle(o.x, n.x);\n    const [r, l] = setAxisOverflowStyle(o.y, n.y);\n    s[T] = c && r ? c : e;\n    s[D] = l && e ? l : r;\n    return getViewportOverflowState(t, s);\n  };\n  const hideNativeScrollbars = (t, n, o, s) => {\n    const {\n      k: e,\n      M: c\n    } = t;\n    const {\n      x: r,\n      y: l\n    } = c;\n    const {\n      x: i,\n      y: a\n    } = e;\n    const {\n      D: f\n    } = u;\n    const _ = n ? I : A;\n    const d = n ? H : C;\n    const v = f[_];\n    const h = f[E];\n    const p = f[d];\n    const g = f[z];\n    s[k] = `calc(100% + ${a + v * -1}px)`;\n    s[_] = -a + v;\n    s[E] = -i + h;\n    if (o) {\n      s[d] = p + (l ? a : 0);\n      s[z] = g + (r ? i : 0);\n    }\n  };\n  const [q, F] = y ? y.T(m, g, o, s, u, getViewportOverflowState, hideNativeScrollbars) : [() => m, () => [noop]];\n  return ({\n    St: s,\n    qt: r,\n    sn: i,\n    xt: _\n  }, {\n    cn: d\n  }) => {\n    const {\n      et: v,\n      wt: h,\n      bt: p,\n      ht: y,\n      gt: m,\n      yt: C\n    } = r || {};\n    const {\n      ct: H,\n      rt: z\n    } = i;\n    const [M, R] = s(\"showNativeOverlaidScrollbars\");\n    const [W, X] = s(\"overflow\");\n    const Y = M && w.x && w.y;\n    const J = !e && !g && (v || p || h || R || y);\n    const ot = v || d || p || m || C || R;\n    const st = overflowIsVisible(W.x);\n    const ct = overflowIsVisible(W.y);\n    const ut = st || ct;\n    let ft = x(_);\n    let _t = P(_);\n    let dt = B(_);\n    let vt = N(_);\n    let ht;\n    if (R && b) {\n      c(rt, nt, !Y);\n    }\n    if (J) {\n      ht = getViewportOverflowState(Y);\n      fixFlexboxGlue(ht, H);\n    }\n    if (ot) {\n      if (ut) {\n        c(lt, tt, false);\n      }\n      const [t, n] = F(Y, z, ht);\n      const [s, e] = ft = $(_);\n      const [r, i] = _t = O(_);\n      const u = V(o);\n      let d = r;\n      let v = u;\n      t();\n      if ((i || e || R) && n && !Y && q(n, r, s, z)) {\n        v = V(o);\n        d = U(o);\n      }\n      const h = windowSize(a);\n      const p = {\n        w: f(l(r.w, d.w) + s.w),\n        h: f(l(r.h, d.h) + s.h)\n      };\n      const g = {\n        w: f((S ? h.w : v.w + f(u.w - r.w)) + s.w),\n        h: f((S ? h.h : v.h + f(u.h - r.h)) + s.h)\n      };\n      vt = j(g);\n      dt = L(getOverflowAmount(p, g), _);\n    }\n    const [pt, gt] = vt;\n    const [bt, wt] = dt;\n    const [yt, mt] = _t;\n    const [St, $t] = ft;\n    const xt = {\n      x: bt.w > 0,\n      y: bt.h > 0\n    };\n    const Ot = st && ct && (xt.x || xt.y) || st && xt.x && !xt.y || ct && xt.y && !xt.x;\n    const Ct = d || m || C || $t || mt || gt || wt || X || R || J || ot;\n    if (Ct) {\n      const n = {\n        [A]: 0,\n        [E]: 0,\n        [I]: 0,\n        [k]: \"\",\n        [T]: \"\",\n        [D]: \"\"\n      };\n      const s = setViewportOverflowState(Y, xt, W, n);\n      const c = q(s, yt, St, z);\n      if (!e) {\n        hideNativeScrollbars(s, z, c, n);\n      }\n      if (J) {\n        fixFlexboxGlue(s, H);\n      }\n      if (e) {\n        attr(t, Z, n[T]);\n        attr(t, Q, n[D]);\n      } else {\n        style(o, n);\n      }\n    }\n    attrClass(t, K, tt, Ot);\n    attrClass(n, it, at, Ot);\n    if (!e) {\n      attrClass(o, et, lt, ut);\n    }\n    const [Ht, zt] = G(getViewportOverflowState(Y).Jt);\n    assignDeep(u, {\n      Jt: Ht,\n      zt: {\n        x: pt.w,\n        y: pt.h\n      },\n      Ht: {\n        x: bt.w,\n        y: bt.h\n      },\n      Kt: xt\n    });\n    return {\n      Yt: zt,\n      Wt: gt,\n      Xt: wt\n    };\n  };\n};\nconst createStructureSetup = t => {\n  const [n, o, s] = createStructureSetupElements(t);\n  const e = {\n    Zt: {\n      t: 0,\n      r: 0,\n      b: 0,\n      l: 0\n    },\n    en: false,\n    D: {\n      [A]: 0,\n      [E]: 0,\n      [I]: 0,\n      [O]: 0,\n      [C]: 0,\n      [z]: 0,\n      [H]: 0\n    },\n    zt: {\n      x: 0,\n      y: 0\n    },\n    Ht: {\n      x: 0,\n      y: 0\n    },\n    Jt: {\n      x: R,\n      y: R\n    },\n    Kt: {\n      x: false,\n      y: false\n    }\n  };\n  const {\n    It: c,\n    it: r,\n    vt: l,\n    _t: i\n  } = n;\n  const {\n    H: a,\n    I: u,\n    U: f\n  } = getEnvironment();\n  const _ = !a && (u.x || u.y);\n  const d = [createTrinsicUpdateSegment(n), createPaddingUpdateSegment(n, e), createOverflowUpdateSegment(n, e)];\n  return [o, t => {\n    const n = {};\n    const o = _ || !f;\n    const s = o && getElmentScroll(r);\n    l(\"\", st, true);\n    each(d, o => {\n      assignDeep(n, o(t, n) || {});\n    });\n    l(\"\", st);\n    scrollElementTo(r, s);\n    !i && scrollElementTo(c, 0);\n    return n;\n  }, e, n, s];\n};\nconst createSetups = (t, n, o, s) => {\n  const [e, c, r, l, i] = createStructureSetup(t);\n  const [a, u, f] = createObserversSetup(l, t => {\n    update({}, t);\n  });\n  const [_, d,, v] = createScrollbarsSetup(t, n, f, r, l, s);\n  const updateHintsAreTruthy = t => keys(t).some(n => !!t[n]);\n  const update = (t, s) => {\n    const {\n      ln: e,\n      xt: r,\n      $t: l,\n      an: i\n    } = t;\n    const a = e || {};\n    const _ = !!r;\n    const v = {\n      St: createOptionCheck(n, a, _),\n      ln: a,\n      xt: _\n    };\n    if (i) {\n      d(v);\n      return false;\n    }\n    const h = s || u(assignDeep({}, v, {\n      $t: l\n    }));\n    const p = c(assignDeep({}, v, {\n      sn: f,\n      qt: h\n    }));\n    d(assignDeep({}, v, {\n      qt: h,\n      Ft: p\n    }));\n    const g = updateHintsAreTruthy(h);\n    const b = updateHintsAreTruthy(p);\n    const w = g || b || !isEmptyObject(a) || _;\n    w && o(t, {\n      qt: h,\n      Ft: p\n    });\n    return w;\n  };\n  return [() => {\n    const {\n      It: t,\n      it: n,\n      Nt: o,\n      Tt: s\n    } = l;\n    const c = s ? o.documentElement : t;\n    const r = getElmentScroll(c);\n    const i = [a(), e(), _()];\n    scrollElementTo(n, r);\n    return bind(runEachAndClear, i);\n  }, update, () => ({\n    un: f,\n    fn: r\n  }), {\n    _n: l,\n    dn: v\n  }, i];\n};\nconst OverlayScrollbars = (t, n, o) => {\n  const {\n    G: s\n  } = getEnvironment();\n  const e = isHTMLElement(t);\n  const c = e ? t : t.target;\n  const r = getInstance(c);\n  if (n && !r) {\n    let r = false;\n    const l = [];\n    const i = {};\n    const validateOptions = t => {\n      const n = removeUndefinedProperties(t, true);\n      const o = getStaticPluginModuleInstance(Lt);\n      return o ? o(n, true) : n;\n    };\n    const a = assignDeep({}, s(), validateOptions(n));\n    const [u, f, _] = createEventListenerHub();\n    const [d, v, h] = createEventListenerHub(o);\n    const triggerEvent = (t, n) => {\n      h(t, n);\n      _(t, n);\n    };\n    const [p, g, b, w, y] = createSetups(t, a, ({\n      ln: t,\n      xt: n\n    }, {\n      qt: o,\n      Ft: s\n    }) => {\n      const {\n        et: e,\n        gt: c,\n        ht: r,\n        bt: l,\n        wt: i,\n        ot: a\n      } = o;\n      const {\n        Wt: u,\n        Xt: f,\n        Yt: _\n      } = s;\n      triggerEvent(\"updated\", [m, {\n        updateHints: {\n          sizeChanged: !!e,\n          directionChanged: !!c,\n          heightIntrinsicChanged: !!r,\n          overflowEdgeChanged: !!u,\n          overflowAmountChanged: !!f,\n          overflowStyleChanged: !!_,\n          contentMutation: !!l,\n          hostMutation: !!i,\n          appear: !!a\n        },\n        changedOptions: t || {},\n        force: !!n\n      }]);\n    }, t => triggerEvent(\"scroll\", [m, t]));\n    const destroy = t => {\n      removeInstance(c);\n      runEachAndClear(l);\n      r = true;\n      triggerEvent(\"destroyed\", [m, t]);\n      f();\n      v();\n    };\n    const m = {\n      options(t, n) {\n        if (t) {\n          const o = n ? s() : {};\n          const e = getOptionsDiff(a, assignDeep(o, validateOptions(t)));\n          if (!isEmptyObject(e)) {\n            assignDeep(a, e);\n            g({\n              ln: e\n            });\n          }\n        }\n        return assignDeep({}, a);\n      },\n      on: d,\n      off: (t, n) => {\n        t && n && v(t, n);\n      },\n      state() {\n        const {\n          un: t,\n          fn: n\n        } = b();\n        const {\n          rt: o\n        } = t;\n        const {\n          zt: s,\n          Ht: e,\n          Jt: c,\n          Kt: l,\n          Zt: i,\n          en: a\n        } = n;\n        return assignDeep({}, {\n          overflowEdge: s,\n          overflowAmount: e,\n          overflowStyle: c,\n          hasOverflow: l,\n          padding: i,\n          paddingAbsolute: a,\n          directionRTL: o,\n          destroyed: r\n        });\n      },\n      elements() {\n        const {\n          It: t,\n          lt: n,\n          Zt: o,\n          it: s,\n          ut: e,\n          Et: c,\n          Gt: r\n        } = w._n;\n        const {\n          Lt: l,\n          jt: i\n        } = w.dn;\n        const translateScrollbarStructure = t => {\n          const {\n            Ct: n,\n            Ot: o,\n            Dt: s\n          } = t;\n          return {\n            scrollbar: s,\n            track: o,\n            handle: n\n          };\n        };\n        const translateScrollbarsSetupElement = t => {\n          const {\n            Vt: n,\n            Ut: o\n          } = t;\n          const s = translateScrollbarStructure(n[0]);\n          return assignDeep({}, s, {\n            clone: () => {\n              const t = translateScrollbarStructure(o());\n              g({\n                an: true\n              });\n              return t;\n            }\n          });\n        };\n        return assignDeep({}, {\n          target: t,\n          host: n,\n          padding: o || s,\n          viewport: s,\n          content: e || s,\n          scrollOffsetElement: c,\n          scrollEventElement: r,\n          scrollbarHorizontal: translateScrollbarsSetupElement(l),\n          scrollbarVertical: translateScrollbarsSetupElement(i)\n        });\n      },\n      update: t => g({\n        xt: t,\n        $t: true\n      }),\n      destroy: bind(destroy, false),\n      plugin: t => i[keys(t)[0]]\n    };\n    push(l, [y]);\n    addInstance(c, m);\n    registerPluginModuleInstances(Rt, OverlayScrollbars, [m, u, i]);\n    if (cancelInitialization(w._n.Tt, !e && t.cancel)) {\n      destroy(true);\n      return m;\n    }\n    push(l, p());\n    triggerEvent(\"initialized\", [m]);\n    m.update(true);\n    return m;\n  }\n  return r;\n};\nOverlayScrollbars.plugin = t => {\n  const n = isArray(t);\n  const o = n ? t : [t];\n  const s = o.map(t => registerPluginModuleInstances(t, OverlayScrollbars)[0]);\n  addPlugins(o);\n  return n ? s : s[0];\n};\nOverlayScrollbars.valid = t => {\n  const n = t && t.elements;\n  const o = isFunction(n) && n();\n  return isPlainObject(o) && !!getInstance(o.target);\n};\nOverlayScrollbars.env = () => {\n  const {\n    P: t,\n    I: n,\n    H: o,\n    V: s,\n    U: e,\n    A: c,\n    L: r,\n    F: l,\n    W: i,\n    j: a,\n    N: u,\n    G: f,\n    q: _\n  } = getEnvironment();\n  return assignDeep({}, {\n    scrollbarsSize: t,\n    scrollbarsOverlaid: n,\n    scrollbarsHiding: o,\n    rtlScrollBehavior: s,\n    flexboxGlue: e,\n    cssCustomProperties: c,\n    scrollTimeline: r,\n    staticDefaultInitialization: l,\n    staticDefaultOptions: i,\n    getDefaultInitialization: a,\n    setDefaultInitialization: u,\n    getDefaultOptions: f,\n    setDefaultOptions: _\n  });\n};\nexport { qt as ClickScrollPlugin, OverlayScrollbars, Nt as ScrollbarsHidingPlugin, Ut as SizeObserverPlugin };","map":{"version":3,"names":["createCache","t","n","o","u","s","_","e","c","r","cacheUpdateContextual","l","i","cacheUpdateIsolated","getCurrentCache","window","Node","ELEMENT_NODE","toString","hasOwnProperty","Object","prototype","isUndefined","isNull","type","call","replace","toLowerCase","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","isPlainObject","isHTMLElement","HTMLElement","nodeType","isElement","Element","each","keys","inArray","indexOf","concat","push","apply","from","Set","forEach","isEmptyArray","deduplicateArray","runEachAndClear","runFn","assignDeep","slice","removeUndefinedProperties","isEmptyObject","attr","getAttribute","setAttribute","getValueSet","split","removeAttr","removeAttribute","attrClass","join","trim","hasAttrClass","has","find","document","querySelectorAll","findFirst","querySelector","is","matches","msMatchesSelector","contents","childNodes","parent","parentElement","closest","liesBetween","noop","removeElements","removeChild","before","createDocumentFragment","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","insertAfter","createDiv","createElement","createDOM","innerHTML","Math","max","min","a","round","abs","f","cancelAnimationFrame","requestAnimationFrame","d","setTimeout","v","clearTimeout","firstLetterToUpper","charAt","toUpperCase","getDummyStyle","style","h","p","g","b","cssProperty","jsAPI","w","y","m","S","bind","selfClearTimeout","debounce","invokeFunctionToDebounce","mergeParms","flush","debouncedFn","arguments","$","classListAction","classList","match","removeClass","remove","addClass","add","x","opacity","zIndex","parseToZeroOrNumber","parseFloat","parseInt","adaptCSSVal","getCSSVal","String","getPropertyValue","setCSSVal","setProperty","validFiniteNumber","isFinite","getComputedStyle","reduce","getDirectionIsRTL","topRightBottomLeft","getTrasformTranslateValue","ratioToCssPercent","toFixed","numberToCssPx","O","C","H","z","I","A","E","T","D","k","M","R","P","getElmWidthHeightProperty","windowSize","L","V","U","fractionalSize","getBoundingClientRect","domRectHasDimensions","domRectAppeared","animationCurrentTime","performance","now","animateNumber","frame","equal","equalWH","equalXY","equalTRBL","equalBCRWH","B","j","supportPassiveEvents","addEventListener","defineProperty","get","splitEventNames","removeEventListener","passive","capture","map","stopPropagation","preventDefault","N","absoluteCoordinates","left","pageYOffset","top","pageXOffset","getRTLCompatibleScrollPosition","getRTLCompatibleScrollBounds","scrollElementTo","scrollLeft","scrollTop","getElmentScroll","manageListener","createEventListenerHub","Map","removeEvent","clear","addEvent","set","triggerEvent","opsStringify","JSON","stringify","getPropByPath","G","paddingAbsolute","showNativeOverlaidScrollbars","update","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","createOptionCheck","q","F","W","X","Y","J","K","Z","Q","tt","nt","ot","st","et","ct","rt","lt","it","at","ut","ft","_t","dt","vt","ht","pt","gt","bt","wt","yt","mt","St","$t","xt","Ot","Ct","Ht","zt","It","At","Et","Tt","Dt","kt","Mt","Rt","Pt","addPlugins","registerPluginModuleInstances","static","instance","getStaticPluginModuleInstance","Lt","Vt","Ut","lastChild","reset","onResized","onScroll","Bt","jt","Nt","arrangeViewport","paddingTop","sheet","cssRules","insertRule","undoViewportArrange","assignProps","getWindowDPR","screen","deviceXDPI","logicalXDPI","devicePixelRatio","diffBiggerThanOne","Gt","qt","animateClickScroll","sign","Ft","getNativeScrollbarSize","getNativeScrollbarsHiding","getRtlScrollBehavior","direction","getFlexboxGlue","createEnvironment","body","elements","host","padding","viewport","ownerDocument","content","slot","cancel","nativeScrollbarsOverlaid","getEnvironment","resolveInitialization","staticInitializationElement","dynamicInitializationElement","cancelInitialization","Wt","WeakMap","addInstance","removeInstance","delete","getInstance","createEventContentChange","destroy","updateElements","contains","createDOMObserver","observerCallback","attributeName","target","oldValue","addedNodes","removedNodes","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","createSizeObserver","onSizeChangedCallbackProxy","ResizeObserverEntry","contentRect","pop","createTrinsicObserver","isHeightIntrinsic","isIntersecting","intersectionRatio","triggerOnTrinsicChangedCallback","intersectionObserverCallback","root","onSizeChanged","createObserversSetup","updateViewportAttrsFromHost","onTrinsicChanged","onContentMutation","onHostMutation","ignoreMutationFromOptions","capNumber","getScrollbarHandleOffsetPercent","getScrollbarHandleLengthRatio","getScrollbarHandleOffsetRatio","createScrollbarsSetupElements","initScrollTimeline","source","axis","doRefreshScrollbarOffset","cancelElementAnimations","scrollbarStructureAddRemoveClass","scrollbarStyle","animateElement","animate","timeline","composite","scrollbarStructureRefreshHandleLength","scrollbarStructureRefreshHandleOffset","transform","styleScrollbarPosition","animateScrollbarOffset","scrollbarsAddRemoveClass","refreshScrollbarsHandleLength","refreshScrollbarsHandleOffset","refreshScrollbarsScrollbarOffset","generateScrollbarDOM","appendElements","createScrollbarsSetupEvents","scrollBy","isAffectingTransition","propertyName","createInteractiveScrollEvents","createRelativeHandleMove","button","isPrimary","pointerType","includes","shiftKey","getHandleOffset","releasePointerCapture","pointerId","setPointerCapture","deltaX","deltaY","deltaMode","behavior","animateHandleOffset","createScrollbarsSetup","manageAutoHideSuspension","manageScrollbarsAutoHide","isHoverablePointerType","onHostMouseEnter","Xt","Yt","Jt","Kt","setScrollbarVisibility","createStructureSetupElements","documentElement","defaultView","activeElement","Zt","Qt","tn","nn","elementIsGenerated","unwrap","focus","revertViewportTabIndex","createTrinsicUpdateSegment","sn","createPaddingUpdateSegment","right","en","cn","createOverflowUpdateSegment","getOverflowAmount","overflowIsVisible","fixFlexboxGlue","rn","getViewportOverflowState","getStatePerAxis","setViewportOverflowState","setAxisOverflowStyle","hideNativeScrollbars","createStructureSetup","createSetups","updateHintsAreTruthy","some","ln","an","un","fn","_n","dn","OverlayScrollbars","validateOptions","updateHints","sizeChanged","directionChanged","heightIntrinsicChanged","overflowEdgeChanged","overflowAmountChanged","overflowStyleChanged","contentMutation","hostMutation","appear","changedOptions","force","options","on","off","state","overflowEdge","overflowAmount","overflowStyle","hasOverflow","directionRTL","destroyed","translateScrollbarStructure","scrollbar","track","handle","translateScrollbarsSetupElement","clone","scrollOffsetElement","scrollEventElement","scrollbarHorizontal","scrollbarVertical","plugin","valid","env","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","rtlScrollBehavior","flexboxGlue","cssCustomProperties","scrollTimeline","staticDefaultInitialization","staticDefaultOptions","getDefaultInitialization","setDefaultInitialization","getDefaultOptions","setDefaultOptions"],"sources":["../src/support/cache.ts","../src/support/compatibility/isBrowser.ts","../src/support/utils/types.ts","../src/support/utils/array.ts","../src/support/utils/object.ts","../src/support/dom/attribute.ts","../src/support/dom/traversal.ts","../src/support/utils/noop.ts","../src/support/dom/manipulation.ts","../src/support/dom/create.ts","../src/support/utils/alias.ts","../src/support/compatibility/vendors.ts","../src/support/compatibility/apis.ts","../src/support/utils/function.ts","../src/support/dom/class.ts","../src/support/dom/style.ts","../src/support/utils/strings.ts","../src/support/dom/dimensions.ts","../src/support/utils/animation.ts","../src/support/utils/equal.ts","../src/support/dom/events.ts","../src/support/dom/offset.ts","../src/support/dom/scroll.ts","../src/support/eventListeners.ts","../src/options.ts","../src/classnames.ts","../src/plugins/plugins.ts","../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../src/environment.ts","../src/initialization.ts","../src/instances.ts","../src/observers/domObserver.ts","../src/observers/sizeObserver.ts","../src/observers/trinsicObserver.ts","../src/setups/observersSetup/observersSetup.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.calculations.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../src/setups/structureSetup/structureSetup.elements.ts","../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../src/setups/structureSetup/structureSetup.ts","../src/setups/setups.ts","../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser = typeof window !== 'undefined';\r\n","import type { PlainObject } from '~/typings';\r\nimport { isBrowser } from '../compatibility/isBrowser';\r\n\r\nconst ElementNodeType = isBrowser && Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\nconst typeRgx = /^\\[object (.+)\\]$/;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString.call(obj).replace(typeRgx, '$1').toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\r\n\r\n/**\r\n * Iterates through a array or object\r\n * @param arrayLikeOrObject The array or object through which shall be iterated.\r\n * @param callback The function which is responsible for the iteration.\r\n * If the function returns true its treated like a \"continue\" statement.\r\n * If the function returns false its treated like a \"break\" statement.\r\n */\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T>,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T>;\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T> | false | null | undefined;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T>,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T>;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T> | false | null | undefined;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, indexOrKey: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T | false | null | undefined,\r\n  callback: (value: any, indexOrKey: string, source: T) => boolean | unknown\r\n): T | false | null | undefined;\r\nexport function each(\r\n  source: Array<any> | ArrayLike<any> | ReadonlyArray<any> | PlainObject | false | null | undefined,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<any> | ArrayLike<any> | ReadonlyArray<any> | PlainObject | false | null | undefined {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[], item: T): boolean => arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => {\r\n  const original = Array.from;\r\n  const result: T[] = [];\r\n\r\n  if (original && arr) {\r\n    return original(arr);\r\n  }\r\n\r\n  if (arr instanceof Set) {\r\n    arr.forEach((value) => {\r\n      push(result, value);\r\n    });\r\n  } else {\r\n    each(arr, (elm) => {\r\n      push(result, elm);\r\n    });\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n","import { from } from '../utils/array';\r\nimport { isUndefined } from '../utils/types';\r\n\r\ntype Attr = {\r\n  (elm: HTMLElement | false | null | undefined, attrName: string): string | null;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value: string): void;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value?: string):\r\n    | string\r\n    | null\r\n    | void;\r\n};\r\n\r\n/**\r\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\r\n * Returns null if the element has no attribute with the given name.\r\n * @param elm The element of which the attribute shall be get or set.\r\n * @param attrName The attribute name which shall be get or set.\r\n * @param value The value of the attribute which shall be set.\r\n */\r\nexport const attr = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value?: string\r\n): string | null | void => {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm.getAttribute(attrName) : null;\r\n  }\r\n  elm && elm.setAttribute(attrName, value);\r\n}) as Attr;\r\n\r\nconst getValueSet = (elm: HTMLElement | false | null | undefined, attrName: string) =>\r\n  new Set((attr(elm, attrName) || '').split(' '));\r\n\r\n/**\r\n * Removes the given attribute from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute name.\r\n */\r\nexport const removeAttr = (elm: Element | false | null | undefined, attrName: string): void => {\r\n  elm && elm.removeAttribute(attrName);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds or removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added or removed.\r\n * @param value The value which shall be added or removed.\r\n * @param add True if the value shall be added, false otherwise.\r\n */\r\nexport const attrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string,\r\n  add?: boolean\r\n) => {\r\n  if (value) {\r\n    const currValuesSet = getValueSet(elm, attrName);\r\n    currValuesSet[add ? 'add' : 'delete'](value);\r\n    const newTokens = from(currValuesSet).join(' ').trim();\r\n    attr(elm, attrName, newTokens);\r\n  }\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string\r\n) => getValueSet(elm, attrName).has(value);\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\nimport { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\ntype InputElementType = Node | Element | Node | false | null | undefined;\r\ntype OutputElementType = Node | Element | false | null | undefined;\r\n\r\nconst getElmPrototype = (isBrowser && Element.prototype) as Element; // only Element.prototype wont work on server\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    /* istanbul ignore next */\r\n    // eslint-disable-next-line\r\n    const fn: (...args: any) => boolean =\r\n      // @ts-ignore\r\n      getElmPrototype.matches || getElmPrototype.msMatchesSelector;\r\n    return fn.call(elm, selector);\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => elm && elm.parentElement;\r\n\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType => {\r\n  if (isElement(elm)) {\r\n    const closestFn = getElmPrototype.closest;\r\n    if (closestFn) {\r\n      return closestFn.call(elm, selector);\r\n    }\r\n\r\n    do {\r\n      if (is(elm, selector)) {\r\n        return elm as Element;\r\n      }\r\n      elm = parent(elm);\r\n    } while (elm);\r\n  }\r\n};\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n\r\nexport { find, findFirst, is, children, contents, parent, liesBetween, closest };\r\n","export const noop = () => {}; // eslint-disable-line\r\n","import { isArrayLike } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { noop } from '../utils/noop';\r\nimport { parent } from './traversal';\r\n\r\ntype NodeCollection = ArrayLike<Node> | Node | false | null | undefined;\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    // element.remove() not supported in IE11\r\n    const parentElm = parent(nodes);\r\n    parentElm && parentElm.removeChild(nodes);\r\n  }\r\n};\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nconst before = (\r\n  parentElm: Node | false | null | undefined,\r\n  preferredAnchor: Node | false | null | undefined,\r\n  insertedElms: NodeCollection\r\n): (() => void) => {\r\n  if (insertedElms && parentElm) {\r\n    let anchor: Node | false | null | undefined = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    if (isArrayLike(insertedElms)) {\r\n      fragment = document.createDocumentFragment();\r\n\r\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n      each(insertedElms, (insertedElm) => {\r\n        if (insertedElm === anchor) {\r\n          anchor = insertedElm.previousSibling;\r\n        }\r\n        fragment!.appendChild(insertedElm);\r\n      });\r\n    } else {\r\n      fragment = insertedElms;\r\n    }\r\n\r\n    // if the preferred anchor isn't null set it to a valid anchor\r\n    if (preferredAnchor) {\r\n      if (!anchor) {\r\n        anchor = parentElm.firstChild;\r\n      } else if (anchor !== preferredAnchor) {\r\n        anchor = anchor.nextSibling;\r\n      }\r\n    }\r\n\r\n    parentElm.insertBefore(fragment, anchor || null);\r\n    return () => removeElements(insertedElms);\r\n  }\r\n  return noop;\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: Node | false | null | undefined, children: NodeCollection) =>\r\n  before(node, null, children);\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const prependChildren = (node: Node | false | null | undefined, children: NodeCollection) =>\r\n  before(node, node && node.firstChild, children);\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertBefore = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n) => before(parent(node), node, insertedNodes);\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertAfter = (node: Node | false | null | undefined, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n","import { each } from '../utils/array';\r\nimport { attr } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  attr(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n","import { concat, each } from '../utils/array';\r\nimport { hasOwnProperty } from '../utils/object';\r\nimport { createDiv } from '../dom/create';\r\nimport { wnd } from '../utils/alias';\r\n\r\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\r\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\r\n\r\nexport type JsApiName = Extract<keyof typeof window, string>;\r\n\r\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n\r\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\nexport const jsPrefixes: ReadonlyArray<string> = [\r\n  'WebKit',\r\n  'Moz',\r\n  'O',\r\n  'MS',\r\n  'webkit',\r\n  'moz',\r\n  'o',\r\n  'ms',\r\n];\r\n\r\nexport const jsCache: { [key: string]: any } = {};\r\nexport const cssCache: { [key: string]: any } = {};\r\n\r\n/**\r\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without it, or and empty string if unsupported.\r\n * @param name The name of the CSS property which shall be get.\r\n */\r\nexport const cssProperty = (name: string): string | undefined => {\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const uppercasedName: string = firstLetterToUpper(name);\r\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\r\n\r\n  each(cssPrefixes, (prefix: string) => {\r\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\r\n    const resultPossibilities: Array<string> = [\r\n      name, // transition\r\n      prefix + name, // -webkit-transition\r\n      prefixWithoutDashes + uppercasedName, // webkitTransition\r\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\r\n    ];\r\n\r\n    // eslint-disable-next-line no-return-assign\r\n    return !(result = resultPossibilities.find(\r\n      (resultPossibility: string) =>\r\n        elmStyle[resultPossibility as keyof CSSStyleDeclaration] !== undefined\r\n    ));\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported without it, or an empty string if no value is supported.\r\n * @param property The CSS property to which the CSS property value(s) belong.\r\n * @param values The value(s) separated by spaces which shall be get.\r\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\r\n */\r\nexport const cssPropertyValue = (\r\n  property: string,\r\n  values: string,\r\n  suffix?: string\r\n): string | undefined => {\r\n  const name = `${property} ${values}`;\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\r\n  const possbleValues: Array<string> = values.split(' ');\r\n  const preparedSuffix: string = suffix || '';\r\n  const cssPrefixesWithFirstEmpty = concat([''], cssPrefixes);\r\n\r\n  each(possbleValues, (possibleValue: string) => {\r\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\r\n      const prop = prefix + possibleValue;\r\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\r\n      if (dummyStyle.length) {\r\n        result = prop;\r\n        return false;\r\n      }\r\n    });\r\n    return !result;\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\r\n * @param name The name of the JS function, object or constructor.\r\n */\r\nexport const jsAPI = <T = any>(name: JsApiName): T | undefined => {\r\n  let result: any = jsCache[name] || wnd[name];\r\n\r\n  if (hasOwnProperty(jsCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  each(jsPrefixes, (prefix: string) => {\r\n    result = result || wnd[(prefix + firstLetterToUpper(name)) as JsApiName];\r\n    return !result;\r\n  });\r\n\r\n  jsCache[name] = result;\r\n  return result;\r\n};\r\n","import { jsAPI } from './vendors';\r\n\r\nexport const MutationObserverConstructor = jsAPI<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  jsAPI<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = jsAPI<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = jsAPI<new (constructor: unknown) => AnimationTimeline>(\r\n  // @ts-ignore\r\n  'ScrollTimeline'\r\n);\r\n","import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let clear = noop;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      // @ts-ignore\r\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n      clear = () => clearTimeoutFn(timeoutId);\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import { isString } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\n\r\ntype ClassContainingElement = Node | Element | false | null | undefined;\r\ntype ClassName = string | false | null | undefined;\r\n\r\nconst rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\r\nconst classListAction = (\r\n  elm: ClassContainingElement,\r\n  className: ClassName,\r\n  action: (elmClassList: DOMTokenList, clazz: string) => boolean | void\r\n): boolean => {\r\n  const classList = elm && (elm as Element).classList;\r\n  let clazz: string;\r\n  let i = 0;\r\n  let result = false;\r\n\r\n  if (classList && className && isString(className)) {\r\n    const classes: Array<string> = className.match(rnothtmlwhite) || [];\r\n    result = classes.length > 0;\r\n    while ((clazz = classes[i++])) {\r\n      result = !!action(classList, clazz) && result;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: ClassContainingElement, className: ClassName): boolean =>\r\n  classListAction(elm, className, (classList, clazz) => classList.contains(clazz));\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: ClassContainingElement, className: ClassName): void => {\r\n  classListAction(elm, className, (classList, clazz) => classList.remove(clazz));\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: ClassContainingElement, className: ClassName): (() => void) => {\r\n  classListAction(elm, className, (classList, clazz) => classList.add(clazz));\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (classNameA: ClassName, classNameB: ClassName) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n","import type { PlainObject, StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport { wnd } from '../utils/alias';\r\nimport { each } from '../utils/array';\r\nimport { isString, isNumber, isArray, isUndefined, isObject } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nexport type CSSStyleProperty = Extract<keyof CSSStyleDeclaration, string>;\r\n\r\nconst cssNumber: Partial<Record<CSSStyleProperty, number>> = {\r\n  // animationiterationcount: 1,\r\n  // columncount: 1,\r\n  // fillopacity: 1,\r\n  // flexgrow: 1,\r\n  // flexshrink: 1,\r\n  // fontweight: 1,\r\n  // lineheight: 1,\r\n  // order: 1,\r\n  // orphans: 1,\r\n  // widows: 1,\r\n  // zoom: 1,\r\n  opacity: 1,\r\n  zIndex: 1,\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string, toFloat?: boolean): number => {\r\n  const finalValue = value || '';\r\n  /* istanbul ignore next */\r\n  const num = toFloat ? parseFloat(finalValue) : parseInt(finalValue, 10);\r\n  // num === num means num is not NaN\r\n  /* istanbul ignore next */\r\n  return num === num ? num : 0; // eslint-disable-line no-self-compare\r\n};\r\n\r\nconst adaptCSSVal = (prop: CSSStyleProperty, val: string | number): string | number =>\r\n  !cssNumber[prop] && isNumber(val) ? `${val}px` : val;\r\n\r\nconst getCSSVal = (\r\n  elm: HTMLElement,\r\n  computedStyle: CSSStyleDeclaration,\r\n  prop: CSSStyleProperty\r\n): string =>\r\n  String(\r\n    /* istanbul ignore next */\r\n    (computedStyle != null\r\n      ? computedStyle[prop] || computedStyle.getPropertyValue(prop)\r\n      : elm.style[prop]) || ''\r\n  );\r\n\r\nconst setCSSVal = (elm: HTMLElement, prop: StyleObjectKey, val: string | number): void => {\r\n  try {\r\n    const { style: elmStyle } = elm;\r\n\r\n    if (!isUndefined(elmStyle[prop])) {\r\n      elmStyle[prop as any] = adaptCSSVal(prop, val) as string;\r\n    } else {\r\n      elmStyle.setProperty(prop, val as string);\r\n    }\r\n  } catch (e) {}\r\n};\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\n/**\r\n * Gets or sets the passed styles to the passed element.\r\n * @param elm The element to which the styles shall be applied to / be read from.\r\n * @param styles The styles which shall be set or read.\r\n */\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps>\r\n): void;\r\nexport function style(elm: HTMLElement | false | null | undefined, styles: StyleObjectKey): string;\r\nexport function style(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: Array<StyleObjectKey> | StyleObjectKey\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps> | Array<StyleObjectKey> | StyleObjectKey\r\n): Partial<Record<StyleObjectKey, string>> | string | void {\r\n  const getSingleStyle = isString(styles);\r\n  const getStyles = isArray(styles) || getSingleStyle;\r\n\r\n  if (getStyles) {\r\n    let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n    if (elm) {\r\n      const computedStyle: CSSStyleDeclaration = wnd.getComputedStyle(elm, null);\r\n      getStylesResult = getSingleStyle\r\n        ? getCSSVal(elm, computedStyle, styles)\r\n        : styles.reduce((result, key) => {\r\n            result[key] = getCSSVal(elm, computedStyle, key);\r\n            return result;\r\n          }, getStylesResult as PlainObject);\r\n    }\r\n    return getStylesResult;\r\n  }\r\n  elm &&\r\n    each(styles, (_, key) =>\r\n      setCSSVal(elm, key as StyleObjectKey, styles[key as keyof typeof styles]!)\r\n    );\r\n}\r\n\r\nexport const getDirectionIsRTL = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  style(elm, 'direction') === 'rtl';\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElement | false | null | undefined,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = style(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top], true),\r\n    r: parseToZeroOrNumber(result[right], true),\r\n    b: parseToZeroOrNumber(result[bottom], true),\r\n    l: parseToZeroOrNumber(result[left], true),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${(validFiniteNumber(ratio) * 100).toFixed(3)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${validFiniteNumber(number)}px`;\r\n","export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strHidden = 'hidden';\r\n","import { style } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const offsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const scrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const fractionalSize = (elm: HTMLElement | false | null | undefined): Readonly<WH> => {\r\n  const cssWidth = parseFloat(style(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(style(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n","import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    onFrame && onFrame(progress, percent, animationCompleted);\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    complete && frame(complete);\r\n  };\r\n};\r\n","import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n","import { isUndefined } from '../utils/types';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { wnd } from '../utils/alias';\r\nimport { noop } from '../utils/noop';\r\nimport { keys } from '../utils';\r\n\r\nlet passiveEventsSupport: boolean | undefined;\r\nconst passiveStr = 'passive';\r\nconst supportPassiveEvents = (): boolean => {\r\n  if (isUndefined(passiveEventsSupport)) {\r\n    passiveEventsSupport = false;\r\n    try {\r\n      /* eslint-disable */\r\n      // @ts-ignore\r\n      wnd.addEventListener(\r\n        passiveStr,\r\n        noop,\r\n        Object.defineProperty({}, passiveStr, {\r\n          get() {\r\n            passiveEventsSupport = true;\r\n          },\r\n        })\r\n      );\r\n      /* eslint-enable */\r\n    } catch {}\r\n  }\r\n  return passiveEventsSupport;\r\n};\r\nconst splitEventNames = (eventNames: string) => eventNames.split(' ');\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: (event: Event) => any;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const doSupportPassiveEvents = supportPassiveEvents();\r\n  const passive = (doSupportPassiveEvents && options && options._passive) ?? doSupportPassiveEvents;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions | boolean = doSupportPassiveEvents\r\n    ? {\r\n        passive,\r\n        capture,\r\n      }\r\n    : capture;\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    splitEventNames(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import { getBoundingClientRect } from './dimensions';\r\nimport { wnd } from '../utils/alias';\r\n\r\nexport interface XY<T = number> {\r\n  x: T;\r\n  y: T;\r\n}\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: HTMLElement | null | undefined): Readonly<XY> => {\r\n  const rect = elm && getBoundingClientRect(elm);\r\n  return rect\r\n    ? {\r\n        x: rect.left + wnd.pageYOffset, //IE11 compat\r\n        y: rect.top + wnd.pageXOffset, //IE11 compat\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: HTMLElement | null | undefined): Readonly<XY> =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n","import type { Environment } from '~/environment';\r\nimport type { XY } from './offset';\r\nimport { isNumber } from '../utils';\r\n\r\n/**\r\n * Transforms a normalized (>= 0) scroll position to a RTL compatilbe scroll position value.\r\n * @param normalizedScrollPosition The normalized scroll position value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `false` / `undefined` if the rtl scroll behavior doesn't apply.\r\n * @returns The input scroll position but transformed to a RTL compatible format.\r\n */\r\nexport const getRTLCompatibleScrollPosition = (\r\n  normalizedScrollPosition: number,\r\n  normalizedScrollPositionMax: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n) =>\r\n  rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? -normalizedScrollPosition\r\n      : rtlScrollBehavior.i\r\n      ? normalizedScrollPositionMax - normalizedScrollPosition\r\n      : normalizedScrollPosition\r\n    : normalizedScrollPosition;\r\n\r\n/**\r\n * Gets the RTL compatilbe scroll boundaries from the normalized (>= 0) max scroll position.\r\n * @param normalizedScrollPositionMax The normalzed max scroll position value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `false` / `undefined` if the rtl scroll behavior doesn't apply.\r\n * @returns RTL compatible scroll boundaries. (min will scroll to start and max will scroll to end)\r\n */\r\nexport const getRTLCompatibleScrollBounds = (\r\n  normalizedScrollPositionMax: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n): [min: number, max: number] => [\r\n  rtlScrollBehavior ? (rtlScrollBehavior.i ? normalizedScrollPositionMax : 0) : 0,\r\n  getRTLCompatibleScrollPosition(\r\n    normalizedScrollPositionMax,\r\n    normalizedScrollPositionMax,\r\n    rtlScrollBehavior\r\n  ),\r\n];\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElmentScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n","import { isArray, isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(isArray(listener) ? listener : [listener], callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: boolean;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n","const dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\r\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\r\n\r\n// misc\r\nexport const classNameScrollbarHidden = `os-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\r\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\r\nexport const dataValueHostOverflowVisible = 'overflowVisible';\r\nexport const dataValueHostScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueHostScrollbarPressed = 'scrollbarPressed';\r\nexport const dataValueHostUpdating = 'updating';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportOverflowVisible = dataValueHostOverflowVisible;\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\nexport const dataValuePaddingOverflowVisible = dataValueViewportOverflowVisible;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarNoCssCustomProps = 'os-no-css-vars';\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n","import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: booleanAllowedValues, // true || false\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  style,\r\n  appendChildren,\r\n  offsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = offsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = offsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        style(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n","import {\r\n  keys,\r\n  attr,\r\n  style,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  windowSize,\r\n  attrClass,\r\n  wnd,\r\n  mathAbs,\r\n  mathRound,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  strHeight,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport type { WH, UpdateCache, XY } from '~/support';\r\nimport type { StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type {\r\n  ViewportOverflowState,\r\n  GetViewportOverflowState,\r\n  HideNativeScrollbars,\r\n} from '~/setups/structureSetup/updateSegments/overflowUpdateSegment';\r\nimport type { InternalEnvironment } from '~/environment';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport type ArrangeViewport = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  viewportScrollSize: WH<number>,\r\n  sizeFraction: WH<number>,\r\n  directionIsRTL: boolean\r\n) => boolean;\r\n\r\nexport type UndoViewportArrangeResult = [\r\n  redoViewportArrange: () => void,\r\n  overflowState?: ViewportOverflowState\r\n];\r\n\r\nexport type UndoArrangeViewport = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  directionIsRTL: boolean,\r\n  viewportOverflowState?: ViewportOverflowState\r\n) => UndoViewportArrangeResult;\r\n\r\nlet contentArrangeCounter = 0;\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _createUniqueViewportArrangeElement: (env: InternalEnvironment): false | HTMLStyleElement => {\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _cssCustomProperties } = env;\r\n        const create =\r\n          !_cssCustomProperties &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const result = create ? document.createElement('style') : false;\r\n\r\n        if (result) {\r\n          attr(\r\n            result,\r\n            'id',\r\n            `${dataAttributeViewport}-${dataValueViewportArrange}-${contentArrangeCounter}`\r\n          );\r\n          contentArrangeCounter++;\r\n        }\r\n\r\n        return result;\r\n      },\r\n      _overflowUpdateSegment: (\r\n        doViewportArrange: boolean,\r\n        flexboxGlue: boolean,\r\n        viewport: HTMLElement,\r\n        viewportArrange: HTMLStyleElement | false | null | undefined,\r\n        state: StructureSetupState,\r\n        getViewportOverflowState: GetViewportOverflowState,\r\n        hideNativeScrollbars: HideNativeScrollbars\r\n      ): [ArrangeViewport, UndoArrangeViewport] => {\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const arrangeViewport: ArrangeViewport = (\r\n          viewportOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          directionIsRTL\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = state;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            // adjust content arrange / before element\r\n            if (viewportArrange) {\r\n              const { sheet } = viewportArrange;\r\n              if (sheet) {\r\n                const { cssRules } = sheet;\r\n                if (cssRules) {\r\n                  if (!cssRules.length) {\r\n                    sheet.insertRule(\r\n                      `#${attr(\r\n                        viewportArrange,\r\n                        'id'\r\n                      )} + [${dataAttributeViewport}~='${dataValueViewportArrange}']::before {}`,\r\n                      0\r\n                    );\r\n                  }\r\n\r\n                  // @ts-ignore\r\n                  const ruleStyle = cssRules[0].style;\r\n\r\n                  ruleStyle[strWidth] = arrangeSize.w;\r\n                  ruleStyle[strHeight] = arrangeSize.h;\r\n                }\r\n              }\r\n            } else {\r\n              style<'--os-vaw' | '--os-vah'>(viewport, {\r\n                '--os-vaw': arrangeSize.w,\r\n                '--os-vah': arrangeSize.h,\r\n              });\r\n            }\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const undoViewportArrange: UndoArrangeViewport = (\r\n          showNativeOverlaidScrollbars,\r\n          directionIsRTL,\r\n          viewportOverflowState?\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState =\r\n              viewportOverflowState || getViewportOverflowState(showNativeOverlaidScrollbars);\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = state;\r\n            const { _scrollbarsHideOffsetArrange } = finalViewportOverflowState;\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = style(viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n\r\n            // add class\r\n            attrClass(viewport, dataAttributeViewport, dataValueViewportArrange);\r\n\r\n            if (!flexboxGlue) {\r\n              finalPaddingStyle[strHeight] = '';\r\n            }\r\n\r\n            style(viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                hideNativeScrollbars(\r\n                  finalViewportOverflowState,\r\n                  directionIsRTL,\r\n                  doViewportArrange,\r\n                  prevStyle\r\n                );\r\n                style(viewport, prevStyle);\r\n                // remove class\r\n                attrClass(viewport, dataAttributeViewport, dataValueViewportArrange, true);\r\n              },\r\n              finalViewportOverflowState,\r\n            ];\r\n          }\r\n          return [noop];\r\n        };\r\n\r\n        return [arrangeViewport, undoViewportArrange];\r\n      },\r\n      _envWindowZoom: () => {\r\n        let size = { w: 0, h: 0 };\r\n        let dpr = 0;\r\n        const getWindowDPR = (): number => {\r\n          const screen = wnd.screen;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const dDPI = screen.deviceXDPI || 0;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const sDPI = screen.logicalXDPI || 1;\r\n          return wnd.devicePixelRatio || dDPI / sDPI;\r\n        };\r\n        const diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n          const absValOne = mathAbs(valOne);\r\n          const absValTwo = mathAbs(valTwo);\r\n          return !(\r\n            absValOne === absValTwo ||\r\n            absValOne + 1 === absValTwo ||\r\n            absValOne - 1 === absValTwo\r\n          );\r\n        };\r\n\r\n        return (\r\n          envInstance: InternalEnvironment,\r\n          updateNativeScrollbarSizeCache: UpdateCache<XY<number>>\r\n        ): boolean | undefined => {\r\n          const sizeNew = windowSize();\r\n          const deltaSize = {\r\n            w: sizeNew.w - size.w,\r\n            h: sizeNew.h - size.h,\r\n          };\r\n\r\n          if (deltaSize.w === 0 && deltaSize.h === 0) {\r\n            return;\r\n          }\r\n\r\n          const deltaAbsSize = {\r\n            w: mathAbs(deltaSize.w),\r\n            h: mathAbs(deltaSize.h),\r\n          };\r\n          const deltaAbsRatio = {\r\n            w: mathAbs(mathRound(sizeNew.w / (size.w / 100.0))),\r\n            h: mathAbs(mathRound(sizeNew.h / (size.h / 100.0))),\r\n          };\r\n          const dprNew = getWindowDPR();\r\n          const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n          const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n          const dprChanged = dprNew !== dpr && dprNew > 0;\r\n          const isZoom = deltaIsBigger && difference && dprChanged;\r\n          let scrollbarSizeChanged;\r\n          let scrollbarSize;\r\n\r\n          if (isZoom) {\r\n            [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache();\r\n\r\n            assignDeep(envInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\r\n          }\r\n\r\n          size = sizeNew;\r\n          dpr = dprNew;\r\n\r\n          return scrollbarSizeChanged;\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n","import { animateNumber, noop, setT } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\r\n        startOffset: number,\r\n        handleLength: number,\r\n        relativeTrackPointerOffset: number\r\n      ): (() => void) => {\r\n        // click scroll animation\r\n        let iteration = 0;\r\n        let clear = noop;\r\n        const animateClickScroll = (clickScrollProgress: number) => {\r\n          clear = animateNumber(\r\n            clickScrollProgress,\r\n            clickScrollProgress + handleLength * Math.sign(startOffset),\r\n            133,\r\n            (animationProgress, _, animationCompleted) => {\r\n              moveHandleRelative(animationProgress);\r\n              const handleStartBound = getHandleOffset();\r\n              const handleEndBound = handleStartBound + handleLength;\r\n              const mouseBetweenHandleBounds =\r\n                relativeTrackPointerOffset >= handleStartBound &&\r\n                relativeTrackPointerOffset <= handleEndBound;\r\n\r\n              if (animationCompleted && !mouseBetweenHandleBounds) {\r\n                if (iteration) {\r\n                  animateClickScroll(animationProgress);\r\n                } else {\r\n                  const firstIterationPauseTimeout = setT(() => {\r\n                    animateClickScroll(animationProgress);\r\n                  }, 222);\r\n                  clear = () => {\r\n                    clearTimeout(firstIterationPauseTimeout);\r\n                  };\r\n                }\r\n                iteration++;\r\n              }\r\n            }\r\n          );\r\n        };\r\n\r\n        animateClickScroll(0);\r\n\r\n        return () => clear();\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  style,\r\n  appendChildren,\r\n  fractionalSize,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  removeAttr,\r\n  removeElements,\r\n  equalBCRWH,\r\n  getBoundingClientRect,\r\n  assignDeep,\r\n  cssProperty,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  noop,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n} from '~/support';\r\nimport {\r\n  classNameEnvironment,\r\n  classNameEnvironmentFlexboxGlue,\r\n  classNameEnvironmentFlexboxGlueMax,\r\n  classNameScrollbarHidden,\r\n} from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** The rtl scroll behavior of the browser. */\r\n  rtlScrollBehavior: { n: boolean; i: boolean };\r\n  /** Whether the browser supports all needed Flexbox features for OverlayScrollbars to work in a more performant way. */\r\n  flexboxGlue: boolean;\r\n  /** Whether the browser supports custom css properties. (also known as css variables) */\r\n  cssCustomProperties: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nexport interface InternalEnvironment {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\r\n  readonly _flexboxGlue: boolean;\r\n  readonly _cssCustomProperties: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: InternalEnvironment;\r\n\r\nconst getNativeScrollbarSize = (\r\n  body: HTMLElement,\r\n  measureElm: HTMLElement,\r\n  measureElmChild: HTMLElement,\r\n  clear?: boolean\r\n): XY => {\r\n  appendChildren(body, measureElm);\r\n\r\n  const cSize = clientSize(measureElm);\r\n  const oSize = offsetSize(measureElm);\r\n  const fSize = fractionalSize(measureElmChild);\r\n\r\n  clear && removeElements(measureElm);\r\n\r\n  return {\r\n    x: oSize.h - cSize.h + fSize.h,\r\n    y: oSize.w - cSize.w + fSize.w,\r\n  };\r\n};\r\n\r\nconst getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n  let result = false;\r\n  const revertClass = addClass(testElm, classNameScrollbarHidden);\r\n  try {\r\n    result =\r\n      style(testElm, cssProperty('scrollbar-width') as StyleObjectKey) === 'none' ||\r\n      wnd.getComputedStyle(testElm, '::-webkit-scrollbar').getPropertyValue('display') === 'none';\r\n  } catch (ex) {}\r\n  revertClass();\r\n  return result;\r\n};\r\n\r\nconst getRtlScrollBehavior = (\r\n  parentElm: HTMLElement,\r\n  childElm: HTMLElement\r\n): { i: boolean; n: boolean } => {\r\n  style(parentElm, { [strOverflowX]: strHidden, [strOverflowY]: strHidden, direction: 'rtl' });\r\n  scrollElementTo(parentElm, { x: 0 });\r\n\r\n  const parentOffset = absoluteCoordinates(parentElm);\r\n  const childOffset = absoluteCoordinates(childElm);\r\n  scrollElementTo(parentElm, { x: -999 }); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n  return {\r\n    /**\r\n     * origin direction = determines if the zero scroll position is on the left or right side\r\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n     * true = on the left side\r\n     * false = on the right side\r\n     */\r\n    i: parentOffset.x === childOffset.x,\r\n    /**\r\n     * negative = determines if the maximum scroll is positive or negative\r\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n     * true = negative\r\n     * false = positive\r\n     */\r\n    n: childOffset.x !== childOffsetAfterScroll.x,\r\n  };\r\n};\r\n\r\nconst getFlexboxGlue = (parentElm: HTMLElement, childElm: HTMLElement): boolean => {\r\n  const revertFbxGlue = addClass(parentElm, classNameEnvironmentFlexboxGlue);\r\n  const minOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const minOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMin = equalBCRWH(minOffsetsize, minOffsetsizeParent, true);\r\n\r\n  const revertFbxGlueMax = addClass(parentElm, classNameEnvironmentFlexboxGlueMax);\r\n  const maxOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const maxOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMax = equalBCRWH(maxOffsetsize, maxOffsetsizeParent, true);\r\n\r\n  revertFbxGlue();\r\n  revertFbxGlueMax();\r\n\r\n  return supportsMin && supportsMax;\r\n};\r\n\r\nconst createEnvironment = (): InternalEnvironment => {\r\n  const { body } = document;\r\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, body, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) =>\r\n        nativeScrollbarsHiding && target === target.ownerDocument.body && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: InternalEnvironment = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _cssCustomProperties: style(envElm, 'zIndex') === '-1',\r\n    _scrollTimeline: !!scrollT,\r\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\r\n    _flexboxGlue: getFlexboxGlue(envElm, envChildElm),\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttr(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  wnd.addEventListener('resize', () => {\r\n    let scrollbarSizeChanged;\r\n    if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\r\n      const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n        scrollbarsHidingPluginName\r\n      );\r\n      const zoomFn = scrollbarsHidingPlugin ? scrollbarsHidingPlugin._envWindowZoom() : noop;\r\n      scrollbarSizeChanged = !!zoomFn(env, updateNativeScrollbarSizeCache);\r\n    }\r\n\r\n    triggerEvent('r', [scrollbarSizeChanged]);\r\n  });\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): InternalEnvironment => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype StaticInitialization = HTMLElement | false | null;\r\ntype DynamicInitialization = HTMLElement | boolean | null;\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  attr,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames.trim(), (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        // isAttrChange check needed, otherwise mutationTarget might not be a valid HTMLElement\r\n        const attributeValue = isAttrChange\r\n          ? attr(mutationTarget as HTMLElement, attributeName || '')\r\n          : null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  removeClass,\r\n  stopPropagation,\r\n  appendChildren,\r\n  getDirectionIsRTL,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  isArray,\r\n  getRTLCompatibleScrollPosition,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { CacheValues } from '~/support';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether direction changes should be observed. */\r\n  _direction?: boolean;\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const scrollAmount = 3333333;\r\n  const { _direction: observeDirectionChange, _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const getIsDirectionRTL = bind(getDirectionIsRTL, target);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (\r\n      sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry | boolean\r\n    ) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n      const hasDirectionCache = !isResizeObserverCall && isArray(sizeChangedContext);\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n      let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        const appeared = domRectAppeared(currRContentRect, prevContentRect);\r\n        const firstCall = !prevContentRect;\r\n        appear = firstCall || appeared;\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n\r\n        doDirectionScroll = !skip; // direction scroll when not skipping\r\n      }\r\n      // else if its triggered with DirectionCache\r\n      else if (hasDirectionCache) {\r\n        [, doDirectionScroll] = sizeChangedContext; // direction scroll when DirectionCache changed, false otherwise\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (observeDirectionChange && doDirectionScroll) {\r\n        const rtl = hasDirectionCache ? sizeChangedContext[0] : getDirectionIsRTL(sizeObserver);\r\n        scrollElementTo(sizeObserver, {\r\n          x: getRTLCompatibleScrollPosition(scrollAmount, scrollAmount, rtl && rtlScrollBehavior),\r\n          y: scrollAmount,\r\n        });\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _directionIsRTLCache: hasDirectionCache ? sizeChangedContext : undefined,\r\n          _sizeChanged: !hasDirectionCache,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    if (observeDirectionChange) {\r\n      const [updateDirectionIsRTLCache] = createCache(\r\n        {\r\n          _initialValue: undefined,\r\n        },\r\n        getIsDirectionRTL\r\n      );\r\n\r\n      push(\r\n        destroyFns,\r\n        addEventListener(sizeObserver, 'scroll', (event) => {\r\n          const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n          const [directionIsRTLCache, directionIsRTLCacheChanged, directionIsRTLCachePrevious] =\r\n            directionIsRTLCacheValues;\r\n          if (directionIsRTLCacheChanged) {\r\n            removeClass(listenerElement, 'ltr rtl');\r\n            addClass(listenerElement, directionIsRTLCache ? 'rtl' : 'ltr');\r\n\r\n            onSizeChangedCallbackProxy([\r\n              !!directionIsRTLCache,\r\n              directionIsRTLCacheChanged,\r\n              directionIsRTLCachePrevious,\r\n            ]);\r\n          }\r\n\r\n          stopPropagation(event);\r\n        })\r\n      );\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n","import {\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = offsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n","import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  attr,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  getDirectionIsRTL,\r\n  each,\r\n  equalWH,\r\n  fractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  isString,\r\n  keys,\r\n  liesBetween,\r\n  removeAttr,\r\n  scrollSize,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  inArray,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueHostOverflowVisible,\r\n  dataValueHostUpdating,\r\n  dataValueViewportArrange,\r\n  dataValueViewportOverflowVisible,\r\n} from '~/classnames';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n\r\n  const { _nativeScrollbarsHiding } = getEnvironment();\r\n\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const viewportAttrsFromTarget = ['tabindex'];\r\n  const baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(structureSetupElements._host),\r\n  };\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const { _flexboxGlue, _addResizeListener } = getEnvironment();\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const hasOver = _viewportHasClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible\r\n      );\r\n      const hasVpStyle = _viewportHasClass(dataValueViewportArrange, '');\r\n      const scrollOffset = hasVpStyle && getElmentScroll(_viewport);\r\n      _viewportAddRemoveClass(dataValueViewportOverflowVisible, dataValueHostOverflowVisible);\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '');\r\n      _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      _viewportAddRemoveClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible,\r\n        hasOver\r\n      );\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '', hasVpStyle);\r\n      _viewportAddRemoveClass('', dataValueHostUpdating);\r\n      scrollElementTo(_viewport, scrollOffset);\r\n\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : concat(baseStyleChangingAttrs, baseStyleChangingAttrsTextarea);\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (inArray(viewportAttrsFromTarget, attribute)) {\r\n        const hostAttr = attr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          attr(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttr(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear && !_directionIsRTLCache;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && _nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache || [];\r\n\r\n    _directionIsRTLCache && assignDeep(state, { _directionIsRTL: directionIsRTL });\r\n\r\n    updateFn({\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n      _directionChanged: directionIsRTLChanged,\r\n    });\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints = { _hostMutation: targetStyleChanged };\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const [constructTrinsicObserver, updateTrinsicObserver] =\r\n    _content || !_flexboxGlue ? createTrinsicObserver(_host, onTrinsicChanged) : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n      _direction: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: concat(baseStyleChangingAttrs, viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = _addResizeListener((_scrollbarSizeChanged) => {\r\n        const [, _contentMutation] = updateContentSizeCache();\r\n        onObserversUpdatedDebounced({ _scrollbarSizeChanged, _contentMutation });\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(contentMutationObserverAttr, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  getRTLCompatibleScrollBounds,\r\n  mathMax,\r\n  mathMin,\r\n  mathRound,\r\n  strHeight,\r\n  strWidth,\r\n} from '~/support';\r\nimport type { Environment } from '~/environment';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarStructure } from './scrollbarsSetup.elements';\r\n\r\nconst capNumber = (min: number, max: number, number: number) => mathMax(min, mathMin(max, number));\r\n\r\nexport const getScrollbarHandleOffsetPercent = (\r\n  scrollPos: number,\r\n  overflowAmount: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n) => {\r\n  const rawScrollPosMax = mathRound(overflowAmount);\r\n  const [scrollPositionMin, scrollPositionMax] = getRTLCompatibleScrollBounds(\r\n    rawScrollPosMax,\r\n    rtlScrollBehavior\r\n  );\r\n\r\n  const scrollPercentNegate = (scrollPositionMax - scrollPos) / scrollPositionMax;\r\n  const scrollPercentInvert = scrollPos / scrollPositionMin;\r\n  const scrollPercentNone = scrollPos / scrollPositionMax;\r\n  const rawScrollPercent = rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? scrollPercentNegate\r\n      : rtlScrollBehavior.i\r\n      ? scrollPercentInvert\r\n      : scrollPercentNone\r\n    : scrollPercentNone;\r\n\r\n  return capNumber(0, 1, rawScrollPercent);\r\n};\r\n\r\n/**\r\n * Gets the scrollbar handle length ratio\r\n * @param structureSetupState The structure setup state.\r\n * @param isHorizontal Whether the axis is horizontal\r\n * @param scrollbarStructure The scrollbar structure. Only passed when the length ratio is calculated for the offset ratio (respects handle min. & max. size via. css)\r\n * @returns The scrollbar handle length ratio.\r\n */\r\nexport const getScrollbarHandleLengthRatio = (\r\n  structureSetupState: StructureSetupState,\r\n  isHorizontal?: boolean,\r\n  scrollbarStructure?: ScrollbarStructure\r\n) => {\r\n  if (scrollbarStructure) {\r\n    const axis = isHorizontal ? strWidth : strHeight;\r\n    const { _track, _handle } = scrollbarStructure;\r\n\r\n    const handleSize = getBoundingClientRect(_handle)[axis];\r\n    const trackSize = getBoundingClientRect(_track)[axis];\r\n\r\n    return capNumber(0, 1, handleSize / trackSize);\r\n  }\r\n\r\n  const axis = isHorizontal ? 'x' : 'y';\r\n  const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n\r\n  const viewportSize = _overflowEdge[axis];\r\n  const overflowAmount = _overflowAmount[axis];\r\n\r\n  return capNumber(0, 1, viewportSize / (viewportSize + overflowAmount));\r\n};\r\n\r\nexport const getScrollbarHandleOffsetRatio = (\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollPercent: number,\r\n  isHorizontal?: boolean\r\n) => {\r\n  const lengthRatio = getScrollbarHandleLengthRatio(\r\n    structureSetupState,\r\n    isHorizontal,\r\n    scrollbarStructure\r\n  );\r\n\r\n  return (1 / lengthRatio) * (1 - lengthRatio) * scrollPercent;\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  getDirectionIsRTL,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isArray,\r\n  isBoolean,\r\n  isEmptyArray,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  setT,\r\n  style,\r\n  bind,\r\n  mathMax,\r\n  getElmentScroll,\r\n  inArray,\r\n  strWidth,\r\n  strHeight,\r\n  concat,\r\n  assignDeep,\r\n  ratioToCssPercent,\r\n  numberToCssPx,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarTransitionless,\r\n  classNameScrollbarNoCssCustomProps,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\nimport {\r\n  getScrollbarHandleLengthRatio,\r\n  getScrollbarHandleOffsetPercent,\r\n  getScrollbarHandleOffsetRatio,\r\n} from './scrollbarsSetup.calculations';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollTimeline: AnimationTimeline | undefined;\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization, _cssCustomProperties } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const elementAnimations = new Map<HTMLElement, Array<Animation | false | null | undefined>>();\r\n  const initScrollTimeline = (axis: 'x' | 'y') =>\r\n    scrollT &&\r\n    new scrollT({\r\n      source: _scrollOffsetElement,\r\n      axis,\r\n    });\r\n  const scrollTimelineX = initScrollTimeline('x');\r\n  const scrollTimelineY = initScrollTimeline('y');\r\n\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n  const doRefreshScrollbarOffset = (scrollbar: HTMLElement) =>\r\n    _viewportIsTarget && !_isBody && parent(scrollbar) === _viewport;\r\n  const cancelElementAnimations = (elements?: HTMLElement | HTMLElement[]) => {\r\n    elementAnimations.forEach((currAnimations, element) => {\r\n      const doCancel = elements\r\n        ? inArray(isArray(elements) ? elements : [elements], element)\r\n        : true;\r\n      if (doCancel) {\r\n        (currAnimations || []).forEach((animation) => {\r\n          animation && animation.cancel();\r\n        });\r\n        elementAnimations.delete(element);\r\n      }\r\n    });\r\n  };\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      style(elm, styles);\r\n    });\r\n  };\r\n  const animateElement = (\r\n    element: HTMLElement,\r\n    scrollTimeline: AnimationTimeline | undefined,\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    composite?: CompositeOperation\r\n  ): Animation | false | null | undefined =>\r\n    scrollTimeline &&\r\n    element.animate(keyframes, {\r\n      // @ts-ignore\r\n      timeline: scrollTimeline,\r\n      composite,\r\n    });\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarStyle(scrollbarStructures, (structure) => {\r\n      const { _handle } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? strWidth : strHeight]: ratioToCssPercent(\r\n            getScrollbarHandleLengthRatio(structureSetupState, isHorizontal)\r\n          ),\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    if (scrollTimelineX && scrollTimelineY) {\r\n      scrollbarStructures.forEach((structure: ScrollbarStructure) => {\r\n        const { _scrollbar, _handle } = structure;\r\n        const getRatio = bind(getScrollbarHandleOffsetRatio, structureSetupState, structure);\r\n        const directionRTL = isHorizontal && getDirectionIsRTL(_scrollbar);\r\n        const start = getRatio(directionRTL ? 1 : 0, isHorizontal);\r\n        const end = getRatio(directionRTL ? 0 : 1, isHorizontal);\r\n        cancelElementAnimations(_handle);\r\n        elementAnimations.set(_handle, [\r\n          animateElement(\r\n            _handle,\r\n            isHorizontal ? scrollTimelineX : scrollTimelineY,\r\n            assignDeep(\r\n              {\r\n                transform: [\r\n                  getTrasformTranslateValue(ratioToCssPercent(start), isHorizontal),\r\n                  getTrasformTranslateValue(ratioToCssPercent(end), isHorizontal),\r\n                ],\r\n              },\r\n              directionRTL\r\n                ? {\r\n                    clear: ['left'], // dummy keyframe for direction rtl animation because of chrome bug\r\n                  }\r\n                : {}\r\n            )\r\n          ),\r\n        ]);\r\n      });\r\n    } else {\r\n      scrollbarStyle(scrollbarStructures, (structure) => {\r\n        const { _handle, _scrollbar } = structure;\r\n        const { _rtlScrollBehavior } = getEnvironment();\r\n        const axis = isHorizontal ? 'x' : 'y';\r\n        const { _overflowAmount } = structureSetupState;\r\n        const isRTL = getDirectionIsRTL(_scrollbar);\r\n\r\n        const offsetRatio = getScrollbarHandleOffsetRatio(\r\n          structureSetupState,\r\n          structure,\r\n          getScrollbarHandleOffsetPercent(\r\n            getElmentScroll(_scrollOffsetElement)[axis],\r\n            _overflowAmount[axis],\r\n            isHorizontal && isRTL && _rtlScrollBehavior\r\n          ),\r\n          isHorizontal\r\n        );\r\n\r\n        return [\r\n          _handle,\r\n          {\r\n            transform: getTrasformTranslateValue(ratioToCssPercent(offsetRatio), isHorizontal),\r\n          },\r\n        ];\r\n      });\r\n    }\r\n  };\r\n  const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n    const { _scrollbar } = structure;\r\n    const elm = doRefreshScrollbarOffset(_scrollbar) && _scrollbar;\r\n    const { x, y } = getElmentScroll(_scrollOffsetElement);\r\n    return [\r\n      elm,\r\n      {\r\n        transform: elm\r\n          ? getTrasformTranslateValue({ x: numberToCssPx(x), y: numberToCssPx(y) })\r\n          : '',\r\n      },\r\n    ] as [HTMLElement | false, StyleObject];\r\n  };\r\n  const animateScrollbarOffset = (\r\n    scrollbar: HTMLElement,\r\n    scrollTimeline: AnimationTimeline | undefined,\r\n    maxTransformValue: number,\r\n    isHorizontal?: boolean\r\n  ) =>\r\n    animateElement(\r\n      scrollbar,\r\n      scrollTimeline,\r\n      {\r\n        transform: [\r\n          getTrasformTranslateValue(numberToCssPx(0), isHorizontal),\r\n          getTrasformTranslateValue(\r\n            numberToCssPx(mathMax(0, maxTransformValue - 0.5)),\r\n            isHorizontal\r\n          ),\r\n        ],\r\n      },\r\n      'add'\r\n    );\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget) {\r\n      if (scrollTimelineY && scrollTimelineY) {\r\n        const { _overflowAmount } = structureSetupState;\r\n        concat(verticalScrollbars, horizontalScrollbars).forEach(({ _scrollbar }) => {\r\n          cancelElementAnimations(_scrollbar);\r\n          if (doRefreshScrollbarOffset(_scrollbar)) {\r\n            elementAnimations.set(_scrollbar, [\r\n              animateScrollbarOffset(_scrollbar, scrollTimelineX, _overflowAmount.x, true),\r\n              animateScrollbarOffset(_scrollbar, scrollTimelineY, _overflowAmount.y),\r\n            ]);\r\n          }\r\n        });\r\n      } else {\r\n        scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n        scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n      }\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const arrToPush = isHorizontal ? horizontalScrollbars : verticalScrollbars;\r\n    const transitionlessClass = isEmptyArray(arrToPush) ? classNameScrollbarTransitionless : '';\r\n    const scrollbar = createDiv(\r\n      `${classNameScrollbar} ${scrollbarClassName} ${transitionlessClass}`\r\n    );\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    if (!_cssCustomProperties) {\r\n      addClass(scrollbar, classNameScrollbarNoCssCustomProps);\r\n    }\r\n\r\n    push(arrToPush, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      cancelElementAnimations,\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        scrollbarStructureRefreshHandleOffset,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    setT(() => {\r\n      scrollbarsAddRemoveClass(classNameScrollbarTransitionless);\r\n    }, 300);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollTimeline: scrollTimelineX,\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollTimeline: scrollTimelineY,\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  offsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  stopPropagation,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  attrClass,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataValueHostScrollbarPressed,\r\n} from '~/classnames';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  refreshScrollbarStructuresHandleOffset: (\r\n    scrollbarStructure: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => void,\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState\r\n): ScrollbarsSetupEvents => {\r\n  const { _host, _scrollOffsetElement, _documentElm } = structureSetupElements;\r\n\r\n  return (\r\n    scrollbarStructure,\r\n    scrollbarsAddRemoveClass,\r\n    refreshScrollbarStructuresHandleOffset,\r\n    isHorizontal\r\n  ) => {\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [requestHandleTransitionAnimationFrame, cancelHandleTransitionTimeout] =\r\n      selfClearTimeout();\r\n    const refreshHandleOffsetTransition = bind(\r\n      refreshScrollbarStructuresHandleOffset,\r\n      [scrollbarStructure],\r\n      isHorizontal\r\n    );\r\n    const scrollByFn = !!_scrollOffsetElement.scrollBy;\r\n\r\n    const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY'; // for pointer event (can't use xy because of IE11)\r\n    const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n    const leftTopKey = isHorizontal ? 'left' : 'top'; // for BCR (can't use xy because of IE11)\r\n    const whKey = isHorizontal ? 'w' : 'h';\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n    const isAffectingTransition = (event: TransitionEvent) =>\r\n      event.propertyName.indexOf(widthHeightKey) > -1;\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointerleave pointercancel lostpointercapture';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = offsetSize(_track)[whKey] - offsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        attrClass(_host, dataAttributeHost, dataValueHostScrollbarPressed, true);\r\n\r\n        if (continuePointerDown) {\r\n          const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              offsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElmentScroll(_scrollOffsetElement)[xyKey] || 0,\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(offFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n\r\n          const offFns = [\r\n            bind(attrClass, _host, dataAttributeHost, dataValueHostScrollbarPressed),\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\r\n              const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\r\n\r\n              if (isDragScroll || instantClickScroll) {\r\n                moveHandleRelative(startOffset + relativeMovement);\r\n              }\r\n            }),\r\n          ];\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n\r\n            animateClickScroll &&\r\n              push(\r\n                offFns,\r\n                animateClickScroll(\r\n                  moveHandleRelative,\r\n                  getHandleOffset,\r\n                  startOffset,\r\n                  handleLength,\r\n                  relativeTrackPointerOffset\r\n                )\r\n              );\r\n          }\r\n\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (scrollByFn && wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            _scrollOffsetElement.scrollBy({\r\n              left: deltaX,\r\n              top: deltaY,\r\n              behavior: 'smooth',\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      addEventListener(_handle, 'transitionstart', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          const animateHandleOffset = () => {\r\n            refreshHandleOffsetTransition();\r\n            requestHandleTransitionAnimationFrame(animateHandleOffset);\r\n          };\r\n          animateHandleOffset();\r\n        }\r\n      }),\r\n      addEventListener(_handle, 'transitionend transitioncancel', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          cancelHandleTransitionTimeout();\r\n          refreshHandleOffsetTransition();\r\n        }\r\n      }),\r\n      // rootClickStopPropagationEvent\r\n      addEventListener(\r\n        _scrollbar,\r\n        'mousedown',\r\n        bind(addEventListener, _documentElm, 'click', stopPropagation, {\r\n          _once: true,\r\n          _capture: true,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      cancelHandleTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n","import { bind, noop, addEventListener, push, runEachAndClear, selfClearTimeout } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport { type ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideNotNever: boolean | undefined;\r\n  let mouseInHost: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  const [requestMouseMoveAnimationFrame, cancelMouseMoveAnimationFrame] = selfClearTimeout();\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [scrollTimeout, clearScrollTimeout] = selfClearTimeout(100);\r\n  const [auotHideMoveTimeout, clearAutoHideTimeout] = selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(options, structureSetupElements, structureSetupState)\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      mouseInHost && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [\r\n    clearScrollTimeout,\r\n    clearAutoTimeout,\r\n    clearAutoHideTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    cancelMouseMoveAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        requestMouseMoveAnimationFrame(() => {\r\n          clearScrollTimeout();\r\n          manageScrollbarsAutoHide(true);\r\n          auotHideMoveTimeout(() => {\r\n            autoHideIsMove && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n\r\n        autoHideNotNever && manageScrollbarsAutoHide(true);\r\n        scrollTimeout(() => {\r\n          autoHideNotNever && !mouseInHost && manageScrollbarsAutoHide(false);\r\n        });\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n        _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowAmount, _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged || _overflowAmountChanged || _directionChanged || _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (overflowStyle: OverflowStyle, isHorizontal: boolean) => {\r\n        const isVisible =\r\n          visibility === 'visible' || (visibility === 'auto' && overflowStyle === 'scroll');\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideNotNever = autoHide !== 'never';\r\n        manageScrollbarsAutoHide(!autoHideNotNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(_overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(_overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      if (updateScrollbars) {\r\n        // order is matter! length has to be refreshed before offset\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsScrollbarOffset();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  addClass,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  insertBefore,\r\n  attr,\r\n  keys,\r\n  removeAttr,\r\n  attrClass,\r\n  hasAttrClass,\r\n  noop,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  classNameScrollbarHidden,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n  resolveInitialization as generalResolveInitialization,\r\n} from '~/initialization';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _viewportArrange: HTMLStyleElement | false | null | undefined;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportIsContent: boolean;\r\n  _viewportHasClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string\r\n  ) => boolean;\r\n  _viewportAddRemoveClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string,\r\n    add?: boolean\r\n  ) => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n  const createUniqueViewportArrangeElement =\r\n    scrollbarsHidingPlugin && scrollbarsHidingPlugin._createUniqueViewportArrangeElement;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const isBody = targetElement === ownerDocument.body;\r\n  const docWnd = ownerDocument.defaultView as Window;\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const resolveInitialization = bind(generalResolveInitialization, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // check the default contentElement\r\n  // if truthy (so the element would be present in the DOM) the passed element is the final content element and the viewport element is generated\r\n  // if falsy (so the element wouldn't be present in the DOM) the passed element is the final viewport element and the content element is omitted\r\n  const viewportIsContent =\r\n    !viewportIsTarget &&\r\n    isHTMLElement(possibleViewportElement) &&\r\n    possibleViewportElement === possibleContentElement;\r\n  const defaultContentElementPresent =\r\n    viewportIsContent && !!resolveInitialization(defaultContentInitialization);\r\n  const viewportIstContentViewport = defaultContentElementPresent\r\n    ? generateViewportElement()\r\n    : possibleViewportElement;\r\n  const viewportIsContentContent = defaultContentElementPresent\r\n    ? possibleContentElement\r\n    : generateContentElement();\r\n  const nonBodyViewportElement = viewportIsContent\r\n    ? viewportIstContentViewport\r\n    : possibleViewportElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : nonBodyViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const contentElement = viewportIsContent ? viewportIsContentContent : possibleContentElement;\r\n  const activeElm = ownerDocument.activeElement;\r\n  const setViewportFocus =\r\n    !viewportIsTarget && docWnd.top === docWnd && activeElm === targetElement;\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        defaultPaddingInitialization,\r\n        paddingInitialization\r\n      ),\r\n    _content: contentElement,\r\n    _viewportArrange:\r\n      !viewportIsTarget &&\r\n      !_nativeScrollbarsHiding &&\r\n      createUniqueViewportArrangeElement &&\r\n      createUniqueViewportArrangeElement(env),\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _windowElm: docWnd,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportIsContent: viewportIsContent,\r\n    _viewportHasClass: (viewportAttributeClassName: string, hostAttributeClassName: string) =>\r\n      hasAttrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName\r\n      ),\r\n    _viewportAddRemoveClass: (\r\n      viewportAttributeClassName: string,\r\n      hostAttributeClassName: string,\r\n      add?: boolean\r\n    ) =>\r\n      attrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName,\r\n        add\r\n      ),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key) => {\r\n    const value = evaluatedTargetObj[key as keyof StructureSetupElementsObj];\r\n    return push(arr, value && isHTMLElement(value) && !parent(value) ? value : false);\r\n  }, [] as Array<HTMLElement | false>);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? inArray(generatedElements, elm) : null;\r\n  const { _target, _host, _padding, _viewport, _content, _viewportArrange } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttr(_host, dataAttributeHost);\r\n      removeAttr(_host, dataAttributeInitialize);\r\n      removeAttr(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttr(docElement, dataAttributeHost);\r\n        removeAttr(docElement, dataAttributeInitialize);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    attr(_host, dataAttributeHost, viewportIsTarget ? 'viewport' : 'host');\r\n    attr(_padding, dataAttributePadding, '');\r\n    attr(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      attr(_viewport, dataAttributeViewport, '');\r\n    }\r\n\r\n    const removeHtmlClass =\r\n      isBody && !viewportIsTarget\r\n        ? addClass(parent(targetElement), classNameScrollbarHidden)\r\n        : noop;\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, () => {\r\n      removeHtmlClass();\r\n      removeAttr(_padding, dataAttributePadding);\r\n      removeAttr(_content, dataAttributeContent);\r\n      removeAttr(_viewport, dataAttributeHostOverflowX);\r\n      removeAttr(_viewport, dataAttributeHostOverflowY);\r\n      removeAttr(_viewport, dataAttributeViewport);\r\n\r\n      elementIsGenerated(_content) && unwrap(_content);\r\n      elementIsGenerated(_viewport) && unwrap(_viewport);\r\n      elementIsGenerated(_padding) && unwrap(_padding);\r\n    });\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      attrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden, true);\r\n      push(destroyFns, bind(removeAttr, _viewport, dataAttributeViewport));\r\n    }\r\n    if (_viewportArrange) {\r\n      insertBefore(_viewport, _viewportArrange);\r\n      push(destroyFns, bind(removeElements, _viewportArrange));\r\n    }\r\n    if (setViewportFocus) {\r\n      const tabIndexStr = 'tabindex';\r\n      const ogTabindex = attr(_viewport, tabIndexStr);\r\n\r\n      attr(_viewport, tabIndexStr, '-1');\r\n      _viewport.focus();\r\n\r\n      const revertViewportTabIndex = () =>\r\n        ogTabindex ? attr(_viewport, tabIndexStr, ogTabindex) : removeAttr(_viewport, tabIndexStr);\r\n      const off = addEventListener(ownerDocument, 'pointerdown keydown', () => {\r\n        revertViewportTabIndex();\r\n        off();\r\n      });\r\n\r\n      push(destroyFns, [revertViewportTabIndex, off]);\r\n    } else if (activeElm && (activeElm as HTMLElement).focus) {\r\n      (activeElm as HTMLElement).focus();\r\n    }\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n","import { strHeight, style } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _flexboxGlue } = getEnvironment();\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged =\r\n      (_content || !_flexboxGlue) && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      style(_content, {\r\n        [strHeight]: _heightIntrinsic ? '' : '100%',\r\n      });\r\n    }\r\n  };\r\n","import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  style,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding, _flexboxGlue } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || (!_flexboxGlue && _contentMutation);\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative ? `calc(100% + ${paddingHorizontal}px)` : '',\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      style(_padding || _viewport, paddingStyle);\r\n      style(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  attr,\r\n  style,\r\n  scrollSize,\r\n  fractionalSize,\r\n  equalWH,\r\n  clientSize,\r\n  equalXY,\r\n  attrClass,\r\n  noop,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  windowSize,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strWidth,\r\n  strHeight,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataValueHostScrollbarHidden,\r\n  dataValueHostOverflowVisible,\r\n  dataValueViewportScrollbarHidden,\r\n  dataValueViewportOverflowVisible,\r\n  dataAttributeViewport,\r\n  dataAttributePadding,\r\n  dataValuePaddingOverflowVisible,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { WH, XY } from '~/support';\r\nimport type {\r\n  ArrangeViewport,\r\n  ScrollbarsHidingPlugin,\r\n  UndoArrangeViewport,\r\n} from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { StyleObject, OverflowStyle, StyleObjectKey } from '~/typings';\r\nimport type { OverflowBehavior } from '~/options';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\nexport interface ViewportOverflowState {\r\n  _scrollbarsHideOffset: XY<number>;\r\n  _scrollbarsHideOffsetArrange: XY<boolean>;\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport type GetViewportOverflowState = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  viewportStyleObj?: StyleObject\r\n) => ViewportOverflowState;\r\n\r\nexport type HideNativeScrollbars = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  directionIsRTL: boolean,\r\n  viewportArrange: boolean,\r\n  viewportStyleObj: StyleObject\r\n) => void;\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportArrange,\r\n    _viewportIsTarget,\r\n    _viewportAddRemoveClass,\r\n    _isBody,\r\n    _windowElm,\r\n  },\r\n  state\r\n) => {\r\n  const max0 = bind(mathMax, 0);\r\n  const strVisible = 'visible';\r\n  const overlaidScrollbarsHideOffset = 42;\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const xyCacheOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\r\n  };\r\n  const getOverflowAmount = (viewportScrollSize: WH<number>, viewportClientSize: WH<number>) => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n  const overflowIsVisible = (overflowBehavior: string) =>\r\n    overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _flexboxGlue,\r\n    _nativeScrollbarsHiding,\r\n    _nativeScrollbarsOverlaid,\r\n  } = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n  const doViewportArrange =\r\n    !_viewportIsTarget &&\r\n    !_nativeScrollbarsHiding &&\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(fractionalSize, _viewport)\r\n  );\r\n\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(scrollSize, _viewport));\r\n\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\r\n\r\n  /**\r\n   * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\r\n   * @param viewportOverflowState The current overflow state.\r\n   * @param heightIntrinsic Whether the host height is intrinsic or not.\r\n   */\r\n  const fixFlexboxGlue = (\r\n    viewportOverflowState: ViewportOverflowState,\r\n    heightIntrinsic: boolean\r\n  ) => {\r\n    style(_viewport, {\r\n      [strHeight]: '',\r\n    });\r\n\r\n    if (heightIntrinsic) {\r\n      const { _paddingAbsolute, _padding: padding } = state;\r\n      const { _overflowScroll, _scrollbarsHideOffset } = viewportOverflowState;\r\n      const fSize = fractionalSize(_host);\r\n      const hostClientSize = clientSize(_host);\r\n\r\n      // padding subtraction is only needed if padding is absolute or if viewport is content-box\r\n      const isContentBox = style(_viewport, 'boxSizing') === 'content-box';\r\n      const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\r\n      const subtractXScrollbar = !(_nativeScrollbarsOverlaid.x && isContentBox);\r\n\r\n      style(_viewport, {\r\n        [strHeight]:\r\n          hostClientSize.h +\r\n          fSize.h +\r\n          (_overflowScroll.x && subtractXScrollbar ? _scrollbarsHideOffset.x : 0) -\r\n          paddingVertical,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the current overflow state of the viewport.\r\n   * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n   * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\r\n   * @returns A object which contains informations about the current overflow state.\r\n   */\r\n  const getViewportOverflowState: GetViewportOverflowState = (\r\n    showNativeOverlaidScrollbars,\r\n    viewportStyleObj?\r\n  ) => {\r\n    const arrangeHideOffset =\r\n      !_nativeScrollbarsHiding && !showNativeOverlaidScrollbars ? overlaidScrollbarsHideOffset : 0;\r\n    const getStatePerAxis = (\r\n      styleKey: StyleObjectKey,\r\n      isOverlaid: boolean,\r\n      nativeScrollbarSize: number\r\n    ) => {\r\n      const overflowStyle = style(_viewport, styleKey);\r\n      // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\r\n      const objectPrefferedOverflowStyle = viewportStyleObj\r\n        ? viewportStyleObj[styleKey]\r\n        : overflowStyle;\r\n      const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\r\n      const nonScrollbarStylingHideOffset = isOverlaid ? arrangeHideOffset : nativeScrollbarSize;\r\n      const scrollbarsHideOffset =\r\n        overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n      const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n      return [overflowStyle, overflowScroll, scrollbarsHideOffset, scrollbarsHideOffsetArrange] as [\r\n        overflowStyle: OverflowStyle,\r\n        overflowScroll: boolean,\r\n        scrollbarsHideOffset: number,\r\n        scrollbarsHideOffsetArrange: boolean\r\n      ];\r\n    };\r\n\r\n    const [xOverflowStyle, xOverflowScroll, xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis(strOverflowX, _nativeScrollbarsOverlaid.x, _nativeScrollbarsSize.x);\r\n    const [yOverflowStyle, yOverflowScroll, yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis(strOverflowY, _nativeScrollbarsOverlaid.y, _nativeScrollbarsSize.y);\r\n\r\n    return {\r\n      _overflowStyle: {\r\n        x: xOverflowStyle,\r\n        y: yOverflowStyle,\r\n      },\r\n      _overflowScroll: {\r\n        x: xOverflowScroll,\r\n        y: yOverflowScroll,\r\n      },\r\n      _scrollbarsHideOffset: {\r\n        x: xScrollbarsHideOffset,\r\n        y: yScrollbarsHideOffset,\r\n      },\r\n      _scrollbarsHideOffsetArrange: {\r\n        x: xScrollbarsHideOffsetArrange,\r\n        y: yScrollbarsHideOffsetArrange,\r\n      },\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\r\n   * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\r\n   * @param overflowAmount The overflow amount.\r\n   * @param overflow The overflow behavior according to the options.\r\n   * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\r\n   * @returns A object which represents the newly set overflow state.\r\n   */\r\n  const setViewportOverflowState = (\r\n    showNativeOverlaidScrollbars: boolean,\r\n    hasOverflow: XY<boolean>,\r\n    overflowOption: XY<OverflowBehavior>,\r\n    viewportStyleObj: StyleObject\r\n  ): ViewportOverflowState => {\r\n    const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\r\n      const overflowVisible = overflowIsVisible(behavior);\r\n      const overflowVisibleBehavior =\r\n        (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) || '';\r\n      return [\r\n        hasOverflowAxis && !overflowVisible ? behavior : '',\r\n        overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\r\n      ];\r\n    };\r\n\r\n    const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\r\n    const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\r\n\r\n    viewportStyleObj[strOverflowX] = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\r\n    viewportStyleObj[strOverflowY] = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\r\n\r\n    return getViewportOverflowState(showNativeOverlaidScrollbars, viewportStyleObj);\r\n  };\r\n\r\n  /**\r\n   * Hides the native scrollbars according to the passed parameters.\r\n   * @param viewportOverflowState The viewport overflow state.\r\n   * @param directionIsRTL Whether the direction is RTL or not.\r\n   * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n   * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n   */\r\n  const hideNativeScrollbars: HideNativeScrollbars = (\r\n    viewportOverflowState,\r\n    directionIsRTL,\r\n    viewportArrange,\r\n    viewportStyleObj\r\n  ) => {\r\n    const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n    const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n    const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n    const { _viewportPaddingStyle: viewportPaddingStyle } = state;\r\n    const horizontalMarginKey: keyof StyleObject = directionIsRTL ? strMarginLeft : strMarginRight;\r\n    const viewportHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n      ? strPaddingLeft\r\n      : strPaddingRight;\r\n    const horizontalMarginValue = viewportPaddingStyle[horizontalMarginKey] as number;\r\n    const verticalMarginValue = viewportPaddingStyle[strMarginBottom] as number;\r\n    const horizontalPaddingValue = viewportPaddingStyle[viewportHorizontalPaddingKey] as number;\r\n    const verticalPaddingValue = viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n    // horizontal\r\n    viewportStyleObj[strWidth] = `calc(100% + ${hideOffsetY + horizontalMarginValue * -1}px)`;\r\n    viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n    // vertical\r\n    viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n    // viewport arrange additional styles\r\n    if (viewportArrange) {\r\n      viewportStyleObj[viewportHorizontalPaddingKey] =\r\n        horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n      viewportStyleObj[strPaddingBottom] = verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n    }\r\n  };\r\n\r\n  const [arrangeViewport, undoViewportArrange] = scrollbarsHidingPlugin\r\n    ? scrollbarsHidingPlugin._overflowUpdateSegment(\r\n        doViewportArrange,\r\n        _flexboxGlue,\r\n        _viewport,\r\n        _viewportArrange,\r\n        state,\r\n        getViewportOverflowState,\r\n        hideNativeScrollbars\r\n      )\r\n    : [(() => doViewportArrange) as ArrangeViewport, (() => [noop]) as UndoArrangeViewport];\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const {\r\n      _sizeChanged,\r\n      _hostMutation,\r\n      _contentMutation,\r\n      _heightIntrinsicChanged,\r\n      _directionChanged,\r\n      _scrollbarSizeChanged,\r\n    } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic, _directionIsRTL } = _observersState;\r\n    const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = _checkOption(\r\n      'showNativeOverlaidScrollbars'\r\n    );\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n\r\n    const showNativeOverlaidScrollbars =\r\n      showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y;\r\n    const adjustFlexboxGlue =\r\n      !_viewportIsTarget &&\r\n      !_flexboxGlue &&\r\n      (_sizeChanged ||\r\n        _contentMutation ||\r\n        _hostMutation ||\r\n        showNativeOverlaidScrollbarsChanged ||\r\n        _heightIntrinsicChanged);\r\n    const adjustViewportArrange =\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n    const overflowVisible = overflowXVisible || overflowYVisible;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(\r\n        dataValueViewportScrollbarHidden,\r\n        dataValueHostScrollbarHidden,\r\n        !showNativeOverlaidScrollbars\r\n      );\r\n    }\r\n\r\n    if (adjustFlexboxGlue) {\r\n      preMeasureViewportOverflowState = getViewportOverflowState(showNativeOverlaidScrollbars);\r\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\r\n    }\r\n\r\n    if (adjustViewportArrange) {\r\n      if (overflowVisible) {\r\n        _viewportAddRemoveClass(\r\n          dataValueViewportOverflowVisible,\r\n          dataValueHostOverflowVisible,\r\n          false\r\n        );\r\n      }\r\n\r\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = undoViewportArrange(\r\n        showNativeOverlaidScrollbars,\r\n        _directionIsRTL,\r\n        preMeasureViewportOverflowState\r\n      );\r\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = clientSize(_viewport);\r\n      let arrangedViewportScrollSize = viewportScrollSize;\r\n      let arrangedViewportClientSize = viewportClientSize;\r\n\r\n      redoViewportArrange();\r\n\r\n      // if re measure is required (only required if content arrange strategy is used)\r\n      if (\r\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\r\n        undoViewportArrangeOverflowState &&\r\n        !showNativeOverlaidScrollbars &&\r\n        arrangeViewport(\r\n          undoViewportArrangeOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          _directionIsRTL\r\n        )\r\n      ) {\r\n        arrangedViewportClientSize = clientSize(_viewport);\r\n        arrangedViewportScrollSize = scrollSize(_viewport);\r\n      }\r\n\r\n      const windowInnerSize = windowSize(_windowElm);\r\n      const overflowAmountScrollSize = {\r\n        w: max0(mathMax(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\r\n        h: max0(mathMax(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.w\r\n            : arrangedViewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.h\r\n            : arrangedViewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const hasOverflow = {\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    };\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      adjustFlexboxGlue ||\r\n      adjustViewportArrange;\r\n\r\n    if (adjustViewportStyle) {\r\n      const viewportStyle: StyleObject = {\r\n        [strMarginRight]: 0,\r\n        [strMarginBottom]: 0,\r\n        [strMarginLeft]: 0,\r\n        [strWidth]: '',\r\n        [strOverflowX]: '',\r\n        [strOverflowY]: '',\r\n      };\r\n      const viewportOverflowState = setViewportOverflowState(\r\n        showNativeOverlaidScrollbars,\r\n        hasOverflow,\r\n        overflow,\r\n        viewportStyle\r\n      );\r\n      const viewportArranged = arrangeViewport(\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        _directionIsRTL\r\n      );\r\n\r\n      if (!_viewportIsTarget) {\r\n        hideNativeScrollbars(\r\n          viewportOverflowState,\r\n          _directionIsRTL,\r\n          viewportArranged,\r\n          viewportStyle\r\n        );\r\n      }\r\n\r\n      if (adjustFlexboxGlue) {\r\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\r\n      }\r\n\r\n      if (_viewportIsTarget) {\r\n        attr(_host, dataAttributeHostOverflowX, viewportStyle[strOverflowX] as string);\r\n        attr(_host, dataAttributeHostOverflowY, viewportStyle[strOverflowY] as string);\r\n      } else {\r\n        style(_viewport, viewportStyle);\r\n      }\r\n    }\r\n\r\n    attrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\r\n    attrClass(_padding, dataAttributePadding, dataValuePaddingOverflowVisible, removeClipping);\r\n    if (!_viewportIsTarget) {\r\n      attrClass(\r\n        _viewport,\r\n        dataAttributeViewport,\r\n        dataValueViewportOverflowVisible,\r\n        overflowVisible\r\n      );\r\n    }\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      getViewportOverflowState(showNativeOverlaidScrollbars)._overflowStyle\r\n    );\r\n\r\n    assignDeep(state, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import { getEnvironment } from '~/environment';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport { dataValueHostUpdating } from '~/classnames';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n  };\r\n  const { _target, _viewport, _viewportAddRemoveClass, _viewportIsTarget } = elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _flexboxGlue } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange || !_flexboxGlue;\r\n      const scrollOffset = adjustScrollOffset && getElmentScroll(_viewport);\r\n\r\n      _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      _viewportAddRemoveClass('', dataValueHostUpdating);\r\n\r\n      scrollElementTo(_viewport, scrollOffset);\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  bind,\r\n  getElmentScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _target, _viewport, _documentElm, _isBody } = structureSetupElements;\r\n      const scrollingElement = _isBody ? _documentElm.documentElement : _target;\r\n      const initialScroll = getElmentScroll(scrollingElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n\r\n      scrollElementTo(_viewport, initialScroll);\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { Environment } from '~/environment';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n            _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _flexboxGlue,\r\n    _cssCustomProperties,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      flexboxGlue: _flexboxGlue,\r\n      cssCustomProperties: _cssCustomProperties,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}