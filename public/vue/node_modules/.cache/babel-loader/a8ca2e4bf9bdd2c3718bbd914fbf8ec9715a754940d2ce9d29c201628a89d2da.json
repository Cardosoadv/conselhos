{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*!\n * OverlayScrollbars\n * Version: 2.4.5\n *\n * Copyright (c) Rene Haas | KingSora.\n * https://github.com/KingSora\n *\n * Released under the MIT license.\n */\n\nvar OverlayScrollbarsGlobal = function (t) {\n  \"use strict\";\n\n  const createCache = (t, n) => {\n    const {\n      o: o,\n      u: s,\n      _: e\n    } = t;\n    let c = o;\n    let r;\n    const cacheUpdateContextual = (t, n) => {\n      const o = c;\n      const l = t;\n      const i = n || (s ? !s(o, l) : o !== l);\n      if (i || e) {\n        c = l;\n        r = o;\n      }\n      return [c, i, r];\n    };\n    const cacheUpdateIsolated = t => cacheUpdateContextual(n(c, r), t);\n    const getCurrentCache = t => [c, !!t, r];\n    return [n ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache];\n  };\n  const n = typeof window !== \"undefined\";\n  const o = n && Node.ELEMENT_NODE;\n  const {\n    toString: s,\n    hasOwnProperty: e\n  } = Object.prototype;\n  const c = /^\\[object (.+)\\]$/;\n  const isUndefined = t => t === void 0;\n  const isNull = t => t === null;\n  const type = t => isUndefined(t) || isNull(t) ? `${t}` : s.call(t).replace(c, \"$1\").toLowerCase();\n  const isNumber = t => typeof t === \"number\";\n  const isString = t => typeof t === \"string\";\n  const isBoolean = t => typeof t === \"boolean\";\n  const isFunction = t => typeof t === \"function\";\n  const isArray = t => Array.isArray(t);\n  const isObject = t => typeof t === \"object\" && !isArray(t) && !isNull(t);\n  const isArrayLike = t => {\n    const n = !!t && t.length;\n    const o = isNumber(n) && n > -1 && n % 1 == 0;\n    return isArray(t) || !isFunction(t) && o ? n > 0 && isObject(t) ? n - 1 in t : true : false;\n  };\n  const isPlainObject = t => {\n    if (!t || !isObject(t) || type(t) !== \"object\") {\n      return false;\n    }\n    let n;\n    const o = \"constructor\";\n    const s = t[o];\n    const c = s && s.prototype;\n    const r = e.call(t, o);\n    const l = c && e.call(c, \"isPrototypeOf\");\n    if (s && !r && !l) {\n      return false;\n    }\n    for (n in t) {}\n    return isUndefined(n) || e.call(t, n);\n  };\n  const isHTMLElement = t => {\n    const n = HTMLElement;\n    return t ? n ? t instanceof n : t.nodeType === o : false;\n  };\n  const isElement = t => {\n    const n = Element;\n    return t ? n ? t instanceof n : t.nodeType === o : false;\n  };\n  function each(t, n) {\n    if (isArrayLike(t)) {\n      for (let o = 0; o < t.length; o++) {\n        if (n(t[o], o, t) === false) {\n          break;\n        }\n      }\n    } else if (t) {\n      each(Object.keys(t), o => n(t[o], o, t));\n    }\n    return t;\n  }\n  const inArray = (t, n) => t.indexOf(n) >= 0;\n  const concat = (t, n) => t.concat(n);\n  const push = (t, n, o) => {\n    !o && !isString(n) && isArrayLike(n) ? Array.prototype.push.apply(t, n) : t.push(n);\n    return t;\n  };\n  const from = t => {\n    const n = Array.from;\n    const o = [];\n    if (n && t) {\n      return n(t);\n    }\n    if (t instanceof Set) {\n      t.forEach(t => {\n        push(o, t);\n      });\n    } else {\n      each(t, t => {\n        push(o, t);\n      });\n    }\n    return o;\n  };\n  const isEmptyArray = t => !!t && !t.length;\n  const deduplicateArray = t => from(new Set(t));\n  const runEachAndClear = (t, n, o) => {\n    const runFn = t => t && t.apply(void 0, n || []);\n    each(t, runFn);\n    !o && (t.length = 0);\n  };\n  const hasOwnProperty = (t, n) => Object.prototype.hasOwnProperty.call(t, n);\n  const keys = t => t ? Object.keys(t) : [];\n  const assignDeep = (t, n, o, s, e, c, r) => {\n    const l = [n, o, s, e, c, r];\n    if ((typeof t !== \"object\" || isNull(t)) && !isFunction(t)) {\n      t = {};\n    }\n    each(l, n => {\n      each(n, (o, s) => {\n        const e = n[s];\n        if (t === e) {\n          return true;\n        }\n        const c = isArray(e);\n        if (e && isPlainObject(e)) {\n          const n = t[s];\n          let o = n;\n          if (c && !isArray(n)) {\n            o = [];\n          } else if (!c && !isPlainObject(n)) {\n            o = {};\n          }\n          t[s] = assignDeep(o, e);\n        } else {\n          t[s] = c ? e.slice() : e;\n        }\n      });\n    });\n    return t;\n  };\n  const removeUndefinedProperties = (t, n) => each(assignDeep({}, t), (t, o, s) => {\n    if (t === void 0) {\n      delete s[o];\n    } else if (n && t && isPlainObject(t)) {\n      s[o] = removeUndefinedProperties(t, n);\n    }\n  });\n  const isEmptyObject = t => {\n    for (const n in t) {\n      return false;\n    }\n    return true;\n  };\n  const attr = (t, n, o) => {\n    if (isUndefined(o)) {\n      return t ? t.getAttribute(n) : null;\n    }\n    t && t.setAttribute(n, o);\n  };\n  const getValueSet = (t, n) => new Set((attr(t, n) || \"\").split(\" \"));\n  const removeAttr = (t, n) => {\n    t && t.removeAttribute(n);\n  };\n  const attrClass = (t, n, o, s) => {\n    if (o) {\n      const e = getValueSet(t, n);\n      e[s ? \"add\" : \"delete\"](o);\n      const c = from(e).join(\" \").trim();\n      attr(t, n, c);\n    }\n  };\n  const hasAttrClass = (t, n, o) => getValueSet(t, n).has(o);\n  const r = n && Element.prototype;\n  const find = (t, n) => {\n    const o = [];\n    const s = n ? isElement(n) && n : document;\n    return s ? push(o, s.querySelectorAll(t)) : o;\n  };\n  const findFirst = (t, n) => {\n    const o = n ? isElement(n) && n : document;\n    return o ? o.querySelector(t) : null;\n  };\n  const is = (t, n) => {\n    if (isElement(t)) {\n      const o = r.matches || r.msMatchesSelector;\n      return o.call(t, n);\n    }\n    return false;\n  };\n  const contents = t => t ? from(t.childNodes) : [];\n  const parent = t => t && t.parentElement;\n  const closest = (t, n) => {\n    if (isElement(t)) {\n      const o = r.closest;\n      if (o) {\n        return o.call(t, n);\n      }\n      do {\n        if (is(t, n)) {\n          return t;\n        }\n        t = parent(t);\n      } while (t);\n    }\n  };\n  const liesBetween = (t, n, o) => {\n    const s = closest(t, n);\n    const e = t && findFirst(o, s);\n    const c = closest(e, n) === s;\n    return s && e ? s === t || e === t || c && closest(closest(t, o), n) !== s : false;\n  };\n  const noop = () => {};\n  const removeElements = t => {\n    if (isArrayLike(t)) {\n      each(from(t), t => removeElements(t));\n    } else if (t) {\n      const n = parent(t);\n      n && n.removeChild(t);\n    }\n  };\n  const before = (t, n, o) => {\n    if (o && t) {\n      let s = n;\n      let e;\n      if (isArrayLike(o)) {\n        e = document.createDocumentFragment();\n        each(o, t => {\n          if (t === s) {\n            s = t.previousSibling;\n          }\n          e.appendChild(t);\n        });\n      } else {\n        e = o;\n      }\n      if (n) {\n        if (!s) {\n          s = t.firstChild;\n        } else if (s !== n) {\n          s = s.nextSibling;\n        }\n      }\n      t.insertBefore(e, s || null);\n      return () => removeElements(o);\n    }\n    return noop;\n  };\n  const appendChildren = (t, n) => before(t, null, n);\n  const insertBefore = (t, n) => before(parent(t), t, n);\n  const insertAfter = (t, n) => before(parent(t), t && t.nextSibling, n);\n  const createDiv = t => {\n    const n = document.createElement(\"div\");\n    attr(n, \"class\", t);\n    return n;\n  };\n  const createDOM = t => {\n    const n = createDiv();\n    n.innerHTML = t.trim();\n    return each(contents(n), t => removeElements(t));\n  };\n  const l = n ? window : {};\n  const i = Math.max;\n  const a = Math.min;\n  const u = Math.round;\n  const f = Math.abs;\n  const _ = l.cancelAnimationFrame;\n  const d = l.requestAnimationFrame;\n  const v = l.setTimeout;\n  const h = l.clearTimeout;\n  const firstLetterToUpper = t => t.charAt(0).toUpperCase() + t.slice(1);\n  const getDummyStyle = () => createDiv().style;\n  const p = [\"-webkit-\", \"-moz-\", \"-o-\", \"-ms-\"];\n  const g = [\"WebKit\", \"Moz\", \"O\", \"MS\", \"webkit\", \"moz\", \"o\", \"ms\"];\n  const b = {};\n  const w = {};\n  const cssProperty = t => {\n    let n = w[t];\n    if (hasOwnProperty(w, t)) {\n      return n;\n    }\n    const o = firstLetterToUpper(t);\n    const s = getDummyStyle();\n    each(p, e => {\n      const c = e.replace(/-/g, \"\");\n      const r = [t, e + t, c + o, firstLetterToUpper(c) + o];\n      return !(n = r.find(t => s[t] !== void 0));\n    });\n    return w[t] = n || \"\";\n  };\n  const jsAPI = t => {\n    let n = b[t] || l[t];\n    if (hasOwnProperty(b, t)) {\n      return n;\n    }\n    each(g, o => {\n      n = n || l[o + firstLetterToUpper(t)];\n      return !n;\n    });\n    b[t] = n;\n    return n;\n  };\n  const y = jsAPI(\"MutationObserver\");\n  const m = jsAPI(\"IntersectionObserver\");\n  const S = jsAPI(\"ResizeObserver\");\n  const $ = jsAPI(\"ScrollTimeline\");\n  const bind = (t, ...n) => t.bind(0, ...n);\n  const selfClearTimeout = t => {\n    let n;\n    const o = t ? v : d;\n    const s = t ? h : _;\n    return [e => {\n      s(n);\n      n = o(e, isFunction(t) ? t() : t);\n    }, () => s(n)];\n  };\n  const debounce = (t, n) => {\n    let o;\n    let s;\n    let e;\n    let c = noop;\n    const {\n      v: r,\n      p: l,\n      g: i\n    } = n || {};\n    const a = function invokeFunctionToDebounce(n) {\n      c();\n      h(o);\n      o = s = void 0;\n      c = noop;\n      t.apply(this, n);\n    };\n    const mergeParms = t => i && s ? i(s, t) : t;\n    const flush = () => {\n      if (c !== noop) {\n        a(mergeParms(e) || e);\n      }\n    };\n    const u = function debouncedFn() {\n      const t = from(arguments);\n      const n = isFunction(r) ? r() : r;\n      const i = isNumber(n) && n >= 0;\n      if (i) {\n        const r = isFunction(l) ? l() : l;\n        const i = isNumber(r) && r >= 0;\n        const u = n > 0 ? v : d;\n        const f = n > 0 ? h : _;\n        const p = mergeParms(t);\n        const g = p || t;\n        const b = a.bind(0, g);\n        c();\n        const w = u(b, n);\n        c = () => f(w);\n        if (i && !o) {\n          o = v(flush, r);\n        }\n        s = e = g;\n      } else {\n        a(t);\n      }\n    };\n    u.m = flush;\n    return u;\n  };\n  const x = /[^\\x20\\t\\r\\n\\f]+/g;\n  const classListAction = (t, n, o) => {\n    const s = t && t.classList;\n    let e;\n    let c = 0;\n    let r = false;\n    if (s && n && isString(n)) {\n      const t = n.match(x) || [];\n      r = t.length > 0;\n      while (e = t[c++]) {\n        r = !!o(s, e) && r;\n      }\n    }\n    return r;\n  };\n  const removeClass = (t, n) => {\n    classListAction(t, n, (t, n) => t.remove(n));\n  };\n  const addClass = (t, n) => {\n    classListAction(t, n, (t, n) => t.add(n));\n    return bind(removeClass, t, n);\n  };\n  const O = {\n    opacity: 1,\n    zIndex: 1\n  };\n  const parseToZeroOrNumber = (t, n) => {\n    const o = t || \"\";\n    const s = n ? parseFloat(o) : parseInt(o, 10);\n    return s === s ? s : 0;\n  };\n  const adaptCSSVal = (t, n) => !O[t] && isNumber(n) ? `${n}px` : n;\n  const getCSSVal = (t, n, o) => String((n != null ? n[o] || n.getPropertyValue(o) : t.style[o]) || \"\");\n  const setCSSVal = (t, n, o) => {\n    try {\n      const {\n        style: s\n      } = t;\n      if (!isUndefined(s[n])) {\n        s[n] = adaptCSSVal(n, o);\n      } else {\n        s.setProperty(n, o);\n      }\n    } catch (s) {}\n  };\n  const validFiniteNumber = t => {\n    const n = t || 0;\n    return isFinite(n) ? n : 0;\n  };\n  function style(t, n) {\n    const o = isString(n);\n    const s = isArray(n) || o;\n    if (s) {\n      let s = o ? \"\" : {};\n      if (t) {\n        const e = l.getComputedStyle(t, null);\n        s = o ? getCSSVal(t, e, n) : n.reduce((n, o) => {\n          n[o] = getCSSVal(t, e, o);\n          return n;\n        }, s);\n      }\n      return s;\n    }\n    t && each(n, (o, s) => setCSSVal(t, s, n[s]));\n  }\n  const getDirectionIsRTL = t => style(t, \"direction\") === \"rtl\";\n  const topRightBottomLeft = (t, n, o) => {\n    const s = n ? `${n}-` : \"\";\n    const e = o ? `-${o}` : \"\";\n    const c = `${s}top${e}`;\n    const r = `${s}right${e}`;\n    const l = `${s}bottom${e}`;\n    const i = `${s}left${e}`;\n    const a = style(t, [c, r, l, i]);\n    return {\n      t: parseToZeroOrNumber(a[c], true),\n      r: parseToZeroOrNumber(a[r], true),\n      b: parseToZeroOrNumber(a[l], true),\n      l: parseToZeroOrNumber(a[i], true)\n    };\n  };\n  const getTrasformTranslateValue = (t, n) => `translate${isObject(t) ? `(${t.x},${t.y})` : `${n ? \"X\" : \"Y\"}(${t})`}`;\n  const ratioToCssPercent = t => `${(validFiniteNumber(t) * 100).toFixed(3)}%`;\n  const numberToCssPx = t => `${validFiniteNumber(t)}px`;\n  const C = \"paddingTop\";\n  const H = \"paddingRight\";\n  const z = \"paddingLeft\";\n  const I = \"paddingBottom\";\n  const A = \"marginLeft\";\n  const E = \"marginRight\";\n  const T = \"marginBottom\";\n  const D = \"overflowX\";\n  const k = \"overflowY\";\n  const M = \"width\";\n  const R = \"height\";\n  const P = \"hidden\";\n  const L = {\n    w: 0,\n    h: 0\n  };\n  const getElmWidthHeightProperty = (t, n) => n ? {\n    w: n[`${t}Width`],\n    h: n[`${t}Height`]\n  } : L;\n  const windowSize = t => getElmWidthHeightProperty(\"inner\", t || l);\n  const V = bind(getElmWidthHeightProperty, \"offset\");\n  const U = bind(getElmWidthHeightProperty, \"client\");\n  const B = bind(getElmWidthHeightProperty, \"scroll\");\n  const fractionalSize = t => {\n    const n = parseFloat(style(t, M)) || 0;\n    const o = parseFloat(style(t, R)) || 0;\n    return {\n      w: n - u(n),\n      h: o - u(o)\n    };\n  };\n  const getBoundingClientRect = t => t.getBoundingClientRect();\n  const domRectHasDimensions = t => !!(t && (t[R] || t[M]));\n  const domRectAppeared = (t, n) => {\n    const o = domRectHasDimensions(t);\n    const s = domRectHasDimensions(n);\n    return !s && o;\n  };\n  const animationCurrentTime = () => performance.now();\n  const animateNumber = (t, n, o, s, e) => {\n    let c = 0;\n    const r = animationCurrentTime();\n    const l = i(0, o);\n    const frame = o => {\n      const a = animationCurrentTime();\n      const u = a - r;\n      const f = u >= l;\n      const _ = o ? 1 : 1 - (i(0, r + l - a) / l || 0);\n      const v = (n - t) * (isFunction(e) ? e(_, _ * l, 0, 1, l) : _) + t;\n      const h = f || _ === 1;\n      s && s(v, _, h);\n      c = h ? 0 : d(() => frame());\n    };\n    frame();\n    return t => {\n      _(c);\n      t && frame(t);\n    };\n  };\n  const equal = (t, n, o, s) => {\n    if (t && n) {\n      let e = true;\n      each(o, o => {\n        const c = s ? s(t[o]) : t[o];\n        const r = s ? s(n[o]) : n[o];\n        if (c !== r) {\n          e = false;\n        }\n      });\n      return e;\n    }\n    return false;\n  };\n  const equalWH = (t, n) => equal(t, n, [\"w\", \"h\"]);\n  const equalXY = (t, n) => equal(t, n, [\"x\", \"y\"]);\n  const equalTRBL = (t, n) => equal(t, n, [\"t\", \"r\", \"b\", \"l\"]);\n  const equalBCRWH = (t, n, o) => equal(t, n, [M, R], o && (t => u(t)));\n  let j;\n  const G = \"passive\";\n  const supportPassiveEvents = () => {\n    if (isUndefined(j)) {\n      j = false;\n      try {\n        l.addEventListener(G, noop, Object.defineProperty({}, G, {\n          get() {\n            j = true;\n          }\n        }));\n      } catch (t) {}\n    }\n    return j;\n  };\n  const splitEventNames = t => t.split(\" \");\n  const removeEventListener = (t, n, o, s) => {\n    each(splitEventNames(n), n => {\n      t.removeEventListener(n, o, s);\n    });\n  };\n  const addEventListener = (t, n, o, s) => {\n    var e;\n    const c = supportPassiveEvents();\n    const r = (e = c && s && s.S) != null ? e : c;\n    const l = s && s.$ || false;\n    const i = s && s.O || false;\n    const a = c ? {\n      passive: r,\n      capture: l\n    } : l;\n    return bind(runEachAndClear, splitEventNames(n).map(n => {\n      const s = i ? e => {\n        removeEventListener(t, n, s, l);\n        o(e);\n      } : o;\n      t.addEventListener(n, s, a);\n      return bind(removeEventListener, t, n, s, l);\n    }));\n  };\n  const stopPropagation = t => t.stopPropagation();\n  const preventDefault = t => t.preventDefault();\n  const N = {\n    x: 0,\n    y: 0\n  };\n  const absoluteCoordinates = t => {\n    const n = t && getBoundingClientRect(t);\n    return n ? {\n      x: n.left + l.pageYOffset,\n      y: n.top + l.pageXOffset\n    } : N;\n  };\n  const getRTLCompatibleScrollPosition = (t, n, o) => o ? o.n ? -t : o.i ? n - t : t : t;\n  const getRTLCompatibleScrollBounds = (t, n) => [n ? n.i ? t : 0 : 0, getRTLCompatibleScrollPosition(t, t, n)];\n  const scrollElementTo = (t, n) => {\n    const {\n      x: o,\n      y: s\n    } = isNumber(n) ? {\n      x: n,\n      y: n\n    } : n || {};\n    isNumber(o) && (t.scrollLeft = o);\n    isNumber(s) && (t.scrollTop = s);\n  };\n  const getElmentScroll = t => ({\n    x: t.scrollLeft,\n    y: t.scrollTop\n  });\n  const manageListener = (t, n) => {\n    each(isArray(n) ? n : [n], t);\n  };\n  const createEventListenerHub = t => {\n    const n = new Map();\n    const removeEvent = (t, o) => {\n      if (t) {\n        const s = n.get(t);\n        manageListener(t => {\n          if (s) {\n            s[t ? \"delete\" : \"clear\"](t);\n          }\n        }, o);\n      } else {\n        n.forEach(t => {\n          t.clear();\n        });\n        n.clear();\n      }\n    };\n    const addEvent = (t, o) => {\n      if (isString(t)) {\n        const s = n.get(t) || new Set();\n        n.set(t, s);\n        manageListener(t => {\n          isFunction(t) && s.add(t);\n        }, o);\n        return bind(removeEvent, t, o);\n      }\n      if (isBoolean(o) && o) {\n        removeEvent();\n      }\n      const s = keys(t);\n      const e = [];\n      each(s, n => {\n        const o = t[n];\n        o && push(e, addEvent(n, o));\n      });\n      return bind(runEachAndClear, e);\n    };\n    const triggerEvent = (t, o) => {\n      each(from(n.get(t)), t => {\n        if (o && !isEmptyArray(o)) {\n          t.apply(0, o);\n        } else {\n          t();\n        }\n      });\n    };\n    addEvent(t || {});\n    return [addEvent, removeEvent, triggerEvent];\n  };\n  const opsStringify = t => JSON.stringify(t, (t, n) => {\n    if (isFunction(n)) {\n      throw 0;\n    }\n    return n;\n  });\n  const getPropByPath = (t, n) => t ? `${n}`.split(\".\").reduce((t, n) => t && hasOwnProperty(t, n) ? t[n] : void 0, t) : void 0;\n  const q = {\n    paddingAbsolute: false,\n    showNativeOverlaidScrollbars: false,\n    update: {\n      elementEvents: [[\"img\", \"load\"]],\n      debounce: [0, 33],\n      attributes: null,\n      ignoreMutation: null\n    },\n    overflow: {\n      x: \"scroll\",\n      y: \"scroll\"\n    },\n    scrollbars: {\n      theme: \"os-theme-dark\",\n      visibility: \"auto\",\n      autoHide: \"never\",\n      autoHideDelay: 1300,\n      autoHideSuspend: false,\n      dragScroll: true,\n      clickScroll: false,\n      pointers: [\"mouse\", \"touch\", \"pen\"]\n    }\n  };\n  const getOptionsDiff = (t, n) => {\n    const o = {};\n    const s = concat(keys(n), keys(t));\n    each(s, s => {\n      const e = t[s];\n      const c = n[s];\n      if (isObject(e) && isObject(c)) {\n        assignDeep(o[s] = {}, getOptionsDiff(e, c));\n        if (isEmptyObject(o[s])) {\n          delete o[s];\n        }\n      } else if (hasOwnProperty(n, s) && c !== e) {\n        let t = true;\n        if (isArray(e) || isArray(c)) {\n          try {\n            if (opsStringify(e) === opsStringify(c)) {\n              t = false;\n            }\n          } catch (r) {}\n        }\n        if (t) {\n          o[s] = c;\n        }\n      }\n    });\n    return o;\n  };\n  const createOptionCheck = (t, n, o) => s => [getPropByPath(t, s), o || getPropByPath(n, s) !== void 0];\n  const F = `data-overlayscrollbars`;\n  const W = \"os-environment\";\n  const X = `${W}-flexbox-glue`;\n  const Y = `${X}-max`;\n  const J = `os-scrollbar-hidden`;\n  const K = `${F}-initialize`;\n  const Z = F;\n  const Q = `${Z}-overflow-x`;\n  const tt = `${Z}-overflow-y`;\n  const nt = \"overflowVisible\";\n  const ot = \"scrollbarHidden\";\n  const st = \"scrollbarPressed\";\n  const et = \"updating\";\n  const ct = `${F}-viewport`;\n  const rt = \"arrange\";\n  const lt = \"scrollbarHidden\";\n  const it = nt;\n  const at = `${F}-padding`;\n  const ut = it;\n  const ft = `${F}-content`;\n  const _t = \"os-size-observer\";\n  const dt = `${_t}-appear`;\n  const vt = `${_t}-listener`;\n  const ht = `${vt}-scroll`;\n  const pt = `${vt}-item`;\n  const gt = `${pt}-final`;\n  const bt = \"os-trinsic-observer\";\n  const wt = \"os-no-css-vars\";\n  const yt = \"os-theme-none\";\n  const mt = \"os-scrollbar\";\n  const St = `${mt}-rtl`;\n  const $t = `${mt}-horizontal`;\n  const xt = `${mt}-vertical`;\n  const Ot = `${mt}-track`;\n  const Ct = `${mt}-handle`;\n  const Ht = `${mt}-visible`;\n  const zt = `${mt}-cornerless`;\n  const It = `${mt}-transitionless`;\n  const At = `${mt}-interaction`;\n  const Et = `${mt}-unusable`;\n  const Tt = `${mt}-auto-hide`;\n  const Dt = `${Tt}-hidden`;\n  const kt = `${mt}-wheel`;\n  const Mt = `${Ot}-interactive`;\n  const Rt = `${Ct}-interactive`;\n  const Pt = {};\n  const Lt = {};\n  const addPlugins = t => {\n    each(t, t => each(t, (n, o) => {\n      Pt[o] = t[o];\n    }));\n  };\n  const registerPluginModuleInstances = (t, n, o) => keys(t).map(s => {\n    const {\n      static: e,\n      instance: c\n    } = t[s];\n    const [r, l, i] = o || [];\n    const a = o ? c : e;\n    if (a) {\n      const t = o ? a(r, l, n) : a(n);\n      return (i || Lt)[s] = t;\n    }\n  });\n  const getStaticPluginModuleInstance = t => Lt[t];\n  const Vt = \"__osOptionsValidationPlugin\";\n  const Ut = \"__osSizeObserverPlugin\";\n  const Bt = /* @__PURE__ */(() => ({\n    [Ut]: {\n      static: () => (t, n, o) => {\n        const s = 3333333;\n        const e = \"scroll\";\n        const c = createDOM(`<div class=\"${pt}\" dir=\"ltr\"><div class=\"${pt}\"><div class=\"${gt}\"></div></div><div class=\"${pt}\"><div class=\"${gt}\" style=\"width: 200%; height: 200%\"></div></div></div>`);\n        const r = c[0];\n        const l = r.lastChild;\n        const i = r.firstChild;\n        const a = i == null ? void 0 : i.firstChild;\n        let u = V(r);\n        let f = u;\n        let v = false;\n        let h;\n        const reset = () => {\n          scrollElementTo(i, s);\n          scrollElementTo(l, s);\n        };\n        const onResized = t => {\n          h = 0;\n          if (v) {\n            u = f;\n            n(t === true);\n          }\n        };\n        const onScroll = t => {\n          f = V(r);\n          v = !t || !equalWH(f, u);\n          if (t) {\n            stopPropagation(t);\n            if (v && !h) {\n              _(h);\n              h = d(onResized);\n            }\n          } else {\n            onResized(t === false);\n          }\n          reset();\n        };\n        const p = [appendChildren(t, c), addEventListener(i, e, onScroll), addEventListener(l, e, onScroll)];\n        addClass(t, ht);\n        style(a, {\n          [M]: s,\n          [R]: s\n        });\n        d(reset);\n        return [o ? bind(onScroll, false) : reset, p];\n      }\n    }\n  }))();\n  let jt = 0;\n  const Gt = \"__osScrollbarsHidingPlugin\";\n  const Nt = /* @__PURE__ */(() => ({\n    [Gt]: {\n      static: () => ({\n        C: t => {\n          const {\n            H: n,\n            I: o,\n            A: s\n          } = t;\n          const e = !s && !n && (o.x || o.y);\n          const c = e ? document.createElement(\"style\") : false;\n          if (c) {\n            attr(c, \"id\", `${ct}-${rt}-${jt}`);\n            jt++;\n          }\n          return c;\n        },\n        T: (t, n, o, s, e, c, r) => {\n          const arrangeViewport = (n, c, r, l) => {\n            if (t) {\n              const {\n                D: t\n              } = e;\n              const {\n                k: i,\n                M: a\n              } = n;\n              const {\n                x: u,\n                y: f\n              } = a;\n              const {\n                x: _,\n                y: d\n              } = i;\n              const v = l ? H : z;\n              const h = t[v];\n              const p = t.paddingTop;\n              const g = c.w + r.w;\n              const b = c.h + r.h;\n              const w = {\n                w: d && f ? `${d + g - h}px` : \"\",\n                h: _ && u ? `${_ + b - p}px` : \"\"\n              };\n              if (s) {\n                const {\n                  sheet: t\n                } = s;\n                if (t) {\n                  const {\n                    cssRules: n\n                  } = t;\n                  if (n) {\n                    if (!n.length) {\n                      t.insertRule(`#${attr(s, \"id\")} + [${ct}~='${rt}']::before {}`, 0);\n                    }\n                    const o = n[0].style;\n                    o[M] = w.w;\n                    o[R] = w.h;\n                  }\n                }\n              } else {\n                style(o, {\n                  \"--os-vaw\": w.w,\n                  \"--os-vah\": w.h\n                });\n              }\n            }\n            return t;\n          };\n          const undoViewportArrange = (s, l, i) => {\n            if (t) {\n              const a = i || c(s);\n              const {\n                D: u\n              } = e;\n              const {\n                M: f\n              } = a;\n              const {\n                x: _,\n                y: d\n              } = f;\n              const v = {};\n              const assignProps = t => each(t, t => {\n                v[t] = u[t];\n              });\n              if (_) {\n                assignProps([T, C, I]);\n              }\n              if (d) {\n                assignProps([A, E, z, H]);\n              }\n              const h = style(o, keys(v));\n              attrClass(o, ct, rt);\n              if (!n) {\n                v[R] = \"\";\n              }\n              style(o, v);\n              return [() => {\n                r(a, l, t, h);\n                style(o, h);\n                attrClass(o, ct, rt, true);\n              }, a];\n            }\n            return [noop];\n          };\n          return [arrangeViewport, undoViewportArrange];\n        },\n        R: () => {\n          let t = {\n            w: 0,\n            h: 0\n          };\n          let n = 0;\n          const getWindowDPR = () => {\n            const t = l.screen;\n            const n = t.deviceXDPI || 0;\n            const o = t.logicalXDPI || 1;\n            return l.devicePixelRatio || n / o;\n          };\n          const diffBiggerThanOne = (t, n) => {\n            const o = f(t);\n            const s = f(n);\n            return !(o === s || o + 1 === s || o - 1 === s);\n          };\n          return (o, s) => {\n            const e = windowSize();\n            const c = {\n              w: e.w - t.w,\n              h: e.h - t.h\n            };\n            if (c.w === 0 && c.h === 0) {\n              return;\n            }\n            const r = {\n              w: f(c.w),\n              h: f(c.h)\n            };\n            const l = {\n              w: f(u(e.w / (t.w / 100))),\n              h: f(u(e.h / (t.h / 100)))\n            };\n            const i = getWindowDPR();\n            const a = r.w > 2 && r.h > 2;\n            const _ = !diffBiggerThanOne(l.w, l.h);\n            const d = i !== n && i > 0;\n            const v = a && _ && d;\n            let h;\n            let p;\n            if (v) {\n              [p, h] = s();\n              assignDeep(o.P, p);\n            }\n            t = e;\n            n = i;\n            return h;\n          };\n        }\n      })\n    }\n  }))();\n  const qt = \"__osClickScrollPlugin\";\n  const Ft = /* @__PURE__ */(() => ({\n    [qt]: {\n      static: () => (t, n, o, s, e) => {\n        let c = 0;\n        let r = noop;\n        const animateClickScroll = l => {\n          r = animateNumber(l, l + s * Math.sign(o), 133, (o, l, i) => {\n            t(o);\n            const a = n();\n            const u = a + s;\n            const f = e >= a && e <= u;\n            if (i && !f) {\n              if (c) {\n                animateClickScroll(o);\n              } else {\n                const t = v(() => {\n                  animateClickScroll(o);\n                }, 222);\n                r = () => {\n                  clearTimeout(t);\n                };\n              }\n              c++;\n            }\n          });\n        };\n        animateClickScroll(0);\n        return () => r();\n      }\n    }\n  }))();\n  let Wt;\n  const getNativeScrollbarSize = (t, n, o, s) => {\n    appendChildren(t, n);\n    const e = U(n);\n    const c = V(n);\n    const r = fractionalSize(o);\n    s && removeElements(n);\n    return {\n      x: c.h - e.h + r.h,\n      y: c.w - e.w + r.w\n    };\n  };\n  const getNativeScrollbarsHiding = t => {\n    let n = false;\n    const o = addClass(t, J);\n    try {\n      n = style(t, cssProperty(\"scrollbar-width\")) === \"none\" || l.getComputedStyle(t, \"::-webkit-scrollbar\").getPropertyValue(\"display\") === \"none\";\n    } catch (s) {}\n    o();\n    return n;\n  };\n  const getRtlScrollBehavior = (t, n) => {\n    style(t, {\n      [D]: P,\n      [k]: P,\n      direction: \"rtl\"\n    });\n    scrollElementTo(t, {\n      x: 0\n    });\n    const o = absoluteCoordinates(t);\n    const s = absoluteCoordinates(n);\n    scrollElementTo(t, {\n      x: -999\n    });\n    const e = absoluteCoordinates(n);\n    return {\n      i: o.x === s.x,\n      n: s.x !== e.x\n    };\n  };\n  const getFlexboxGlue = (t, n) => {\n    const o = addClass(t, X);\n    const s = getBoundingClientRect(t);\n    const e = getBoundingClientRect(n);\n    const c = equalBCRWH(e, s, true);\n    const r = addClass(t, Y);\n    const l = getBoundingClientRect(t);\n    const i = getBoundingClientRect(n);\n    const a = equalBCRWH(i, l, true);\n    o();\n    r();\n    return c && a;\n  };\n  const createEnvironment = () => {\n    const {\n      body: t\n    } = document;\n    const n = createDOM(`<div class=\"${W}\"><div></div></div>`);\n    const o = n[0];\n    const s = o.firstChild;\n    const [e,, c] = createEventListenerHub();\n    const [r, i] = createCache({\n      o: getNativeScrollbarSize(t, o, s),\n      u: equalXY\n    }, bind(getNativeScrollbarSize, t, o, s, true));\n    const [a] = i();\n    const u = getNativeScrollbarsHiding(o);\n    const f = {\n      x: a.x === 0,\n      y: a.y === 0\n    };\n    const _ = {\n      elements: {\n        host: null,\n        padding: !u,\n        viewport: t => u && t === t.ownerDocument.body && t,\n        content: false\n      },\n      scrollbars: {\n        slot: true\n      },\n      cancel: {\n        nativeScrollbarsOverlaid: false,\n        body: null\n      }\n    };\n    const d = assignDeep({}, q);\n    const v = bind(assignDeep, {}, d);\n    const h = bind(assignDeep, {}, _);\n    const p = {\n      P: a,\n      I: f,\n      H: u,\n      A: style(o, \"zIndex\") === \"-1\",\n      L: !!$,\n      V: getRtlScrollBehavior(o, s),\n      U: getFlexboxGlue(o, s),\n      B: bind(e, \"r\"),\n      j: h,\n      G: t => assignDeep(_, t) && h(),\n      N: v,\n      q: t => assignDeep(d, t) && v(),\n      F: assignDeep({}, _),\n      W: assignDeep({}, d)\n    };\n    removeAttr(o, \"style\");\n    removeElements(o);\n    l.addEventListener(\"resize\", () => {\n      let t;\n      if (!u && (!f.x || !f.y)) {\n        const n = getStaticPluginModuleInstance(Gt);\n        const o = n ? n.R() : noop;\n        t = !!o(p, r);\n      }\n      c(\"r\", [t]);\n    });\n    return p;\n  };\n  const getEnvironment = () => {\n    if (!Wt) {\n      Wt = createEnvironment();\n    }\n    return Wt;\n  };\n  const resolveInitialization = (t, n) => isFunction(n) ? n.apply(0, t) : n;\n  const staticInitializationElement = (t, n, o, s) => {\n    const e = isUndefined(s) ? o : s;\n    const c = resolveInitialization(t, e);\n    return c || n.apply(0, t);\n  };\n  const dynamicInitializationElement = (t, n, o, s) => {\n    const e = isUndefined(s) ? o : s;\n    const c = resolveInitialization(t, e);\n    return !!c && (isHTMLElement(c) ? c : n.apply(0, t));\n  };\n  const cancelInitialization = (t, n) => {\n    const {\n      nativeScrollbarsOverlaid: o,\n      body: s\n    } = n || {};\n    const {\n      I: e,\n      H: c,\n      j: r\n    } = getEnvironment();\n    const {\n      nativeScrollbarsOverlaid: l,\n      body: i\n    } = r().cancel;\n    const a = o != null ? o : l;\n    const u = isUndefined(s) ? i : s;\n    const f = (e.x || e.y) && a;\n    const _ = t && (isNull(u) ? !c : u);\n    return !!f || !!_;\n  };\n  const Xt = new WeakMap();\n  const addInstance = (t, n) => {\n    Xt.set(t, n);\n  };\n  const removeInstance = t => {\n    Xt.delete(t);\n  };\n  const getInstance = t => Xt.get(t);\n  const createEventContentChange = (t, n, o) => {\n    let s = false;\n    const e = o ? new WeakMap() : false;\n    const destroy = () => {\n      s = true;\n    };\n    const updateElements = c => {\n      if (e && o) {\n        const r = o.map(n => {\n          const [o, s] = n || [];\n          const e = s && o ? (c || find)(o, t) : [];\n          return [e, s];\n        });\n        each(r, o => each(o[0], c => {\n          const r = o[1];\n          const l = e.get(c) || [];\n          const i = t.contains(c);\n          if (i && r) {\n            const t = addEventListener(c, r.trim(), o => {\n              if (s) {\n                t();\n                e.delete(c);\n              } else {\n                n(o);\n              }\n            });\n            e.set(c, push(l, t));\n          } else {\n            runEachAndClear(l);\n            e.delete(c);\n          }\n        }));\n      }\n    };\n    updateElements();\n    return [destroy, updateElements];\n  };\n  const createDOMObserver = (t, n, o, s) => {\n    let e = false;\n    const {\n      X: c,\n      Y: r,\n      J: l,\n      K: i,\n      Z: a,\n      tt: u\n    } = s || {};\n    const f = debounce(() => e && o(true), {\n      v: 33,\n      p: 99\n    });\n    const [_, d] = createEventContentChange(t, f, l);\n    const v = c || [];\n    const h = r || [];\n    const p = concat(v, h);\n    const observerCallback = (e, c) => {\n      if (!isEmptyArray(c)) {\n        const r = a || noop;\n        const l = u || noop;\n        const f = [];\n        const _ = [];\n        let v = false;\n        let p = false;\n        each(c, o => {\n          const {\n            attributeName: e,\n            target: c,\n            type: a,\n            oldValue: u,\n            addedNodes: d,\n            removedNodes: g\n          } = o;\n          const b = a === \"attributes\";\n          const w = a === \"childList\";\n          const y = t === c;\n          const m = b && e;\n          const S = m ? attr(c, e || \"\") : null;\n          const $ = m && u !== S;\n          const x = inArray(h, e) && $;\n          if (n && (w || !y)) {\n            const n = b && $;\n            const a = n && i && is(c, i);\n            const _ = a ? !r(c, e, u, S) : !b || n;\n            const v = _ && !l(o, !!a, t, s);\n            each(d, t => push(f, t));\n            each(g, t => push(f, t));\n            p = p || v;\n          }\n          if (!n && y && $ && !r(c, e, u, S)) {\n            push(_, e);\n            v = v || x;\n          }\n        });\n        d(t => deduplicateArray(f).reduce((n, o) => {\n          push(n, find(t, o));\n          return is(o, t) ? push(n, o) : n;\n        }, []));\n        if (n) {\n          !e && p && o(false);\n          return [false];\n        }\n        if (!isEmptyArray(_) || v) {\n          const t = [deduplicateArray(_), v];\n          !e && o.apply(0, t);\n          return t;\n        }\n      }\n    };\n    const g = new y(bind(observerCallback, false));\n    return [() => {\n      g.observe(t, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: p,\n        subtree: n,\n        childList: n,\n        characterData: n\n      });\n      e = true;\n      return () => {\n        if (e) {\n          _();\n          g.disconnect();\n          e = false;\n        }\n      };\n    }, () => {\n      if (e) {\n        f.m();\n        return observerCallback(true, g.takeRecords());\n      }\n    }];\n  };\n  const createSizeObserver = (t, n, o) => {\n    const s = 3333333;\n    const {\n      nt: e,\n      ot: c\n    } = o || {};\n    const r = getStaticPluginModuleInstance(Ut);\n    const {\n      V: l\n    } = getEnvironment();\n    const i = bind(getDirectionIsRTL, t);\n    const [a] = createCache({\n      o: false,\n      _: true\n    });\n    return () => {\n      const o = [];\n      const u = createDOM(`<div class=\"${_t}\"><div class=\"${vt}\"></div></div>`);\n      const f = u[0];\n      const _ = f.firstChild;\n      const onSizeChangedCallbackProxy = t => {\n        const o = t instanceof ResizeObserverEntry;\n        const c = !o && isArray(t);\n        let r = false;\n        let i = false;\n        let u = true;\n        if (o) {\n          const [n,, o] = a(t.contentRect);\n          const s = domRectHasDimensions(n);\n          const e = domRectAppeared(n, o);\n          const c = !o;\n          i = c || e;\n          r = !i && !s;\n          u = !r;\n        } else if (c) {\n          [, u] = t;\n        } else {\n          i = t === true;\n        }\n        if (e && u) {\n          const n = c ? t[0] : getDirectionIsRTL(f);\n          scrollElementTo(f, {\n            x: getRTLCompatibleScrollPosition(s, s, n && l),\n            y: s\n          });\n        }\n        if (!r) {\n          n({\n            st: c ? t : void 0,\n            et: !c,\n            ot: i\n          });\n        }\n      };\n      if (S) {\n        const t = new S(t => onSizeChangedCallbackProxy(t.pop()));\n        t.observe(_);\n        push(o, () => {\n          t.disconnect();\n        });\n      } else if (r) {\n        const [t, n] = r(_, onSizeChangedCallbackProxy, c);\n        push(o, concat([addClass(f, dt), addEventListener(f, \"animationstart\", t)], n));\n      } else {\n        return noop;\n      }\n      if (e) {\n        const [t] = createCache({\n          o: void 0\n        }, i);\n        push(o, addEventListener(f, \"scroll\", n => {\n          const o = t();\n          const [s, e, c] = o;\n          if (e) {\n            removeClass(_, \"ltr rtl\");\n            addClass(_, s ? \"rtl\" : \"ltr\");\n            onSizeChangedCallbackProxy([!!s, e, c]);\n          }\n          stopPropagation(n);\n        }));\n      }\n      return bind(runEachAndClear, push(o, appendChildren(t, f)));\n    };\n  };\n  const createTrinsicObserver = (t, n) => {\n    let o;\n    const isHeightIntrinsic = t => t.h === 0 || t.isIntersecting || t.intersectionRatio > 0;\n    const s = createDiv(bt);\n    const [e] = createCache({\n      o: false\n    });\n    const triggerOnTrinsicChangedCallback = (t, o) => {\n      if (t) {\n        const s = e(isHeightIntrinsic(t));\n        const [, c] = s;\n        return c && !o && n(s) && [s];\n      }\n    };\n    const intersectionObserverCallback = (t, n) => triggerOnTrinsicChangedCallback(n.pop(), t);\n    return [() => {\n      const n = [];\n      if (m) {\n        o = new m(bind(intersectionObserverCallback, false), {\n          root: t\n        });\n        o.observe(s);\n        push(n, () => {\n          o.disconnect();\n        });\n      } else {\n        const onSizeChanged = () => {\n          const t = V(s);\n          triggerOnTrinsicChangedCallback(t);\n        };\n        push(n, createSizeObserver(s, onSizeChanged)());\n        onSizeChanged();\n      }\n      return bind(runEachAndClear, push(n, appendChildren(t, s)));\n    }, () => o && intersectionObserverCallback(true, o.takeRecords())];\n  };\n  const createObserversSetup = (t, n) => {\n    let o;\n    let s;\n    let e;\n    let c;\n    let r;\n    const {\n      H: l\n    } = getEnvironment();\n    const i = `[${Z}]`;\n    const a = `[${ct}]`;\n    const u = [\"tabindex\"];\n    const f = [\"wrap\", \"cols\", \"rows\"];\n    const _ = [\"id\", \"class\", \"style\", \"open\"];\n    const d = {\n      ct: false,\n      rt: getDirectionIsRTL(t.lt)\n    };\n    const {\n      lt: v,\n      it: h,\n      ut: p,\n      ft: g,\n      _t: b,\n      dt: w,\n      vt: y\n    } = t;\n    const {\n      U: m,\n      B: $\n    } = getEnvironment();\n    const [x] = createCache({\n      u: equalWH,\n      o: {\n        w: 0,\n        h: 0\n      }\n    }, () => {\n      const t = w(it, nt);\n      const n = w(rt, \"\");\n      const o = n && getElmentScroll(h);\n      y(it, nt);\n      y(rt, \"\");\n      y(\"\", et, true);\n      const s = B(p);\n      const e = B(h);\n      const c = fractionalSize(h);\n      y(it, nt, t);\n      y(rt, \"\", n);\n      y(\"\", et);\n      scrollElementTo(h, o);\n      return {\n        w: e.w + s.w + c.w,\n        h: e.h + s.h + c.h\n      };\n    });\n    const O = g ? f : concat(_, f);\n    const C = debounce(n, {\n      v: () => o,\n      p: () => s,\n      g(t, n) {\n        const [o] = t;\n        const [s] = n;\n        return [concat(keys(o), keys(s)).reduce((t, n) => {\n          t[n] = o[n] || s[n];\n          return t;\n        }, {})];\n      }\n    });\n    const updateViewportAttrsFromHost = t => {\n      each(t || u, t => {\n        if (inArray(u, t)) {\n          const n = attr(v, t);\n          if (isString(n)) {\n            attr(h, t, n);\n          } else {\n            removeAttr(h, t);\n          }\n        }\n      });\n    };\n    const onTrinsicChanged = (t, o) => {\n      const [s, e] = t;\n      const c = {\n        ht: e\n      };\n      assignDeep(d, {\n        ct: s\n      });\n      !o && n(c);\n      return c;\n    };\n    const onSizeChanged = ({\n      et: t,\n      st: o,\n      ot: s\n    }) => {\n      const e = t && !s && !o;\n      const c = !e && l ? C : n;\n      const [r, i] = o || [];\n      o && assignDeep(d, {\n        rt: r\n      });\n      c({\n        et: t || s,\n        ot: s,\n        gt: i\n      });\n    };\n    const onContentMutation = (t, o) => {\n      const [, s] = x();\n      const e = {\n        bt: s\n      };\n      const c = t ? n : C;\n      s && !o && c(e);\n      return e;\n    };\n    const onHostMutation = (t, n, o) => {\n      const s = {\n        wt: n\n      };\n      if (n && !o) {\n        C(s);\n      } else if (!b) {\n        updateViewportAttrsFromHost(t);\n      }\n      return s;\n    };\n    const [H, z] = p || !m ? createTrinsicObserver(v, onTrinsicChanged) : [];\n    const I = !b && createSizeObserver(v, onSizeChanged, {\n      ot: true,\n      nt: true\n    });\n    const [A, E] = createDOMObserver(v, false, onHostMutation, {\n      Y: _,\n      X: concat(_, u)\n    });\n    const T = b && S && new S(t => {\n      const n = t[t.length - 1].contentRect;\n      onSizeChanged({\n        et: true,\n        ot: domRectAppeared(n, r)\n      });\n      r = n;\n    });\n    return [() => {\n      updateViewportAttrsFromHost();\n      T && T.observe(v);\n      const t = I && I();\n      const n = H && H();\n      const o = A();\n      const s = $(t => {\n        const [, n] = x();\n        C({\n          yt: t,\n          bt: n\n        });\n      });\n      return () => {\n        T && T.disconnect();\n        t && t();\n        n && n();\n        c && c();\n        o();\n        s();\n      };\n    }, ({\n      St: t,\n      $t: n,\n      xt: r\n    }) => {\n      const l = {};\n      const [u] = t(\"update.ignoreMutation\");\n      const [f, _] = t(\"update.attributes\");\n      const [d, v] = t(\"update.elementEvents\");\n      const [g, w] = t(\"update.debounce\");\n      const y = v || _;\n      const m = n || r;\n      const ignoreMutationFromOptions = t => isFunction(u) && u(t);\n      if (y) {\n        e && e();\n        c && c();\n        const [t, n] = createDOMObserver(p || h, true, onContentMutation, {\n          X: concat(O, f || []),\n          J: d,\n          K: i,\n          tt: (t, n) => {\n            const {\n              target: o,\n              attributeName: s\n            } = t;\n            const e = !n && s && !b ? liesBetween(o, i, a) : false;\n            return e || !!closest(o, `.${mt}`) || !!ignoreMutationFromOptions(t);\n          }\n        });\n        c = t();\n        e = n;\n      }\n      if (w) {\n        C.m();\n        if (isArray(g)) {\n          const t = g[0];\n          const n = g[1];\n          o = isNumber(t) && t;\n          s = isNumber(n) && n;\n        } else if (isNumber(g)) {\n          o = g;\n          s = false;\n        } else {\n          o = false;\n          s = false;\n        }\n      }\n      if (m) {\n        const t = E();\n        const n = z && z();\n        const o = e && e();\n        t && assignDeep(l, onHostMutation(t[0], t[1], m));\n        n && assignDeep(l, onTrinsicChanged(n[0], m));\n        o && assignDeep(l, onContentMutation(o[0], m));\n      }\n      return l;\n    }, d];\n  };\n  const capNumber = (t, n, o) => i(t, a(n, o));\n  const getScrollbarHandleOffsetPercent = (t, n, o) => {\n    const s = u(n);\n    const [e, c] = getRTLCompatibleScrollBounds(s, o);\n    const r = (c - t) / c;\n    const l = t / e;\n    const i = t / c;\n    const a = o ? o.n ? r : o.i ? l : i : i;\n    return capNumber(0, 1, a);\n  };\n  const getScrollbarHandleLengthRatio = (t, n, o) => {\n    if (o) {\n      const t = n ? M : R;\n      const {\n        Ot: s,\n        Ct: e\n      } = o;\n      const c = getBoundingClientRect(e)[t];\n      const r = getBoundingClientRect(s)[t];\n      return capNumber(0, 1, c / r);\n    }\n    const s = n ? \"x\" : \"y\";\n    const {\n      Ht: e,\n      zt: c\n    } = t;\n    const r = c[s];\n    const l = e[s];\n    return capNumber(0, 1, r / (r + l));\n  };\n  const getScrollbarHandleOffsetRatio = (t, n, o, s) => {\n    const e = getScrollbarHandleLengthRatio(t, s, n);\n    return 1 / e * (1 - e) * o;\n  };\n  const createScrollbarsSetupElements = (t, n, o, s) => {\n    const {\n      j: e,\n      A: c\n    } = getEnvironment();\n    const {\n      scrollbars: r\n    } = e();\n    const {\n      slot: l\n    } = r;\n    const {\n      It: a,\n      lt: u,\n      it: f,\n      At: _,\n      Et: d,\n      Tt: h,\n      _t: p\n    } = n;\n    const {\n      scrollbars: g\n    } = _ ? {} : t;\n    const {\n      slot: b\n    } = g || {};\n    const w = new Map();\n    const initScrollTimeline = t => $ && new $({\n      source: d,\n      axis: t\n    });\n    const y = initScrollTimeline(\"x\");\n    const m = initScrollTimeline(\"y\");\n    const S = dynamicInitializationElement([a, u, f], () => p && h ? a : u, l, b);\n    const doRefreshScrollbarOffset = t => p && !h && parent(t) === f;\n    const cancelElementAnimations = t => {\n      w.forEach((n, o) => {\n        const s = t ? inArray(isArray(t) ? t : [t], o) : true;\n        if (s) {\n          (n || []).forEach(t => {\n            t && t.cancel();\n          });\n          w.delete(o);\n        }\n      });\n    };\n    const scrollbarStructureAddRemoveClass = (t, n, o) => {\n      const s = o ? addClass : removeClass;\n      each(t, t => {\n        s(t.Dt, n);\n      });\n    };\n    const scrollbarStyle = (t, n) => {\n      each(t, t => {\n        const [o, s] = n(t);\n        style(o, s);\n      });\n    };\n    const animateElement = (t, n, o, s) => n && t.animate(o, {\n      timeline: n,\n      composite: s\n    });\n    const scrollbarStructureRefreshHandleLength = (t, n) => {\n      scrollbarStyle(t, t => {\n        const {\n          Ct: s\n        } = t;\n        return [s, {\n          [n ? M : R]: ratioToCssPercent(getScrollbarHandleLengthRatio(o, n))\n        }];\n      });\n    };\n    const scrollbarStructureRefreshHandleOffset = (t, n) => {\n      if (y && m) {\n        t.forEach(t => {\n          const {\n            Dt: s,\n            Ct: e\n          } = t;\n          const c = bind(getScrollbarHandleOffsetRatio, o, t);\n          const r = n && getDirectionIsRTL(s);\n          const l = c(r ? 1 : 0, n);\n          const i = c(r ? 0 : 1, n);\n          cancelElementAnimations(e);\n          w.set(e, [animateElement(e, n ? y : m, assignDeep({\n            transform: [getTrasformTranslateValue(ratioToCssPercent(l), n), getTrasformTranslateValue(ratioToCssPercent(i), n)]\n          }, r ? {\n            clear: [\"left\"]\n          } : {}))]);\n        });\n      } else {\n        scrollbarStyle(t, t => {\n          const {\n            Ct: s,\n            Dt: e\n          } = t;\n          const {\n            V: c\n          } = getEnvironment();\n          const r = n ? \"x\" : \"y\";\n          const {\n            Ht: l\n          } = o;\n          const i = getDirectionIsRTL(e);\n          const a = getScrollbarHandleOffsetRatio(o, t, getScrollbarHandleOffsetPercent(getElmentScroll(d)[r], l[r], n && i && c), n);\n          return [s, {\n            transform: getTrasformTranslateValue(ratioToCssPercent(a), n)\n          }];\n        });\n      }\n    };\n    const styleScrollbarPosition = t => {\n      const {\n        Dt: n\n      } = t;\n      const o = doRefreshScrollbarOffset(n) && n;\n      const {\n        x: s,\n        y: e\n      } = getElmentScroll(d);\n      return [o, {\n        transform: o ? getTrasformTranslateValue({\n          x: numberToCssPx(s),\n          y: numberToCssPx(e)\n        }) : \"\"\n      }];\n    };\n    const animateScrollbarOffset = (t, n, o, s) => animateElement(t, n, {\n      transform: [getTrasformTranslateValue(numberToCssPx(0), s), getTrasformTranslateValue(numberToCssPx(i(0, o - .5)), s)]\n    }, \"add\");\n    const x = [];\n    const O = [];\n    const C = [];\n    const scrollbarsAddRemoveClass = (t, n, o) => {\n      const s = isBoolean(o);\n      const e = s ? o : true;\n      const c = s ? !o : true;\n      e && scrollbarStructureAddRemoveClass(O, t, n);\n      c && scrollbarStructureAddRemoveClass(C, t, n);\n    };\n    const refreshScrollbarsHandleLength = () => {\n      scrollbarStructureRefreshHandleLength(O, true);\n      scrollbarStructureRefreshHandleLength(C);\n    };\n    const refreshScrollbarsHandleOffset = () => {\n      scrollbarStructureRefreshHandleOffset(O, true);\n      scrollbarStructureRefreshHandleOffset(C);\n    };\n    const refreshScrollbarsScrollbarOffset = () => {\n      if (p) {\n        if (m && m) {\n          const {\n            Ht: t\n          } = o;\n          concat(C, O).forEach(({\n            Dt: n\n          }) => {\n            cancelElementAnimations(n);\n            if (doRefreshScrollbarOffset(n)) {\n              w.set(n, [animateScrollbarOffset(n, y, t.x, true), animateScrollbarOffset(n, m, t.y)]);\n            }\n          });\n        } else {\n          scrollbarStyle(O, styleScrollbarPosition);\n          scrollbarStyle(C, styleScrollbarPosition);\n        }\n      }\n    };\n    const generateScrollbarDOM = t => {\n      const n = t ? $t : xt;\n      const o = t ? O : C;\n      const e = isEmptyArray(o) ? It : \"\";\n      const r = createDiv(`${mt} ${n} ${e}`);\n      const l = createDiv(Ot);\n      const i = createDiv(Ct);\n      const a = {\n        Dt: r,\n        Ot: l,\n        Ct: i\n      };\n      if (!c) {\n        addClass(r, wt);\n      }\n      push(o, a);\n      push(x, [appendChildren(r, l), appendChildren(l, i), bind(removeElements, r), cancelElementAnimations, s(a, scrollbarsAddRemoveClass, scrollbarStructureRefreshHandleOffset, t)]);\n      return a;\n    };\n    const H = bind(generateScrollbarDOM, true);\n    const z = bind(generateScrollbarDOM, false);\n    const appendElements = () => {\n      appendChildren(S, O[0].Dt);\n      appendChildren(S, C[0].Dt);\n      v(() => {\n        scrollbarsAddRemoveClass(It);\n      }, 300);\n      return bind(runEachAndClear, x);\n    };\n    H();\n    z();\n    return [{\n      kt: refreshScrollbarsHandleLength,\n      Mt: refreshScrollbarsHandleOffset,\n      Rt: refreshScrollbarsScrollbarOffset,\n      Pt: scrollbarsAddRemoveClass,\n      Lt: {\n        L: y,\n        Vt: O,\n        Ut: H,\n        Bt: bind(scrollbarStyle, O)\n      },\n      jt: {\n        L: m,\n        Vt: C,\n        Ut: z,\n        Bt: bind(scrollbarStyle, C)\n      }\n    }, appendElements];\n  };\n  const createScrollbarsSetupEvents = (t, n, o) => {\n    const {\n      lt: s,\n      Et: e,\n      Gt: c\n    } = n;\n    return (n, r, l, i) => {\n      const {\n        Dt: a,\n        Ot: f,\n        Ct: _\n      } = n;\n      const [d, v] = selfClearTimeout(333);\n      const [h, p] = selfClearTimeout();\n      const g = bind(l, [n], i);\n      const b = !!e.scrollBy;\n      const w = `client${i ? \"X\" : \"Y\"}`;\n      const y = i ? M : R;\n      const m = i ? \"left\" : \"top\";\n      const S = i ? \"w\" : \"h\";\n      const $ = i ? \"x\" : \"y\";\n      const isAffectingTransition = t => t.propertyName.indexOf(y) > -1;\n      const createInteractiveScrollEvents = () => {\n        const n = \"pointerup pointerleave pointercancel lostpointercapture\";\n        const createRelativeHandleMove = (t, n) => s => {\n          const {\n            Ht: c\n          } = o;\n          const r = V(f)[S] - V(_)[S];\n          const l = n * s / r;\n          const i = l * c[$];\n          scrollElementTo(e, {\n            [$]: t + i\n          });\n        };\n        return addEventListener(f, \"pointerdown\", o => {\n          const r = closest(o.target, `.${Ct}`) === _;\n          const l = r ? _ : f;\n          const i = t.scrollbars;\n          const {\n            button: a,\n            isPrimary: d,\n            pointerType: v\n          } = o;\n          const {\n            pointers: h\n          } = i;\n          const p = a === 0 && d && i[r ? \"dragScroll\" : \"clickScroll\"] && (h || []).includes(v);\n          attrClass(s, Z, st, true);\n          if (p) {\n            const t = !r && o.shiftKey;\n            const i = bind(getBoundingClientRect, _);\n            const a = bind(getBoundingClientRect, f);\n            const getHandleOffset = (t, n) => (t || i())[m] - (n || a())[m];\n            const d = u(getBoundingClientRect(e)[y]) / V(e)[S] || 1;\n            const v = createRelativeHandleMove(getElmentScroll(e)[$] || 0, 1 / d);\n            const h = o[w];\n            const p = i();\n            const g = a();\n            const b = p[y];\n            const x = getHandleOffset(p, g) + b / 2;\n            const O = h - g[m];\n            const C = r ? 0 : O - x;\n            const releasePointerCapture = t => {\n              runEachAndClear(H);\n              l.releasePointerCapture(t.pointerId);\n            };\n            const H = [bind(attrClass, s, Z, st), addEventListener(c, n, releasePointerCapture), addEventListener(c, \"selectstart\", t => preventDefault(t), {\n              S: false\n            }), addEventListener(f, n, releasePointerCapture), addEventListener(f, \"pointermove\", n => {\n              const o = n[w] - h;\n              if (r || t) {\n                v(C + o);\n              }\n            })];\n            if (t) {\n              v(C);\n            } else if (!r) {\n              const t = getStaticPluginModuleInstance(qt);\n              t && push(H, t(v, getHandleOffset, C, b, O));\n            }\n            l.setPointerCapture(o.pointerId);\n          }\n        });\n      };\n      let x = true;\n      return bind(runEachAndClear, [addEventListener(a, \"pointerenter\", () => {\n        r(At, true);\n      }), addEventListener(a, \"pointerleave pointercancel\", () => {\n        r(At, false);\n      }), addEventListener(a, \"wheel\", t => {\n        const {\n          deltaX: n,\n          deltaY: o,\n          deltaMode: c\n        } = t;\n        if (b && x && c === 0 && parent(a) === s) {\n          e.scrollBy({\n            left: n,\n            top: o,\n            behavior: \"smooth\"\n          });\n        }\n        x = false;\n        r(kt, true);\n        d(() => {\n          x = true;\n          r(kt);\n        });\n        preventDefault(t);\n      }, {\n        S: false,\n        $: true\n      }), addEventListener(_, \"transitionstart\", t => {\n        if (isAffectingTransition(t)) {\n          const animateHandleOffset = () => {\n            g();\n            h(animateHandleOffset);\n          };\n          animateHandleOffset();\n        }\n      }), addEventListener(_, \"transitionend transitioncancel\", t => {\n        if (isAffectingTransition(t)) {\n          p();\n          g();\n        }\n      }), addEventListener(a, \"mousedown\", bind(addEventListener, c, \"click\", stopPropagation, {\n        O: true,\n        $: true\n      }), {\n        $: true\n      }), createInteractiveScrollEvents(), v, p]);\n    };\n  };\n  const createScrollbarsSetup = (t, n, o, s, e, c) => {\n    let r;\n    let l;\n    let i;\n    let a;\n    let u;\n    let f = noop;\n    let _ = 0;\n    const [d, v] = selfClearTimeout();\n    const [h, p] = selfClearTimeout();\n    const [g, b] = selfClearTimeout(100);\n    const [w, y] = selfClearTimeout(100);\n    const [m, S] = selfClearTimeout(100);\n    const [$, x] = selfClearTimeout(() => _);\n    const [O, C] = createScrollbarsSetupElements(t, e, s, createScrollbarsSetupEvents(n, e, s));\n    const {\n      lt: H,\n      Nt: z,\n      Tt: I\n    } = e;\n    const {\n      Pt: A,\n      kt: E,\n      Mt: T,\n      Rt: D\n    } = O;\n    const manageAutoHideSuspension = t => {\n      A(Tt, t, true);\n      A(Tt, t, false);\n    };\n    const manageScrollbarsAutoHide = (t, n) => {\n      x();\n      if (t) {\n        A(Dt);\n      } else {\n        const t = bind(A, Dt, true);\n        if (_ > 0 && !n) {\n          $(t);\n        } else {\n          t();\n        }\n      }\n    };\n    const isHoverablePointerType = t => t.pointerType === \"mouse\";\n    const onHostMouseEnter = t => {\n      if (isHoverablePointerType(t)) {\n        a = l;\n        a && manageScrollbarsAutoHide(true);\n      }\n    };\n    const k = [b, x, y, S, p, v, () => f(), addEventListener(H, \"pointerover\", onHostMouseEnter, {\n      O: true\n    }), addEventListener(H, \"pointerenter\", onHostMouseEnter), addEventListener(H, \"pointerleave\", t => {\n      if (isHoverablePointerType(t)) {\n        a = false;\n        l && manageScrollbarsAutoHide(false);\n      }\n    }), addEventListener(H, \"pointermove\", t => {\n      isHoverablePointerType(t) && r && d(() => {\n        b();\n        manageScrollbarsAutoHide(true);\n        w(() => {\n          r && manageScrollbarsAutoHide(false);\n        });\n      });\n    }), addEventListener(z, \"scroll\", t => {\n      h(() => {\n        T();\n        i && manageScrollbarsAutoHide(true);\n        g(() => {\n          i && !a && manageScrollbarsAutoHide(false);\n        });\n      });\n      c(t);\n      D();\n    })];\n    return [() => bind(runEachAndClear, push(k, C())), ({\n      St: t,\n      xt: n,\n      qt: e,\n      Ft: c\n    }) => {\n      const {\n        Wt: a,\n        Xt: d,\n        Yt: v\n      } = c || {};\n      const {\n        gt: h,\n        ot: p\n      } = e || {};\n      const {\n        rt: g\n      } = o;\n      const {\n        I: b\n      } = getEnvironment();\n      const {\n        Ht: w,\n        Jt: y,\n        Kt: S\n      } = s;\n      const [$, x] = t(\"showNativeOverlaidScrollbars\");\n      const [O, C] = t(\"scrollbars.theme\");\n      const [H, k] = t(\"scrollbars.visibility\");\n      const [M, R] = t(\"scrollbars.autoHide\");\n      const [P, L] = t(\"scrollbars.autoHideSuspend\");\n      const [V] = t(\"scrollbars.autoHideDelay\");\n      const [U, B] = t(\"scrollbars.dragScroll\");\n      const [j, G] = t(\"scrollbars.clickScroll\");\n      const N = p && !n;\n      const q = S.x || S.y;\n      const F = a || d || h || n;\n      const W = v || k;\n      const X = $ && b.x && b.y;\n      const setScrollbarVisibility = (t, n) => {\n        const o = H === \"visible\" || H === \"auto\" && t === \"scroll\";\n        A(Ht, o, n);\n        return o;\n      };\n      _ = V;\n      if (N) {\n        if (P && q) {\n          manageAutoHideSuspension(false);\n          f();\n          m(() => {\n            f = addEventListener(z, \"scroll\", bind(manageAutoHideSuspension, true), {\n              O: true\n            });\n          });\n        } else {\n          manageAutoHideSuspension(true);\n        }\n      }\n      if (x) {\n        A(yt, X);\n      }\n      if (C) {\n        A(u);\n        A(O, true);\n        u = O;\n      }\n      if (L && !P) {\n        manageAutoHideSuspension(true);\n      }\n      if (R) {\n        r = M === \"move\";\n        l = M === \"leave\";\n        i = M !== \"never\";\n        manageScrollbarsAutoHide(!i, true);\n      }\n      if (B) {\n        A(Rt, U);\n      }\n      if (G) {\n        A(Mt, j);\n      }\n      if (W) {\n        const t = setScrollbarVisibility(y.x, true);\n        const n = setScrollbarVisibility(y.y, false);\n        const o = t && n;\n        A(zt, !o);\n      }\n      if (F) {\n        E();\n        T();\n        D();\n        A(Et, !w.x, true);\n        A(Et, !w.y, false);\n        A(St, g && !I);\n      }\n    }, {}, O];\n  };\n  const createStructureSetupElements = t => {\n    const n = getEnvironment();\n    const {\n      j: o,\n      H: s\n    } = n;\n    const e = getStaticPluginModuleInstance(Gt);\n    const c = e && e.C;\n    const {\n      elements: r\n    } = o();\n    const {\n      host: l,\n      padding: i,\n      viewport: a,\n      content: u\n    } = r;\n    const f = isHTMLElement(t);\n    const _ = f ? {} : t;\n    const {\n      elements: d\n    } = _;\n    const {\n      host: v,\n      padding: h,\n      viewport: p,\n      content: g\n    } = d || {};\n    const b = f ? t : _.target;\n    const w = is(b, \"textarea\");\n    const y = b.ownerDocument;\n    const m = y.documentElement;\n    const S = b === y.body;\n    const $ = y.defaultView;\n    const x = bind(staticInitializationElement, [b]);\n    const O = bind(dynamicInitializationElement, [b]);\n    const C = bind(resolveInitialization, [b]);\n    const H = bind(createDiv, \"\");\n    const z = bind(x, H, a);\n    const I = bind(O, H, u);\n    const A = z(p);\n    const E = A === b;\n    const T = E && S;\n    const D = !E && I(g);\n    const k = !E && isHTMLElement(A) && A === D;\n    const M = k && !!C(u);\n    const R = M ? z() : A;\n    const P = M ? D : I();\n    const L = k ? R : A;\n    const V = T ? m : L;\n    const U = w ? x(H, l, v) : b;\n    const B = T ? V : U;\n    const j = k ? P : D;\n    const G = y.activeElement;\n    const N = !E && $.top === $ && G === b;\n    const q = {\n      It: b,\n      lt: B,\n      it: V,\n      Zt: !E && O(H, i, h),\n      ut: j,\n      Qt: !E && !s && c && c(n),\n      Et: T ? m : V,\n      Nt: T ? y : V,\n      tn: $,\n      Gt: y,\n      ft: w,\n      Tt: S,\n      At: f,\n      _t: E,\n      nn: k,\n      dt: (t, n) => hasAttrClass(V, E ? Z : ct, E ? n : t),\n      vt: (t, n, o) => attrClass(V, E ? Z : ct, E ? n : t, o)\n    };\n    const F = keys(q).reduce((t, n) => {\n      const o = q[n];\n      return push(t, o && isHTMLElement(o) && !parent(o) ? o : false);\n    }, []);\n    const elementIsGenerated = t => t ? inArray(F, t) : null;\n    const {\n      It: W,\n      lt: X,\n      Zt: Y,\n      it: nt,\n      ut: ot,\n      Qt: st\n    } = q;\n    const et = [() => {\n      removeAttr(X, Z);\n      removeAttr(X, K);\n      removeAttr(W, K);\n      if (S) {\n        removeAttr(m, Z);\n        removeAttr(m, K);\n      }\n    }];\n    const rt = w && elementIsGenerated(X);\n    let it = w ? W : contents([ot, nt, Y, X, W].find(t => elementIsGenerated(t) === false));\n    const ut = T ? W : ot || nt;\n    const _t = bind(runEachAndClear, et);\n    const appendElements = () => {\n      attr(X, Z, E ? \"viewport\" : \"host\");\n      attr(Y, at, \"\");\n      attr(ot, ft, \"\");\n      if (!E) {\n        attr(nt, ct, \"\");\n      }\n      const t = S && !E ? addClass(parent(b), J) : noop;\n      const unwrap = t => {\n        appendChildren(parent(t), contents(t));\n        removeElements(t);\n      };\n      if (rt) {\n        insertAfter(W, X);\n        push(et, () => {\n          insertAfter(X, W);\n          removeElements(X);\n        });\n      }\n      appendChildren(ut, it);\n      appendChildren(X, Y);\n      appendChildren(Y || X, !E && nt);\n      appendChildren(nt, ot);\n      push(et, () => {\n        t();\n        removeAttr(Y, at);\n        removeAttr(ot, ft);\n        removeAttr(nt, Q);\n        removeAttr(nt, tt);\n        removeAttr(nt, ct);\n        elementIsGenerated(ot) && unwrap(ot);\n        elementIsGenerated(nt) && unwrap(nt);\n        elementIsGenerated(Y) && unwrap(Y);\n      });\n      if (s && !E) {\n        attrClass(nt, ct, lt, true);\n        push(et, bind(removeAttr, nt, ct));\n      }\n      if (st) {\n        insertBefore(nt, st);\n        push(et, bind(removeElements, st));\n      }\n      if (N) {\n        const t = \"tabindex\";\n        const n = attr(nt, t);\n        attr(nt, t, \"-1\");\n        nt.focus();\n        const revertViewportTabIndex = () => n ? attr(nt, t, n) : removeAttr(nt, t);\n        const o = addEventListener(y, \"pointerdown keydown\", () => {\n          revertViewportTabIndex();\n          o();\n        });\n        push(et, [revertViewportTabIndex, o]);\n      } else if (G && G.focus) {\n        G.focus();\n      }\n      it = 0;\n      return _t;\n    };\n    return [q, appendElements, _t];\n  };\n  const createTrinsicUpdateSegment = ({\n    ut: t\n  }) => ({\n    qt: n,\n    sn: o,\n    xt: s\n  }) => {\n    const {\n      U: e\n    } = getEnvironment();\n    const {\n      ht: c\n    } = n || {};\n    const {\n      ct: r\n    } = o;\n    const l = (t || !e) && (c || s);\n    if (l) {\n      style(t, {\n        [R]: r ? \"\" : \"100%\"\n      });\n    }\n  };\n  const createPaddingUpdateSegment = ({\n    lt: t,\n    Zt: n,\n    it: o,\n    _t: s\n  }, e) => {\n    const [c, r] = createCache({\n      u: equalTRBL,\n      o: topRightBottomLeft()\n    }, bind(topRightBottomLeft, t, \"padding\", \"\"));\n    return ({\n      St: t,\n      qt: l,\n      sn: i,\n      xt: a\n    }) => {\n      let [u, f] = r(a);\n      const {\n        H: _,\n        U: d\n      } = getEnvironment();\n      const {\n        et: v,\n        bt: h,\n        gt: p\n      } = l || {};\n      const {\n        rt: g\n      } = i;\n      const [b, w] = t(\"paddingAbsolute\");\n      const y = a || !d && h;\n      if (v || f || y) {\n        [u, f] = c(a);\n      }\n      const m = !s && (w || p || f);\n      if (m) {\n        const t = !b || !n && !_;\n        const s = u.r + u.l;\n        const c = u.t + u.b;\n        const r = {\n          [E]: t && !g ? -s : 0,\n          [T]: t ? -c : 0,\n          [A]: t && g ? -s : 0,\n          top: t ? -u.t : 0,\n          right: t ? g ? -u.r : \"auto\" : 0,\n          left: t ? g ? \"auto\" : -u.l : 0,\n          [M]: t ? `calc(100% + ${s}px)` : \"\"\n        };\n        const l = {\n          [C]: t ? u.t : 0,\n          [H]: t ? u.r : 0,\n          [I]: t ? u.b : 0,\n          [z]: t ? u.l : 0\n        };\n        style(n || o, r);\n        style(o, l);\n        assignDeep(e, {\n          Zt: u,\n          en: !t,\n          D: n ? l : assignDeep({}, r, l)\n        });\n      }\n      return {\n        cn: m\n      };\n    };\n  };\n  const createOverflowUpdateSegment = ({\n    lt: t,\n    Zt: n,\n    it: o,\n    Qt: s,\n    _t: e,\n    vt: c,\n    Tt: r,\n    tn: a\n  }, u) => {\n    const f = bind(i, 0);\n    const _ = \"visible\";\n    const d = 42;\n    const v = {\n      u: equalWH,\n      o: {\n        w: 0,\n        h: 0\n      }\n    };\n    const h = {\n      u: equalXY,\n      o: {\n        x: P,\n        y: P\n      }\n    };\n    const getOverflowAmount = (t, n) => {\n      const o = l.devicePixelRatio % 1 !== 0 ? 1 : 0;\n      const s = {\n        w: f(t.w - n.w),\n        h: f(t.h - n.h)\n      };\n      return {\n        w: s.w > o ? s.w : 0,\n        h: s.h > o ? s.h : 0\n      };\n    };\n    const overflowIsVisible = t => t.indexOf(_) === 0;\n    const {\n      P: p,\n      U: g,\n      H: b,\n      I: w\n    } = getEnvironment();\n    const y = getStaticPluginModuleInstance(Gt);\n    const m = !e && !b && (w.x || w.y);\n    const S = r && e;\n    const [$, x] = createCache(v, bind(fractionalSize, o));\n    const [O, C] = createCache(v, bind(B, o));\n    const [L, V] = createCache(v);\n    const [j, G] = createCache(v);\n    const [N] = createCache(h);\n    const fixFlexboxGlue = (n, s) => {\n      style(o, {\n        [R]: \"\"\n      });\n      if (s) {\n        const {\n          en: s,\n          Zt: e\n        } = u;\n        const {\n          rn: c,\n          k: r\n        } = n;\n        const l = fractionalSize(t);\n        const i = U(t);\n        const a = style(o, \"boxSizing\") === \"content-box\";\n        const f = s || a ? e.b + e.t : 0;\n        const _ = !(w.x && a);\n        style(o, {\n          [R]: i.h + l.h + (c.x && _ ? r.x : 0) - f\n        });\n      }\n    };\n    const getViewportOverflowState = (t, n) => {\n      const s = !b && !t ? d : 0;\n      const getStatePerAxis = (t, e, c) => {\n        const r = style(o, t);\n        const l = n ? n[t] : r;\n        const i = l === \"scroll\";\n        const a = e ? s : c;\n        const u = i && !b ? a : 0;\n        const f = e && !!s;\n        return [r, i, u, f];\n      };\n      const [e, c, r, l] = getStatePerAxis(D, w.x, p.x);\n      const [i, a, u, f] = getStatePerAxis(k, w.y, p.y);\n      return {\n        Jt: {\n          x: e,\n          y: i\n        },\n        rn: {\n          x: c,\n          y: a\n        },\n        k: {\n          x: r,\n          y: u\n        },\n        M: {\n          x: l,\n          y: f\n        }\n      };\n    };\n    const setViewportOverflowState = (t, n, o, s) => {\n      const setAxisOverflowStyle = (t, n) => {\n        const o = overflowIsVisible(t);\n        const s = n && o && t.replace(`${_}-`, \"\") || \"\";\n        return [n && !o ? t : \"\", overflowIsVisible(s) ? \"hidden\" : s];\n      };\n      const [e, c] = setAxisOverflowStyle(o.x, n.x);\n      const [r, l] = setAxisOverflowStyle(o.y, n.y);\n      s[D] = c && r ? c : e;\n      s[k] = l && e ? l : r;\n      return getViewportOverflowState(t, s);\n    };\n    const hideNativeScrollbars = (t, n, o, s) => {\n      const {\n        k: e,\n        M: c\n      } = t;\n      const {\n        x: r,\n        y: l\n      } = c;\n      const {\n        x: i,\n        y: a\n      } = e;\n      const {\n        D: f\n      } = u;\n      const _ = n ? A : E;\n      const d = n ? z : H;\n      const v = f[_];\n      const h = f[T];\n      const p = f[d];\n      const g = f[I];\n      s[M] = `calc(100% + ${a + v * -1}px)`;\n      s[_] = -a + v;\n      s[T] = -i + h;\n      if (o) {\n        s[d] = p + (l ? a : 0);\n        s[I] = g + (r ? i : 0);\n      }\n    };\n    const [q, F] = y ? y.T(m, g, o, s, u, getViewportOverflowState, hideNativeScrollbars) : [() => m, () => [noop]];\n    return ({\n      St: s,\n      qt: r,\n      sn: l,\n      xt: _\n    }, {\n      cn: d\n    }) => {\n      const {\n        et: v,\n        wt: h,\n        bt: p,\n        ht: y,\n        gt: m,\n        yt: H\n      } = r || {};\n      const {\n        ct: z,\n        rt: I\n      } = l;\n      const [R, P] = s(\"showNativeOverlaidScrollbars\");\n      const [W, X] = s(\"overflow\");\n      const Y = R && w.x && w.y;\n      const J = !e && !g && (v || p || h || P || y);\n      const K = v || d || p || m || H || P;\n      const st = overflowIsVisible(W.x);\n      const et = overflowIsVisible(W.y);\n      const rt = st || et;\n      let ft = x(_);\n      let _t = C(_);\n      let dt = V(_);\n      let vt = G(_);\n      let ht;\n      if (P && b) {\n        c(lt, ot, !Y);\n      }\n      if (J) {\n        ht = getViewportOverflowState(Y);\n        fixFlexboxGlue(ht, z);\n      }\n      if (K) {\n        if (rt) {\n          c(it, nt, false);\n        }\n        const [t, n] = F(Y, I, ht);\n        const [s, e] = ft = $(_);\n        const [r, l] = _t = O(_);\n        const u = U(o);\n        let d = r;\n        let v = u;\n        t();\n        if ((l || e || P) && n && !Y && q(n, r, s, I)) {\n          v = U(o);\n          d = B(o);\n        }\n        const h = windowSize(a);\n        const p = {\n          w: f(i(r.w, d.w) + s.w),\n          h: f(i(r.h, d.h) + s.h)\n        };\n        const g = {\n          w: f((S ? h.w : v.w + f(u.w - r.w)) + s.w),\n          h: f((S ? h.h : v.h + f(u.h - r.h)) + s.h)\n        };\n        vt = j(g);\n        dt = L(getOverflowAmount(p, g), _);\n      }\n      const [pt, gt] = vt;\n      const [bt, wt] = dt;\n      const [yt, mt] = _t;\n      const [St, $t] = ft;\n      const xt = {\n        x: bt.w > 0,\n        y: bt.h > 0\n      };\n      const Ot = st && et && (xt.x || xt.y) || st && xt.x && !xt.y || et && xt.y && !xt.x;\n      const Ct = d || m || H || $t || mt || gt || wt || X || P || J || K;\n      if (Ct) {\n        const n = {\n          [E]: 0,\n          [T]: 0,\n          [A]: 0,\n          [M]: \"\",\n          [D]: \"\",\n          [k]: \"\"\n        };\n        const s = setViewportOverflowState(Y, xt, W, n);\n        const c = q(s, yt, St, I);\n        if (!e) {\n          hideNativeScrollbars(s, I, c, n);\n        }\n        if (J) {\n          fixFlexboxGlue(s, z);\n        }\n        if (e) {\n          attr(t, Q, n[D]);\n          attr(t, tt, n[k]);\n        } else {\n          style(o, n);\n        }\n      }\n      attrClass(t, Z, nt, Ot);\n      attrClass(n, at, ut, Ot);\n      if (!e) {\n        attrClass(o, ct, it, rt);\n      }\n      const [Ht, zt] = N(getViewportOverflowState(Y).Jt);\n      assignDeep(u, {\n        Jt: Ht,\n        zt: {\n          x: pt.w,\n          y: pt.h\n        },\n        Ht: {\n          x: bt.w,\n          y: bt.h\n        },\n        Kt: xt\n      });\n      return {\n        Yt: zt,\n        Wt: gt,\n        Xt: wt\n      };\n    };\n  };\n  const createStructureSetup = t => {\n    const [n, o, s] = createStructureSetupElements(t);\n    const e = {\n      Zt: {\n        t: 0,\n        r: 0,\n        b: 0,\n        l: 0\n      },\n      en: false,\n      D: {\n        [E]: 0,\n        [T]: 0,\n        [A]: 0,\n        [C]: 0,\n        [H]: 0,\n        [I]: 0,\n        [z]: 0\n      },\n      zt: {\n        x: 0,\n        y: 0\n      },\n      Ht: {\n        x: 0,\n        y: 0\n      },\n      Jt: {\n        x: P,\n        y: P\n      },\n      Kt: {\n        x: false,\n        y: false\n      }\n    };\n    const {\n      It: c,\n      it: r,\n      vt: l,\n      _t: i\n    } = n;\n    const {\n      H: a,\n      I: u,\n      U: f\n    } = getEnvironment();\n    const _ = !a && (u.x || u.y);\n    const d = [createTrinsicUpdateSegment(n), createPaddingUpdateSegment(n, e), createOverflowUpdateSegment(n, e)];\n    return [o, t => {\n      const n = {};\n      const o = _ || !f;\n      const s = o && getElmentScroll(r);\n      l(\"\", et, true);\n      each(d, o => {\n        assignDeep(n, o(t, n) || {});\n      });\n      l(\"\", et);\n      scrollElementTo(r, s);\n      !i && scrollElementTo(c, 0);\n      return n;\n    }, e, n, s];\n  };\n  const createSetups = (t, n, o, s) => {\n    const [e, c, r, l, i] = createStructureSetup(t);\n    const [a, u, f] = createObserversSetup(l, t => {\n      update({}, t);\n    });\n    const [_, d,, v] = createScrollbarsSetup(t, n, f, r, l, s);\n    const updateHintsAreTruthy = t => keys(t).some(n => !!t[n]);\n    const update = (t, s) => {\n      const {\n        ln: e,\n        xt: r,\n        $t: l,\n        an: i\n      } = t;\n      const a = e || {};\n      const _ = !!r;\n      const v = {\n        St: createOptionCheck(n, a, _),\n        ln: a,\n        xt: _\n      };\n      if (i) {\n        d(v);\n        return false;\n      }\n      const h = s || u(assignDeep({}, v, {\n        $t: l\n      }));\n      const p = c(assignDeep({}, v, {\n        sn: f,\n        qt: h\n      }));\n      d(assignDeep({}, v, {\n        qt: h,\n        Ft: p\n      }));\n      const g = updateHintsAreTruthy(h);\n      const b = updateHintsAreTruthy(p);\n      const w = g || b || !isEmptyObject(a) || _;\n      w && o(t, {\n        qt: h,\n        Ft: p\n      });\n      return w;\n    };\n    return [() => {\n      const {\n        It: t,\n        it: n,\n        Gt: o,\n        Tt: s\n      } = l;\n      const c = s ? o.documentElement : t;\n      const r = getElmentScroll(c);\n      const i = [a(), e(), _()];\n      scrollElementTo(n, r);\n      return bind(runEachAndClear, i);\n    }, update, () => ({\n      un: f,\n      fn: r\n    }), {\n      _n: l,\n      dn: v\n    }, i];\n  };\n  const OverlayScrollbars = (t, n, o) => {\n    const {\n      N: s\n    } = getEnvironment();\n    const e = isHTMLElement(t);\n    const c = e ? t : t.target;\n    const r = getInstance(c);\n    if (n && !r) {\n      let r = false;\n      const l = [];\n      const i = {};\n      const validateOptions = t => {\n        const n = removeUndefinedProperties(t, true);\n        const o = getStaticPluginModuleInstance(Vt);\n        return o ? o(n, true) : n;\n      };\n      const a = assignDeep({}, s(), validateOptions(n));\n      const [u, f, _] = createEventListenerHub();\n      const [d, v, h] = createEventListenerHub(o);\n      const triggerEvent = (t, n) => {\n        h(t, n);\n        _(t, n);\n      };\n      const [p, g, b, w, y] = createSetups(t, a, ({\n        ln: t,\n        xt: n\n      }, {\n        qt: o,\n        Ft: s\n      }) => {\n        const {\n          et: e,\n          gt: c,\n          ht: r,\n          bt: l,\n          wt: i,\n          ot: a\n        } = o;\n        const {\n          Wt: u,\n          Xt: f,\n          Yt: _\n        } = s;\n        triggerEvent(\"updated\", [m, {\n          updateHints: {\n            sizeChanged: !!e,\n            directionChanged: !!c,\n            heightIntrinsicChanged: !!r,\n            overflowEdgeChanged: !!u,\n            overflowAmountChanged: !!f,\n            overflowStyleChanged: !!_,\n            contentMutation: !!l,\n            hostMutation: !!i,\n            appear: !!a\n          },\n          changedOptions: t || {},\n          force: !!n\n        }]);\n      }, t => triggerEvent(\"scroll\", [m, t]));\n      const destroy = t => {\n        removeInstance(c);\n        runEachAndClear(l);\n        r = true;\n        triggerEvent(\"destroyed\", [m, t]);\n        f();\n        v();\n      };\n      const m = {\n        options(t, n) {\n          if (t) {\n            const o = n ? s() : {};\n            const e = getOptionsDiff(a, assignDeep(o, validateOptions(t)));\n            if (!isEmptyObject(e)) {\n              assignDeep(a, e);\n              g({\n                ln: e\n              });\n            }\n          }\n          return assignDeep({}, a);\n        },\n        on: d,\n        off: (t, n) => {\n          t && n && v(t, n);\n        },\n        state() {\n          const {\n            un: t,\n            fn: n\n          } = b();\n          const {\n            rt: o\n          } = t;\n          const {\n            zt: s,\n            Ht: e,\n            Jt: c,\n            Kt: l,\n            Zt: i,\n            en: a\n          } = n;\n          return assignDeep({}, {\n            overflowEdge: s,\n            overflowAmount: e,\n            overflowStyle: c,\n            hasOverflow: l,\n            padding: i,\n            paddingAbsolute: a,\n            directionRTL: o,\n            destroyed: r\n          });\n        },\n        elements() {\n          const {\n            It: t,\n            lt: n,\n            Zt: o,\n            it: s,\n            ut: e,\n            Et: c,\n            Nt: r\n          } = w._n;\n          const {\n            Lt: l,\n            jt: i\n          } = w.dn;\n          const translateScrollbarStructure = t => {\n            const {\n              Ct: n,\n              Ot: o,\n              Dt: s\n            } = t;\n            return {\n              scrollbar: s,\n              track: o,\n              handle: n\n            };\n          };\n          const translateScrollbarsSetupElement = t => {\n            const {\n              Vt: n,\n              Ut: o\n            } = t;\n            const s = translateScrollbarStructure(n[0]);\n            return assignDeep({}, s, {\n              clone: () => {\n                const t = translateScrollbarStructure(o());\n                g({\n                  an: true\n                });\n                return t;\n              }\n            });\n          };\n          return assignDeep({}, {\n            target: t,\n            host: n,\n            padding: o || s,\n            viewport: s,\n            content: e || s,\n            scrollOffsetElement: c,\n            scrollEventElement: r,\n            scrollbarHorizontal: translateScrollbarsSetupElement(l),\n            scrollbarVertical: translateScrollbarsSetupElement(i)\n          });\n        },\n        update: t => g({\n          xt: t,\n          $t: true\n        }),\n        destroy: bind(destroy, false),\n        plugin: t => i[keys(t)[0]]\n      };\n      push(l, [y]);\n      addInstance(c, m);\n      registerPluginModuleInstances(Pt, OverlayScrollbars, [m, u, i]);\n      if (cancelInitialization(w._n.Tt, !e && t.cancel)) {\n        destroy(true);\n        return m;\n      }\n      push(l, p());\n      triggerEvent(\"initialized\", [m]);\n      m.update(true);\n      return m;\n    }\n    return r;\n  };\n  OverlayScrollbars.plugin = t => {\n    const n = isArray(t);\n    const o = n ? t : [t];\n    const s = o.map(t => registerPluginModuleInstances(t, OverlayScrollbars)[0]);\n    addPlugins(o);\n    return n ? s : s[0];\n  };\n  OverlayScrollbars.valid = t => {\n    const n = t && t.elements;\n    const o = isFunction(n) && n();\n    return isPlainObject(o) && !!getInstance(o.target);\n  };\n  OverlayScrollbars.env = () => {\n    const {\n      P: t,\n      I: n,\n      H: o,\n      V: s,\n      U: e,\n      A: c,\n      L: r,\n      F: l,\n      W: i,\n      j: a,\n      G: u,\n      N: f,\n      q: _\n    } = getEnvironment();\n    return assignDeep({}, {\n      scrollbarsSize: t,\n      scrollbarsOverlaid: n,\n      scrollbarsHiding: o,\n      rtlScrollBehavior: s,\n      flexboxGlue: e,\n      cssCustomProperties: c,\n      scrollTimeline: r,\n      staticDefaultInitialization: l,\n      staticDefaultOptions: i,\n      getDefaultInitialization: a,\n      setDefaultInitialization: u,\n      getDefaultOptions: f,\n      setDefaultOptions: _\n    });\n  };\n  t.ClickScrollPlugin = Ft;\n  t.OverlayScrollbars = OverlayScrollbars;\n  t.ScrollbarsHidingPlugin = Nt;\n  t.SizeObserverPlugin = Bt;\n  Object.defineProperties(t, {\n    vn: {\n      value: true\n    },\n    [Symbol.toStringTag]: {\n      value: \"Module\"\n    }\n  });\n  return t;\n}({});","map":{"version":3,"names":["createCache","t","n","o","u","s","_","e","c","r","cacheUpdateContextual","l","i","cacheUpdateIsolated","getCurrentCache","window","Node","ELEMENT_NODE","toString","hasOwnProperty","Object","prototype","isUndefined","isNull","type","call","replace","toLowerCase","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","isPlainObject","isHTMLElement","HTMLElement","nodeType","isElement","Element","each","keys","inArray","indexOf","concat","push","apply","from","Set","forEach","isEmptyArray","deduplicateArray","runEachAndClear","runFn","assignDeep","slice","removeUndefinedProperties","isEmptyObject","attr","getAttribute","setAttribute","getValueSet","split","removeAttr","removeAttribute","attrClass","join","trim","hasAttrClass","has","find","document","querySelectorAll","findFirst","querySelector","is","matches","msMatchesSelector","contents","childNodes","parent","parentElement","closest","liesBetween","noop","removeElements","removeChild","before","createDocumentFragment","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","insertAfter","createDiv","createElement","createDOM","innerHTML","Math","max","a","min","round","f","abs","cancelAnimationFrame","d","requestAnimationFrame","v","setTimeout","h","clearTimeout","firstLetterToUpper","charAt","toUpperCase","getDummyStyle","style","p","g","b","w","cssProperty","jsAPI","y","m","S","$","bind","selfClearTimeout","debounce","invokeFunctionToDebounce","mergeParms","flush","debouncedFn","arguments","x","classListAction","classList","match","removeClass","remove","addClass","add","O","opacity","zIndex","parseToZeroOrNumber","parseFloat","parseInt","adaptCSSVal","getCSSVal","String","getPropertyValue","setCSSVal","setProperty","validFiniteNumber","isFinite","getComputedStyle","reduce","getDirectionIsRTL","topRightBottomLeft","getTrasformTranslateValue","ratioToCssPercent","toFixed","numberToCssPx","C","H","z","I","A","E","T","D","k","M","R","P","L","getElmWidthHeightProperty","windowSize","V","U","B","fractionalSize","getBoundingClientRect","domRectHasDimensions","domRectAppeared","animationCurrentTime","performance","now","animateNumber","frame","equal","equalWH","equalXY","equalTRBL","equalBCRWH","j","G","supportPassiveEvents","addEventListener","defineProperty","get","splitEventNames","removeEventListener","passive","capture","map","stopPropagation","preventDefault","N","absoluteCoordinates","left","pageYOffset","top","pageXOffset","getRTLCompatibleScrollPosition","getRTLCompatibleScrollBounds","scrollElementTo","scrollLeft","scrollTop","getElmentScroll","manageListener","createEventListenerHub","Map","removeEvent","clear","addEvent","set","triggerEvent","opsStringify","JSON","stringify","getPropByPath","q","paddingAbsolute","showNativeOverlaidScrollbars","update","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","createOptionCheck","F","W","X","Y","J","K","Z","Q","tt","nt","ot","st","et","ct","rt","lt","it","at","ut","ft","_t","dt","vt","ht","pt","gt","bt","wt","yt","mt","St","$t","xt","Ot","Ct","Ht","zt","It","At","Et","Tt","Dt","kt","Mt","Rt","Pt","Lt","addPlugins","registerPluginModuleInstances","static","instance","getStaticPluginModuleInstance","Vt","Ut","Bt","lastChild","reset","onResized","onScroll","jt","Gt","Nt","arrangeViewport","paddingTop","sheet","cssRules","insertRule","undoViewportArrange","assignProps","getWindowDPR","screen","deviceXDPI","logicalXDPI","devicePixelRatio","diffBiggerThanOne","qt","Ft","animateClickScroll","sign","Wt","getNativeScrollbarSize","getNativeScrollbarsHiding","getRtlScrollBehavior","direction","getFlexboxGlue","createEnvironment","body","elements","host","padding","viewport","ownerDocument","content","slot","cancel","nativeScrollbarsOverlaid","getEnvironment","resolveInitialization","staticInitializationElement","dynamicInitializationElement","cancelInitialization","Xt","WeakMap","addInstance","removeInstance","delete","getInstance","createEventContentChange","destroy","updateElements","contains","createDOMObserver","observerCallback","attributeName","target","oldValue","addedNodes","removedNodes","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","createSizeObserver","onSizeChangedCallbackProxy","ResizeObserverEntry","contentRect","pop","createTrinsicObserver","isHeightIntrinsic","isIntersecting","intersectionRatio","triggerOnTrinsicChangedCallback","intersectionObserverCallback","root","onSizeChanged","createObserversSetup","updateViewportAttrsFromHost","onTrinsicChanged","onContentMutation","onHostMutation","ignoreMutationFromOptions","capNumber","getScrollbarHandleOffsetPercent","getScrollbarHandleLengthRatio","getScrollbarHandleOffsetRatio","createScrollbarsSetupElements","initScrollTimeline","source","axis","doRefreshScrollbarOffset","cancelElementAnimations","scrollbarStructureAddRemoveClass","scrollbarStyle","animateElement","animate","timeline","composite","scrollbarStructureRefreshHandleLength","scrollbarStructureRefreshHandleOffset","transform","styleScrollbarPosition","animateScrollbarOffset","scrollbarsAddRemoveClass","refreshScrollbarsHandleLength","refreshScrollbarsHandleOffset","refreshScrollbarsScrollbarOffset","generateScrollbarDOM","appendElements","createScrollbarsSetupEvents","scrollBy","isAffectingTransition","propertyName","createInteractiveScrollEvents","createRelativeHandleMove","button","isPrimary","pointerType","includes","shiftKey","getHandleOffset","releasePointerCapture","pointerId","setPointerCapture","deltaX","deltaY","deltaMode","behavior","animateHandleOffset","createScrollbarsSetup","manageAutoHideSuspension","manageScrollbarsAutoHide","isHoverablePointerType","onHostMouseEnter","Yt","Jt","Kt","setScrollbarVisibility","createStructureSetupElements","documentElement","defaultView","activeElement","Zt","Qt","tn","nn","elementIsGenerated","unwrap","focus","revertViewportTabIndex","createTrinsicUpdateSegment","sn","createPaddingUpdateSegment","right","en","cn","createOverflowUpdateSegment","getOverflowAmount","overflowIsVisible","fixFlexboxGlue","rn","getViewportOverflowState","getStatePerAxis","setViewportOverflowState","setAxisOverflowStyle","hideNativeScrollbars","createStructureSetup","createSetups","updateHintsAreTruthy","some","ln","an","un","fn","_n","dn","OverlayScrollbars","validateOptions","updateHints","sizeChanged","directionChanged","heightIntrinsicChanged","overflowEdgeChanged","overflowAmountChanged","overflowStyleChanged","contentMutation","hostMutation","appear","changedOptions","force","options","on","off","state","overflowEdge","overflowAmount","overflowStyle","hasOverflow","directionRTL","destroyed","translateScrollbarStructure","scrollbar","track","handle","translateScrollbarsSetupElement","clone","scrollOffsetElement","scrollEventElement","scrollbarHorizontal","scrollbarVertical","plugin","valid","env","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","rtlScrollBehavior","flexboxGlue","cssCustomProperties","scrollTimeline","staticDefaultInitialization","staticDefaultOptions","getDefaultInitialization","setDefaultInitialization","getDefaultOptions","setDefaultOptions"],"sources":["../../src/support/cache.ts","../../src/support/compatibility/isBrowser.ts","../../src/support/utils/types.ts","../../src/support/utils/array.ts","../../src/support/utils/object.ts","../../src/support/dom/attribute.ts","../../src/support/dom/traversal.ts","../../src/support/utils/noop.ts","../../src/support/dom/manipulation.ts","../../src/support/dom/create.ts","../../src/support/utils/alias.ts","../../src/support/compatibility/vendors.ts","../../src/support/compatibility/apis.ts","../../src/support/utils/function.ts","../../src/support/dom/class.ts","../../src/support/dom/style.ts","../../src/support/utils/strings.ts","../../src/support/dom/dimensions.ts","../../src/support/utils/animation.ts","../../src/support/utils/equal.ts","../../src/support/dom/events.ts","../../src/support/dom/offset.ts","../../src/support/dom/scroll.ts","../../src/support/eventListeners.ts","../../src/options.ts","../../src/classnames.ts","../../src/plugins/plugins.ts","../../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../../src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../../src/environment.ts","../../src/initialization.ts","../../src/instances.ts","../../src/observers/domObserver.ts","../../src/observers/sizeObserver.ts","../../src/observers/trinsicObserver.ts","../../src/setups/observersSetup/observersSetup.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.calculations.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../../src/setups/structureSetup/structureSetup.elements.ts","../../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../../src/setups/structureSetup/structureSetup.ts","../../src/setups/setups.ts","../../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser = typeof window !== 'undefined';\r\n","import type { PlainObject } from '~/typings';\r\nimport { isBrowser } from '../compatibility/isBrowser';\r\n\r\nconst ElementNodeType = isBrowser && Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\nconst typeRgx = /^\\[object (.+)\\]$/;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString.call(obj).replace(typeRgx, '$1').toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\r\n\r\n/**\r\n * Iterates through a array or object\r\n * @param arrayLikeOrObject The array or object through which shall be iterated.\r\n * @param callback The function which is responsible for the iteration.\r\n * If the function returns true its treated like a \"continue\" statement.\r\n * If the function returns false its treated like a \"break\" statement.\r\n */\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T>,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T>;\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T> | false | null | undefined;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T>,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T>;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T> | false | null | undefined;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, indexOrKey: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T | false | null | undefined,\r\n  callback: (value: any, indexOrKey: string, source: T) => boolean | unknown\r\n): T | false | null | undefined;\r\nexport function each(\r\n  source: Array<any> | ArrayLike<any> | ReadonlyArray<any> | PlainObject | false | null | undefined,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<any> | ArrayLike<any> | ReadonlyArray<any> | PlainObject | false | null | undefined {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[], item: T): boolean => arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => {\r\n  const original = Array.from;\r\n  const result: T[] = [];\r\n\r\n  if (original && arr) {\r\n    return original(arr);\r\n  }\r\n\r\n  if (arr instanceof Set) {\r\n    arr.forEach((value) => {\r\n      push(result, value);\r\n    });\r\n  } else {\r\n    each(arr, (elm) => {\r\n      push(result, elm);\r\n    });\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n","import { from } from '../utils/array';\r\nimport { isUndefined } from '../utils/types';\r\n\r\ntype Attr = {\r\n  (elm: HTMLElement | false | null | undefined, attrName: string): string | null;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value: string): void;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value?: string):\r\n    | string\r\n    | null\r\n    | void;\r\n};\r\n\r\n/**\r\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\r\n * Returns null if the element has no attribute with the given name.\r\n * @param elm The element of which the attribute shall be get or set.\r\n * @param attrName The attribute name which shall be get or set.\r\n * @param value The value of the attribute which shall be set.\r\n */\r\nexport const attr = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value?: string\r\n): string | null | void => {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm.getAttribute(attrName) : null;\r\n  }\r\n  elm && elm.setAttribute(attrName, value);\r\n}) as Attr;\r\n\r\nconst getValueSet = (elm: HTMLElement | false | null | undefined, attrName: string) =>\r\n  new Set((attr(elm, attrName) || '').split(' '));\r\n\r\n/**\r\n * Removes the given attribute from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute name.\r\n */\r\nexport const removeAttr = (elm: Element | false | null | undefined, attrName: string): void => {\r\n  elm && elm.removeAttribute(attrName);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds or removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added or removed.\r\n * @param value The value which shall be added or removed.\r\n * @param add True if the value shall be added, false otherwise.\r\n */\r\nexport const attrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string,\r\n  add?: boolean\r\n) => {\r\n  if (value) {\r\n    const currValuesSet = getValueSet(elm, attrName);\r\n    currValuesSet[add ? 'add' : 'delete'](value);\r\n    const newTokens = from(currValuesSet).join(' ').trim();\r\n    attr(elm, attrName, newTokens);\r\n  }\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string\r\n) => getValueSet(elm, attrName).has(value);\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\nimport { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\ntype InputElementType = Node | Element | Node | false | null | undefined;\r\ntype OutputElementType = Node | Element | false | null | undefined;\r\n\r\nconst getElmPrototype = (isBrowser && Element.prototype) as Element; // only Element.prototype wont work on server\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    /* istanbul ignore next */\r\n    // eslint-disable-next-line\r\n    const fn: (...args: any) => boolean =\r\n      // @ts-ignore\r\n      getElmPrototype.matches || getElmPrototype.msMatchesSelector;\r\n    return fn.call(elm, selector);\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => elm && elm.parentElement;\r\n\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType => {\r\n  if (isElement(elm)) {\r\n    const closestFn = getElmPrototype.closest;\r\n    if (closestFn) {\r\n      return closestFn.call(elm, selector);\r\n    }\r\n\r\n    do {\r\n      if (is(elm, selector)) {\r\n        return elm as Element;\r\n      }\r\n      elm = parent(elm);\r\n    } while (elm);\r\n  }\r\n};\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n\r\nexport { find, findFirst, is, children, contents, parent, liesBetween, closest };\r\n","export const noop = () => {}; // eslint-disable-line\r\n","import { isArrayLike } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { noop } from '../utils/noop';\r\nimport { parent } from './traversal';\r\n\r\ntype NodeCollection = ArrayLike<Node> | Node | false | null | undefined;\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    // element.remove() not supported in IE11\r\n    const parentElm = parent(nodes);\r\n    parentElm && parentElm.removeChild(nodes);\r\n  }\r\n};\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nconst before = (\r\n  parentElm: Node | false | null | undefined,\r\n  preferredAnchor: Node | false | null | undefined,\r\n  insertedElms: NodeCollection\r\n): (() => void) => {\r\n  if (insertedElms && parentElm) {\r\n    let anchor: Node | false | null | undefined = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    if (isArrayLike(insertedElms)) {\r\n      fragment = document.createDocumentFragment();\r\n\r\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n      each(insertedElms, (insertedElm) => {\r\n        if (insertedElm === anchor) {\r\n          anchor = insertedElm.previousSibling;\r\n        }\r\n        fragment!.appendChild(insertedElm);\r\n      });\r\n    } else {\r\n      fragment = insertedElms;\r\n    }\r\n\r\n    // if the preferred anchor isn't null set it to a valid anchor\r\n    if (preferredAnchor) {\r\n      if (!anchor) {\r\n        anchor = parentElm.firstChild;\r\n      } else if (anchor !== preferredAnchor) {\r\n        anchor = anchor.nextSibling;\r\n      }\r\n    }\r\n\r\n    parentElm.insertBefore(fragment, anchor || null);\r\n    return () => removeElements(insertedElms);\r\n  }\r\n  return noop;\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: Node | false | null | undefined, children: NodeCollection) =>\r\n  before(node, null, children);\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const prependChildren = (node: Node | false | null | undefined, children: NodeCollection) =>\r\n  before(node, node && node.firstChild, children);\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertBefore = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n) => before(parent(node), node, insertedNodes);\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertAfter = (node: Node | false | null | undefined, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n","import { each } from '../utils/array';\r\nimport { attr } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  attr(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n","import { concat, each } from '../utils/array';\r\nimport { hasOwnProperty } from '../utils/object';\r\nimport { createDiv } from '../dom/create';\r\nimport { wnd } from '../utils/alias';\r\n\r\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\r\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\r\n\r\nexport type JsApiName = Extract<keyof typeof window, string>;\r\n\r\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n\r\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\nexport const jsPrefixes: ReadonlyArray<string> = [\r\n  'WebKit',\r\n  'Moz',\r\n  'O',\r\n  'MS',\r\n  'webkit',\r\n  'moz',\r\n  'o',\r\n  'ms',\r\n];\r\n\r\nexport const jsCache: { [key: string]: any } = {};\r\nexport const cssCache: { [key: string]: any } = {};\r\n\r\n/**\r\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without it, or and empty string if unsupported.\r\n * @param name The name of the CSS property which shall be get.\r\n */\r\nexport const cssProperty = (name: string): string | undefined => {\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const uppercasedName: string = firstLetterToUpper(name);\r\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\r\n\r\n  each(cssPrefixes, (prefix: string) => {\r\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\r\n    const resultPossibilities: Array<string> = [\r\n      name, // transition\r\n      prefix + name, // -webkit-transition\r\n      prefixWithoutDashes + uppercasedName, // webkitTransition\r\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\r\n    ];\r\n\r\n    // eslint-disable-next-line no-return-assign\r\n    return !(result = resultPossibilities.find(\r\n      (resultPossibility: string) =>\r\n        elmStyle[resultPossibility as keyof CSSStyleDeclaration] !== undefined\r\n    ));\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported without it, or an empty string if no value is supported.\r\n * @param property The CSS property to which the CSS property value(s) belong.\r\n * @param values The value(s) separated by spaces which shall be get.\r\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\r\n */\r\nexport const cssPropertyValue = (\r\n  property: string,\r\n  values: string,\r\n  suffix?: string\r\n): string | undefined => {\r\n  const name = `${property} ${values}`;\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\r\n  const possbleValues: Array<string> = values.split(' ');\r\n  const preparedSuffix: string = suffix || '';\r\n  const cssPrefixesWithFirstEmpty = concat([''], cssPrefixes);\r\n\r\n  each(possbleValues, (possibleValue: string) => {\r\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\r\n      const prop = prefix + possibleValue;\r\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\r\n      if (dummyStyle.length) {\r\n        result = prop;\r\n        return false;\r\n      }\r\n    });\r\n    return !result;\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\r\n * @param name The name of the JS function, object or constructor.\r\n */\r\nexport const jsAPI = <T = any>(name: JsApiName): T | undefined => {\r\n  let result: any = jsCache[name] || wnd[name];\r\n\r\n  if (hasOwnProperty(jsCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  each(jsPrefixes, (prefix: string) => {\r\n    result = result || wnd[(prefix + firstLetterToUpper(name)) as JsApiName];\r\n    return !result;\r\n  });\r\n\r\n  jsCache[name] = result;\r\n  return result;\r\n};\r\n","import { jsAPI } from './vendors';\r\n\r\nexport const MutationObserverConstructor = jsAPI<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  jsAPI<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = jsAPI<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = jsAPI<new (constructor: unknown) => AnimationTimeline>(\r\n  // @ts-ignore\r\n  'ScrollTimeline'\r\n);\r\n","import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let clear = noop;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      // @ts-ignore\r\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n      clear = () => clearTimeoutFn(timeoutId);\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import { isString } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\n\r\ntype ClassContainingElement = Node | Element | false | null | undefined;\r\ntype ClassName = string | false | null | undefined;\r\n\r\nconst rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\r\nconst classListAction = (\r\n  elm: ClassContainingElement,\r\n  className: ClassName,\r\n  action: (elmClassList: DOMTokenList, clazz: string) => boolean | void\r\n): boolean => {\r\n  const classList = elm && (elm as Element).classList;\r\n  let clazz: string;\r\n  let i = 0;\r\n  let result = false;\r\n\r\n  if (classList && className && isString(className)) {\r\n    const classes: Array<string> = className.match(rnothtmlwhite) || [];\r\n    result = classes.length > 0;\r\n    while ((clazz = classes[i++])) {\r\n      result = !!action(classList, clazz) && result;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: ClassContainingElement, className: ClassName): boolean =>\r\n  classListAction(elm, className, (classList, clazz) => classList.contains(clazz));\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: ClassContainingElement, className: ClassName): void => {\r\n  classListAction(elm, className, (classList, clazz) => classList.remove(clazz));\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: ClassContainingElement, className: ClassName): (() => void) => {\r\n  classListAction(elm, className, (classList, clazz) => classList.add(clazz));\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (classNameA: ClassName, classNameB: ClassName) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n","import type { PlainObject, StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport { wnd } from '../utils/alias';\r\nimport { each } from '../utils/array';\r\nimport { isString, isNumber, isArray, isUndefined, isObject } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nexport type CSSStyleProperty = Extract<keyof CSSStyleDeclaration, string>;\r\n\r\nconst cssNumber: Partial<Record<CSSStyleProperty, number>> = {\r\n  // animationiterationcount: 1,\r\n  // columncount: 1,\r\n  // fillopacity: 1,\r\n  // flexgrow: 1,\r\n  // flexshrink: 1,\r\n  // fontweight: 1,\r\n  // lineheight: 1,\r\n  // order: 1,\r\n  // orphans: 1,\r\n  // widows: 1,\r\n  // zoom: 1,\r\n  opacity: 1,\r\n  zIndex: 1,\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string, toFloat?: boolean): number => {\r\n  const finalValue = value || '';\r\n  /* istanbul ignore next */\r\n  const num = toFloat ? parseFloat(finalValue) : parseInt(finalValue, 10);\r\n  // num === num means num is not NaN\r\n  /* istanbul ignore next */\r\n  return num === num ? num : 0; // eslint-disable-line no-self-compare\r\n};\r\n\r\nconst adaptCSSVal = (prop: CSSStyleProperty, val: string | number): string | number =>\r\n  !cssNumber[prop] && isNumber(val) ? `${val}px` : val;\r\n\r\nconst getCSSVal = (\r\n  elm: HTMLElement,\r\n  computedStyle: CSSStyleDeclaration,\r\n  prop: CSSStyleProperty\r\n): string =>\r\n  String(\r\n    /* istanbul ignore next */\r\n    (computedStyle != null\r\n      ? computedStyle[prop] || computedStyle.getPropertyValue(prop)\r\n      : elm.style[prop]) || ''\r\n  );\r\n\r\nconst setCSSVal = (elm: HTMLElement, prop: StyleObjectKey, val: string | number): void => {\r\n  try {\r\n    const { style: elmStyle } = elm;\r\n\r\n    if (!isUndefined(elmStyle[prop])) {\r\n      elmStyle[prop as any] = adaptCSSVal(prop, val) as string;\r\n    } else {\r\n      elmStyle.setProperty(prop, val as string);\r\n    }\r\n  } catch (e) {}\r\n};\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\n/**\r\n * Gets or sets the passed styles to the passed element.\r\n * @param elm The element to which the styles shall be applied to / be read from.\r\n * @param styles The styles which shall be set or read.\r\n */\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps>\r\n): void;\r\nexport function style(elm: HTMLElement | false | null | undefined, styles: StyleObjectKey): string;\r\nexport function style(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: Array<StyleObjectKey> | StyleObjectKey\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps> | Array<StyleObjectKey> | StyleObjectKey\r\n): Partial<Record<StyleObjectKey, string>> | string | void {\r\n  const getSingleStyle = isString(styles);\r\n  const getStyles = isArray(styles) || getSingleStyle;\r\n\r\n  if (getStyles) {\r\n    let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n    if (elm) {\r\n      const computedStyle: CSSStyleDeclaration = wnd.getComputedStyle(elm, null);\r\n      getStylesResult = getSingleStyle\r\n        ? getCSSVal(elm, computedStyle, styles)\r\n        : styles.reduce((result, key) => {\r\n            result[key] = getCSSVal(elm, computedStyle, key);\r\n            return result;\r\n          }, getStylesResult as PlainObject);\r\n    }\r\n    return getStylesResult;\r\n  }\r\n  elm &&\r\n    each(styles, (_, key) =>\r\n      setCSSVal(elm, key as StyleObjectKey, styles[key as keyof typeof styles]!)\r\n    );\r\n}\r\n\r\nexport const getDirectionIsRTL = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  style(elm, 'direction') === 'rtl';\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElement | false | null | undefined,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = style(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top], true),\r\n    r: parseToZeroOrNumber(result[right], true),\r\n    b: parseToZeroOrNumber(result[bottom], true),\r\n    l: parseToZeroOrNumber(result[left], true),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${(validFiniteNumber(ratio) * 100).toFixed(3)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${validFiniteNumber(number)}px`;\r\n","export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strHidden = 'hidden';\r\n","import { style } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const offsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const scrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const fractionalSize = (elm: HTMLElement | false | null | undefined): Readonly<WH> => {\r\n  const cssWidth = parseFloat(style(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(style(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n","import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    onFrame && onFrame(progress, percent, animationCompleted);\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    complete && frame(complete);\r\n  };\r\n};\r\n","import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n","import { isUndefined } from '../utils/types';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { wnd } from '../utils/alias';\r\nimport { noop } from '../utils/noop';\r\nimport { keys } from '../utils';\r\n\r\nlet passiveEventsSupport: boolean | undefined;\r\nconst passiveStr = 'passive';\r\nconst supportPassiveEvents = (): boolean => {\r\n  if (isUndefined(passiveEventsSupport)) {\r\n    passiveEventsSupport = false;\r\n    try {\r\n      /* eslint-disable */\r\n      // @ts-ignore\r\n      wnd.addEventListener(\r\n        passiveStr,\r\n        noop,\r\n        Object.defineProperty({}, passiveStr, {\r\n          get() {\r\n            passiveEventsSupport = true;\r\n          },\r\n        })\r\n      );\r\n      /* eslint-enable */\r\n    } catch {}\r\n  }\r\n  return passiveEventsSupport;\r\n};\r\nconst splitEventNames = (eventNames: string) => eventNames.split(' ');\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: (event: Event) => any;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const doSupportPassiveEvents = supportPassiveEvents();\r\n  const passive = (doSupportPassiveEvents && options && options._passive) ?? doSupportPassiveEvents;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions | boolean = doSupportPassiveEvents\r\n    ? {\r\n        passive,\r\n        capture,\r\n      }\r\n    : capture;\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    splitEventNames(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import { getBoundingClientRect } from './dimensions';\r\nimport { wnd } from '../utils/alias';\r\n\r\nexport interface XY<T = number> {\r\n  x: T;\r\n  y: T;\r\n}\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: HTMLElement | null | undefined): Readonly<XY> => {\r\n  const rect = elm && getBoundingClientRect(elm);\r\n  return rect\r\n    ? {\r\n        x: rect.left + wnd.pageYOffset, //IE11 compat\r\n        y: rect.top + wnd.pageXOffset, //IE11 compat\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: HTMLElement | null | undefined): Readonly<XY> =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n","import type { Environment } from '~/environment';\r\nimport type { XY } from './offset';\r\nimport { isNumber } from '../utils';\r\n\r\n/**\r\n * Transforms a normalized (>= 0) scroll position to a RTL compatilbe scroll position value.\r\n * @param normalizedScrollPosition The normalized scroll position value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `false` / `undefined` if the rtl scroll behavior doesn't apply.\r\n * @returns The input scroll position but transformed to a RTL compatible format.\r\n */\r\nexport const getRTLCompatibleScrollPosition = (\r\n  normalizedScrollPosition: number,\r\n  normalizedScrollPositionMax: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n) =>\r\n  rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? -normalizedScrollPosition\r\n      : rtlScrollBehavior.i\r\n      ? normalizedScrollPositionMax - normalizedScrollPosition\r\n      : normalizedScrollPosition\r\n    : normalizedScrollPosition;\r\n\r\n/**\r\n * Gets the RTL compatilbe scroll boundaries from the normalized (>= 0) max scroll position.\r\n * @param normalizedScrollPositionMax The normalzed max scroll position value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `false` / `undefined` if the rtl scroll behavior doesn't apply.\r\n * @returns RTL compatible scroll boundaries. (min will scroll to start and max will scroll to end)\r\n */\r\nexport const getRTLCompatibleScrollBounds = (\r\n  normalizedScrollPositionMax: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n): [min: number, max: number] => [\r\n  rtlScrollBehavior ? (rtlScrollBehavior.i ? normalizedScrollPositionMax : 0) : 0,\r\n  getRTLCompatibleScrollPosition(\r\n    normalizedScrollPositionMax,\r\n    normalizedScrollPositionMax,\r\n    rtlScrollBehavior\r\n  ),\r\n];\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElmentScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n","import { isArray, isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(isArray(listener) ? listener : [listener], callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: boolean;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n","const dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\r\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\r\n\r\n// misc\r\nexport const classNameScrollbarHidden = `os-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\r\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\r\nexport const dataValueHostOverflowVisible = 'overflowVisible';\r\nexport const dataValueHostScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueHostScrollbarPressed = 'scrollbarPressed';\r\nexport const dataValueHostUpdating = 'updating';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportOverflowVisible = dataValueHostOverflowVisible;\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\nexport const dataValuePaddingOverflowVisible = dataValueViewportOverflowVisible;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarNoCssCustomProps = 'os-no-css-vars';\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n","import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: booleanAllowedValues, // true || false\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  style,\r\n  appendChildren,\r\n  offsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = offsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = offsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        style(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n","import {\r\n  keys,\r\n  attr,\r\n  style,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  windowSize,\r\n  attrClass,\r\n  wnd,\r\n  mathAbs,\r\n  mathRound,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  strHeight,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport type { WH, UpdateCache, XY } from '~/support';\r\nimport type { StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type {\r\n  ViewportOverflowState,\r\n  GetViewportOverflowState,\r\n  HideNativeScrollbars,\r\n} from '~/setups/structureSetup/updateSegments/overflowUpdateSegment';\r\nimport type { InternalEnvironment } from '~/environment';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport type ArrangeViewport = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  viewportScrollSize: WH<number>,\r\n  sizeFraction: WH<number>,\r\n  directionIsRTL: boolean\r\n) => boolean;\r\n\r\nexport type UndoViewportArrangeResult = [\r\n  redoViewportArrange: () => void,\r\n  overflowState?: ViewportOverflowState\r\n];\r\n\r\nexport type UndoArrangeViewport = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  directionIsRTL: boolean,\r\n  viewportOverflowState?: ViewportOverflowState\r\n) => UndoViewportArrangeResult;\r\n\r\nlet contentArrangeCounter = 0;\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _createUniqueViewportArrangeElement: (env: InternalEnvironment): false | HTMLStyleElement => {\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _cssCustomProperties } = env;\r\n        const create =\r\n          !_cssCustomProperties &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const result = create ? document.createElement('style') : false;\r\n\r\n        if (result) {\r\n          attr(\r\n            result,\r\n            'id',\r\n            `${dataAttributeViewport}-${dataValueViewportArrange}-${contentArrangeCounter}`\r\n          );\r\n          contentArrangeCounter++;\r\n        }\r\n\r\n        return result;\r\n      },\r\n      _overflowUpdateSegment: (\r\n        doViewportArrange: boolean,\r\n        flexboxGlue: boolean,\r\n        viewport: HTMLElement,\r\n        viewportArrange: HTMLStyleElement | false | null | undefined,\r\n        state: StructureSetupState,\r\n        getViewportOverflowState: GetViewportOverflowState,\r\n        hideNativeScrollbars: HideNativeScrollbars\r\n      ): [ArrangeViewport, UndoArrangeViewport] => {\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const arrangeViewport: ArrangeViewport = (\r\n          viewportOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          directionIsRTL\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = state;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            // adjust content arrange / before element\r\n            if (viewportArrange) {\r\n              const { sheet } = viewportArrange;\r\n              if (sheet) {\r\n                const { cssRules } = sheet;\r\n                if (cssRules) {\r\n                  if (!cssRules.length) {\r\n                    sheet.insertRule(\r\n                      `#${attr(\r\n                        viewportArrange,\r\n                        'id'\r\n                      )} + [${dataAttributeViewport}~='${dataValueViewportArrange}']::before {}`,\r\n                      0\r\n                    );\r\n                  }\r\n\r\n                  // @ts-ignore\r\n                  const ruleStyle = cssRules[0].style;\r\n\r\n                  ruleStyle[strWidth] = arrangeSize.w;\r\n                  ruleStyle[strHeight] = arrangeSize.h;\r\n                }\r\n              }\r\n            } else {\r\n              style<'--os-vaw' | '--os-vah'>(viewport, {\r\n                '--os-vaw': arrangeSize.w,\r\n                '--os-vah': arrangeSize.h,\r\n              });\r\n            }\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const undoViewportArrange: UndoArrangeViewport = (\r\n          showNativeOverlaidScrollbars,\r\n          directionIsRTL,\r\n          viewportOverflowState?\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState =\r\n              viewportOverflowState || getViewportOverflowState(showNativeOverlaidScrollbars);\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = state;\r\n            const { _scrollbarsHideOffsetArrange } = finalViewportOverflowState;\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = style(viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n\r\n            // add class\r\n            attrClass(viewport, dataAttributeViewport, dataValueViewportArrange);\r\n\r\n            if (!flexboxGlue) {\r\n              finalPaddingStyle[strHeight] = '';\r\n            }\r\n\r\n            style(viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                hideNativeScrollbars(\r\n                  finalViewportOverflowState,\r\n                  directionIsRTL,\r\n                  doViewportArrange,\r\n                  prevStyle\r\n                );\r\n                style(viewport, prevStyle);\r\n                // remove class\r\n                attrClass(viewport, dataAttributeViewport, dataValueViewportArrange, true);\r\n              },\r\n              finalViewportOverflowState,\r\n            ];\r\n          }\r\n          return [noop];\r\n        };\r\n\r\n        return [arrangeViewport, undoViewportArrange];\r\n      },\r\n      _envWindowZoom: () => {\r\n        let size = { w: 0, h: 0 };\r\n        let dpr = 0;\r\n        const getWindowDPR = (): number => {\r\n          const screen = wnd.screen;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const dDPI = screen.deviceXDPI || 0;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const sDPI = screen.logicalXDPI || 1;\r\n          return wnd.devicePixelRatio || dDPI / sDPI;\r\n        };\r\n        const diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n          const absValOne = mathAbs(valOne);\r\n          const absValTwo = mathAbs(valTwo);\r\n          return !(\r\n            absValOne === absValTwo ||\r\n            absValOne + 1 === absValTwo ||\r\n            absValOne - 1 === absValTwo\r\n          );\r\n        };\r\n\r\n        return (\r\n          envInstance: InternalEnvironment,\r\n          updateNativeScrollbarSizeCache: UpdateCache<XY<number>>\r\n        ): boolean | undefined => {\r\n          const sizeNew = windowSize();\r\n          const deltaSize = {\r\n            w: sizeNew.w - size.w,\r\n            h: sizeNew.h - size.h,\r\n          };\r\n\r\n          if (deltaSize.w === 0 && deltaSize.h === 0) {\r\n            return;\r\n          }\r\n\r\n          const deltaAbsSize = {\r\n            w: mathAbs(deltaSize.w),\r\n            h: mathAbs(deltaSize.h),\r\n          };\r\n          const deltaAbsRatio = {\r\n            w: mathAbs(mathRound(sizeNew.w / (size.w / 100.0))),\r\n            h: mathAbs(mathRound(sizeNew.h / (size.h / 100.0))),\r\n          };\r\n          const dprNew = getWindowDPR();\r\n          const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n          const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n          const dprChanged = dprNew !== dpr && dprNew > 0;\r\n          const isZoom = deltaIsBigger && difference && dprChanged;\r\n          let scrollbarSizeChanged;\r\n          let scrollbarSize;\r\n\r\n          if (isZoom) {\r\n            [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache();\r\n\r\n            assignDeep(envInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\r\n          }\r\n\r\n          size = sizeNew;\r\n          dpr = dprNew;\r\n\r\n          return scrollbarSizeChanged;\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n","import { animateNumber, noop, setT } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\r\n        startOffset: number,\r\n        handleLength: number,\r\n        relativeTrackPointerOffset: number\r\n      ): (() => void) => {\r\n        // click scroll animation\r\n        let iteration = 0;\r\n        let clear = noop;\r\n        const animateClickScroll = (clickScrollProgress: number) => {\r\n          clear = animateNumber(\r\n            clickScrollProgress,\r\n            clickScrollProgress + handleLength * Math.sign(startOffset),\r\n            133,\r\n            (animationProgress, _, animationCompleted) => {\r\n              moveHandleRelative(animationProgress);\r\n              const handleStartBound = getHandleOffset();\r\n              const handleEndBound = handleStartBound + handleLength;\r\n              const mouseBetweenHandleBounds =\r\n                relativeTrackPointerOffset >= handleStartBound &&\r\n                relativeTrackPointerOffset <= handleEndBound;\r\n\r\n              if (animationCompleted && !mouseBetweenHandleBounds) {\r\n                if (iteration) {\r\n                  animateClickScroll(animationProgress);\r\n                } else {\r\n                  const firstIterationPauseTimeout = setT(() => {\r\n                    animateClickScroll(animationProgress);\r\n                  }, 222);\r\n                  clear = () => {\r\n                    clearTimeout(firstIterationPauseTimeout);\r\n                  };\r\n                }\r\n                iteration++;\r\n              }\r\n            }\r\n          );\r\n        };\r\n\r\n        animateClickScroll(0);\r\n\r\n        return () => clear();\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  style,\r\n  appendChildren,\r\n  fractionalSize,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  removeAttr,\r\n  removeElements,\r\n  equalBCRWH,\r\n  getBoundingClientRect,\r\n  assignDeep,\r\n  cssProperty,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  noop,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n} from '~/support';\r\nimport {\r\n  classNameEnvironment,\r\n  classNameEnvironmentFlexboxGlue,\r\n  classNameEnvironmentFlexboxGlueMax,\r\n  classNameScrollbarHidden,\r\n} from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** The rtl scroll behavior of the browser. */\r\n  rtlScrollBehavior: { n: boolean; i: boolean };\r\n  /** Whether the browser supports all needed Flexbox features for OverlayScrollbars to work in a more performant way. */\r\n  flexboxGlue: boolean;\r\n  /** Whether the browser supports custom css properties. (also known as css variables) */\r\n  cssCustomProperties: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nexport interface InternalEnvironment {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\r\n  readonly _flexboxGlue: boolean;\r\n  readonly _cssCustomProperties: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: InternalEnvironment;\r\n\r\nconst getNativeScrollbarSize = (\r\n  body: HTMLElement,\r\n  measureElm: HTMLElement,\r\n  measureElmChild: HTMLElement,\r\n  clear?: boolean\r\n): XY => {\r\n  appendChildren(body, measureElm);\r\n\r\n  const cSize = clientSize(measureElm);\r\n  const oSize = offsetSize(measureElm);\r\n  const fSize = fractionalSize(measureElmChild);\r\n\r\n  clear && removeElements(measureElm);\r\n\r\n  return {\r\n    x: oSize.h - cSize.h + fSize.h,\r\n    y: oSize.w - cSize.w + fSize.w,\r\n  };\r\n};\r\n\r\nconst getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n  let result = false;\r\n  const revertClass = addClass(testElm, classNameScrollbarHidden);\r\n  try {\r\n    result =\r\n      style(testElm, cssProperty('scrollbar-width') as StyleObjectKey) === 'none' ||\r\n      wnd.getComputedStyle(testElm, '::-webkit-scrollbar').getPropertyValue('display') === 'none';\r\n  } catch (ex) {}\r\n  revertClass();\r\n  return result;\r\n};\r\n\r\nconst getRtlScrollBehavior = (\r\n  parentElm: HTMLElement,\r\n  childElm: HTMLElement\r\n): { i: boolean; n: boolean } => {\r\n  style(parentElm, { [strOverflowX]: strHidden, [strOverflowY]: strHidden, direction: 'rtl' });\r\n  scrollElementTo(parentElm, { x: 0 });\r\n\r\n  const parentOffset = absoluteCoordinates(parentElm);\r\n  const childOffset = absoluteCoordinates(childElm);\r\n  scrollElementTo(parentElm, { x: -999 }); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n  return {\r\n    /**\r\n     * origin direction = determines if the zero scroll position is on the left or right side\r\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n     * true = on the left side\r\n     * false = on the right side\r\n     */\r\n    i: parentOffset.x === childOffset.x,\r\n    /**\r\n     * negative = determines if the maximum scroll is positive or negative\r\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n     * true = negative\r\n     * false = positive\r\n     */\r\n    n: childOffset.x !== childOffsetAfterScroll.x,\r\n  };\r\n};\r\n\r\nconst getFlexboxGlue = (parentElm: HTMLElement, childElm: HTMLElement): boolean => {\r\n  const revertFbxGlue = addClass(parentElm, classNameEnvironmentFlexboxGlue);\r\n  const minOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const minOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMin = equalBCRWH(minOffsetsize, minOffsetsizeParent, true);\r\n\r\n  const revertFbxGlueMax = addClass(parentElm, classNameEnvironmentFlexboxGlueMax);\r\n  const maxOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const maxOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMax = equalBCRWH(maxOffsetsize, maxOffsetsizeParent, true);\r\n\r\n  revertFbxGlue();\r\n  revertFbxGlueMax();\r\n\r\n  return supportsMin && supportsMax;\r\n};\r\n\r\nconst createEnvironment = (): InternalEnvironment => {\r\n  const { body } = document;\r\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, body, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) =>\r\n        nativeScrollbarsHiding && target === target.ownerDocument.body && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: InternalEnvironment = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _cssCustomProperties: style(envElm, 'zIndex') === '-1',\r\n    _scrollTimeline: !!scrollT,\r\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\r\n    _flexboxGlue: getFlexboxGlue(envElm, envChildElm),\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttr(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  wnd.addEventListener('resize', () => {\r\n    let scrollbarSizeChanged;\r\n    if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\r\n      const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n        scrollbarsHidingPluginName\r\n      );\r\n      const zoomFn = scrollbarsHidingPlugin ? scrollbarsHidingPlugin._envWindowZoom() : noop;\r\n      scrollbarSizeChanged = !!zoomFn(env, updateNativeScrollbarSizeCache);\r\n    }\r\n\r\n    triggerEvent('r', [scrollbarSizeChanged]);\r\n  });\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): InternalEnvironment => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype StaticInitialization = HTMLElement | false | null;\r\ntype DynamicInitialization = HTMLElement | boolean | null;\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  attr,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames.trim(), (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        // isAttrChange check needed, otherwise mutationTarget might not be a valid HTMLElement\r\n        const attributeValue = isAttrChange\r\n          ? attr(mutationTarget as HTMLElement, attributeName || '')\r\n          : null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  removeClass,\r\n  stopPropagation,\r\n  appendChildren,\r\n  getDirectionIsRTL,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  isArray,\r\n  getRTLCompatibleScrollPosition,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { CacheValues } from '~/support';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether direction changes should be observed. */\r\n  _direction?: boolean;\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const scrollAmount = 3333333;\r\n  const { _direction: observeDirectionChange, _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const getIsDirectionRTL = bind(getDirectionIsRTL, target);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (\r\n      sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry | boolean\r\n    ) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n      const hasDirectionCache = !isResizeObserverCall && isArray(sizeChangedContext);\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n      let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        const appeared = domRectAppeared(currRContentRect, prevContentRect);\r\n        const firstCall = !prevContentRect;\r\n        appear = firstCall || appeared;\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n\r\n        doDirectionScroll = !skip; // direction scroll when not skipping\r\n      }\r\n      // else if its triggered with DirectionCache\r\n      else if (hasDirectionCache) {\r\n        [, doDirectionScroll] = sizeChangedContext; // direction scroll when DirectionCache changed, false otherwise\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (observeDirectionChange && doDirectionScroll) {\r\n        const rtl = hasDirectionCache ? sizeChangedContext[0] : getDirectionIsRTL(sizeObserver);\r\n        scrollElementTo(sizeObserver, {\r\n          x: getRTLCompatibleScrollPosition(scrollAmount, scrollAmount, rtl && rtlScrollBehavior),\r\n          y: scrollAmount,\r\n        });\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _directionIsRTLCache: hasDirectionCache ? sizeChangedContext : undefined,\r\n          _sizeChanged: !hasDirectionCache,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    if (observeDirectionChange) {\r\n      const [updateDirectionIsRTLCache] = createCache(\r\n        {\r\n          _initialValue: undefined,\r\n        },\r\n        getIsDirectionRTL\r\n      );\r\n\r\n      push(\r\n        destroyFns,\r\n        addEventListener(sizeObserver, 'scroll', (event) => {\r\n          const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n          const [directionIsRTLCache, directionIsRTLCacheChanged, directionIsRTLCachePrevious] =\r\n            directionIsRTLCacheValues;\r\n          if (directionIsRTLCacheChanged) {\r\n            removeClass(listenerElement, 'ltr rtl');\r\n            addClass(listenerElement, directionIsRTLCache ? 'rtl' : 'ltr');\r\n\r\n            onSizeChangedCallbackProxy([\r\n              !!directionIsRTLCache,\r\n              directionIsRTLCacheChanged,\r\n              directionIsRTLCachePrevious,\r\n            ]);\r\n          }\r\n\r\n          stopPropagation(event);\r\n        })\r\n      );\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n","import {\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = offsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n","import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  attr,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  getDirectionIsRTL,\r\n  each,\r\n  equalWH,\r\n  fractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  isString,\r\n  keys,\r\n  liesBetween,\r\n  removeAttr,\r\n  scrollSize,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  inArray,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueHostOverflowVisible,\r\n  dataValueHostUpdating,\r\n  dataValueViewportArrange,\r\n  dataValueViewportOverflowVisible,\r\n} from '~/classnames';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n\r\n  const { _nativeScrollbarsHiding } = getEnvironment();\r\n\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const viewportAttrsFromTarget = ['tabindex'];\r\n  const baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(structureSetupElements._host),\r\n  };\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const { _flexboxGlue, _addResizeListener } = getEnvironment();\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const hasOver = _viewportHasClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible\r\n      );\r\n      const hasVpStyle = _viewportHasClass(dataValueViewportArrange, '');\r\n      const scrollOffset = hasVpStyle && getElmentScroll(_viewport);\r\n      _viewportAddRemoveClass(dataValueViewportOverflowVisible, dataValueHostOverflowVisible);\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '');\r\n      _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      _viewportAddRemoveClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible,\r\n        hasOver\r\n      );\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '', hasVpStyle);\r\n      _viewportAddRemoveClass('', dataValueHostUpdating);\r\n      scrollElementTo(_viewport, scrollOffset);\r\n\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : concat(baseStyleChangingAttrs, baseStyleChangingAttrsTextarea);\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (inArray(viewportAttrsFromTarget, attribute)) {\r\n        const hostAttr = attr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          attr(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttr(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear && !_directionIsRTLCache;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && _nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache || [];\r\n\r\n    _directionIsRTLCache && assignDeep(state, { _directionIsRTL: directionIsRTL });\r\n\r\n    updateFn({\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n      _directionChanged: directionIsRTLChanged,\r\n    });\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints = { _hostMutation: targetStyleChanged };\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const [constructTrinsicObserver, updateTrinsicObserver] =\r\n    _content || !_flexboxGlue ? createTrinsicObserver(_host, onTrinsicChanged) : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n      _direction: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: concat(baseStyleChangingAttrs, viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = _addResizeListener((_scrollbarSizeChanged) => {\r\n        const [, _contentMutation] = updateContentSizeCache();\r\n        onObserversUpdatedDebounced({ _scrollbarSizeChanged, _contentMutation });\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(contentMutationObserverAttr, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  getRTLCompatibleScrollBounds,\r\n  mathMax,\r\n  mathMin,\r\n  mathRound,\r\n  strHeight,\r\n  strWidth,\r\n} from '~/support';\r\nimport type { Environment } from '~/environment';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarStructure } from './scrollbarsSetup.elements';\r\n\r\nconst capNumber = (min: number, max: number, number: number) => mathMax(min, mathMin(max, number));\r\n\r\nexport const getScrollbarHandleOffsetPercent = (\r\n  scrollPos: number,\r\n  overflowAmount: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n) => {\r\n  const rawScrollPosMax = mathRound(overflowAmount);\r\n  const [scrollPositionMin, scrollPositionMax] = getRTLCompatibleScrollBounds(\r\n    rawScrollPosMax,\r\n    rtlScrollBehavior\r\n  );\r\n\r\n  const scrollPercentNegate = (scrollPositionMax - scrollPos) / scrollPositionMax;\r\n  const scrollPercentInvert = scrollPos / scrollPositionMin;\r\n  const scrollPercentNone = scrollPos / scrollPositionMax;\r\n  const rawScrollPercent = rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? scrollPercentNegate\r\n      : rtlScrollBehavior.i\r\n      ? scrollPercentInvert\r\n      : scrollPercentNone\r\n    : scrollPercentNone;\r\n\r\n  return capNumber(0, 1, rawScrollPercent);\r\n};\r\n\r\n/**\r\n * Gets the scrollbar handle length ratio\r\n * @param structureSetupState The structure setup state.\r\n * @param isHorizontal Whether the axis is horizontal\r\n * @param scrollbarStructure The scrollbar structure. Only passed when the length ratio is calculated for the offset ratio (respects handle min. & max. size via. css)\r\n * @returns The scrollbar handle length ratio.\r\n */\r\nexport const getScrollbarHandleLengthRatio = (\r\n  structureSetupState: StructureSetupState,\r\n  isHorizontal?: boolean,\r\n  scrollbarStructure?: ScrollbarStructure\r\n) => {\r\n  if (scrollbarStructure) {\r\n    const axis = isHorizontal ? strWidth : strHeight;\r\n    const { _track, _handle } = scrollbarStructure;\r\n\r\n    const handleSize = getBoundingClientRect(_handle)[axis];\r\n    const trackSize = getBoundingClientRect(_track)[axis];\r\n\r\n    return capNumber(0, 1, handleSize / trackSize);\r\n  }\r\n\r\n  const axis = isHorizontal ? 'x' : 'y';\r\n  const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n\r\n  const viewportSize = _overflowEdge[axis];\r\n  const overflowAmount = _overflowAmount[axis];\r\n\r\n  return capNumber(0, 1, viewportSize / (viewportSize + overflowAmount));\r\n};\r\n\r\nexport const getScrollbarHandleOffsetRatio = (\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollPercent: number,\r\n  isHorizontal?: boolean\r\n) => {\r\n  const lengthRatio = getScrollbarHandleLengthRatio(\r\n    structureSetupState,\r\n    isHorizontal,\r\n    scrollbarStructure\r\n  );\r\n\r\n  return (1 / lengthRatio) * (1 - lengthRatio) * scrollPercent;\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  getDirectionIsRTL,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isArray,\r\n  isBoolean,\r\n  isEmptyArray,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  setT,\r\n  style,\r\n  bind,\r\n  mathMax,\r\n  getElmentScroll,\r\n  inArray,\r\n  strWidth,\r\n  strHeight,\r\n  concat,\r\n  assignDeep,\r\n  ratioToCssPercent,\r\n  numberToCssPx,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarTransitionless,\r\n  classNameScrollbarNoCssCustomProps,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\nimport {\r\n  getScrollbarHandleLengthRatio,\r\n  getScrollbarHandleOffsetPercent,\r\n  getScrollbarHandleOffsetRatio,\r\n} from './scrollbarsSetup.calculations';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollTimeline: AnimationTimeline | undefined;\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization, _cssCustomProperties } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const elementAnimations = new Map<HTMLElement, Array<Animation | false | null | undefined>>();\r\n  const initScrollTimeline = (axis: 'x' | 'y') =>\r\n    scrollT &&\r\n    new scrollT({\r\n      source: _scrollOffsetElement,\r\n      axis,\r\n    });\r\n  const scrollTimelineX = initScrollTimeline('x');\r\n  const scrollTimelineY = initScrollTimeline('y');\r\n\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n  const doRefreshScrollbarOffset = (scrollbar: HTMLElement) =>\r\n    _viewportIsTarget && !_isBody && parent(scrollbar) === _viewport;\r\n  const cancelElementAnimations = (elements?: HTMLElement | HTMLElement[]) => {\r\n    elementAnimations.forEach((currAnimations, element) => {\r\n      const doCancel = elements\r\n        ? inArray(isArray(elements) ? elements : [elements], element)\r\n        : true;\r\n      if (doCancel) {\r\n        (currAnimations || []).forEach((animation) => {\r\n          animation && animation.cancel();\r\n        });\r\n        elementAnimations.delete(element);\r\n      }\r\n    });\r\n  };\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      style(elm, styles);\r\n    });\r\n  };\r\n  const animateElement = (\r\n    element: HTMLElement,\r\n    scrollTimeline: AnimationTimeline | undefined,\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    composite?: CompositeOperation\r\n  ): Animation | false | null | undefined =>\r\n    scrollTimeline &&\r\n    element.animate(keyframes, {\r\n      // @ts-ignore\r\n      timeline: scrollTimeline,\r\n      composite,\r\n    });\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarStyle(scrollbarStructures, (structure) => {\r\n      const { _handle } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? strWidth : strHeight]: ratioToCssPercent(\r\n            getScrollbarHandleLengthRatio(structureSetupState, isHorizontal)\r\n          ),\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    if (scrollTimelineX && scrollTimelineY) {\r\n      scrollbarStructures.forEach((structure: ScrollbarStructure) => {\r\n        const { _scrollbar, _handle } = structure;\r\n        const getRatio = bind(getScrollbarHandleOffsetRatio, structureSetupState, structure);\r\n        const directionRTL = isHorizontal && getDirectionIsRTL(_scrollbar);\r\n        const start = getRatio(directionRTL ? 1 : 0, isHorizontal);\r\n        const end = getRatio(directionRTL ? 0 : 1, isHorizontal);\r\n        cancelElementAnimations(_handle);\r\n        elementAnimations.set(_handle, [\r\n          animateElement(\r\n            _handle,\r\n            isHorizontal ? scrollTimelineX : scrollTimelineY,\r\n            assignDeep(\r\n              {\r\n                transform: [\r\n                  getTrasformTranslateValue(ratioToCssPercent(start), isHorizontal),\r\n                  getTrasformTranslateValue(ratioToCssPercent(end), isHorizontal),\r\n                ],\r\n              },\r\n              directionRTL\r\n                ? {\r\n                    clear: ['left'], // dummy keyframe for direction rtl animation because of chrome bug\r\n                  }\r\n                : {}\r\n            )\r\n          ),\r\n        ]);\r\n      });\r\n    } else {\r\n      scrollbarStyle(scrollbarStructures, (structure) => {\r\n        const { _handle, _scrollbar } = structure;\r\n        const { _rtlScrollBehavior } = getEnvironment();\r\n        const axis = isHorizontal ? 'x' : 'y';\r\n        const { _overflowAmount } = structureSetupState;\r\n        const isRTL = getDirectionIsRTL(_scrollbar);\r\n\r\n        const offsetRatio = getScrollbarHandleOffsetRatio(\r\n          structureSetupState,\r\n          structure,\r\n          getScrollbarHandleOffsetPercent(\r\n            getElmentScroll(_scrollOffsetElement)[axis],\r\n            _overflowAmount[axis],\r\n            isHorizontal && isRTL && _rtlScrollBehavior\r\n          ),\r\n          isHorizontal\r\n        );\r\n\r\n        return [\r\n          _handle,\r\n          {\r\n            transform: getTrasformTranslateValue(ratioToCssPercent(offsetRatio), isHorizontal),\r\n          },\r\n        ];\r\n      });\r\n    }\r\n  };\r\n  const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n    const { _scrollbar } = structure;\r\n    const elm = doRefreshScrollbarOffset(_scrollbar) && _scrollbar;\r\n    const { x, y } = getElmentScroll(_scrollOffsetElement);\r\n    return [\r\n      elm,\r\n      {\r\n        transform: elm\r\n          ? getTrasformTranslateValue({ x: numberToCssPx(x), y: numberToCssPx(y) })\r\n          : '',\r\n      },\r\n    ] as [HTMLElement | false, StyleObject];\r\n  };\r\n  const animateScrollbarOffset = (\r\n    scrollbar: HTMLElement,\r\n    scrollTimeline: AnimationTimeline | undefined,\r\n    maxTransformValue: number,\r\n    isHorizontal?: boolean\r\n  ) =>\r\n    animateElement(\r\n      scrollbar,\r\n      scrollTimeline,\r\n      {\r\n        transform: [\r\n          getTrasformTranslateValue(numberToCssPx(0), isHorizontal),\r\n          getTrasformTranslateValue(\r\n            numberToCssPx(mathMax(0, maxTransformValue - 0.5)),\r\n            isHorizontal\r\n          ),\r\n        ],\r\n      },\r\n      'add'\r\n    );\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget) {\r\n      if (scrollTimelineY && scrollTimelineY) {\r\n        const { _overflowAmount } = structureSetupState;\r\n        concat(verticalScrollbars, horizontalScrollbars).forEach(({ _scrollbar }) => {\r\n          cancelElementAnimations(_scrollbar);\r\n          if (doRefreshScrollbarOffset(_scrollbar)) {\r\n            elementAnimations.set(_scrollbar, [\r\n              animateScrollbarOffset(_scrollbar, scrollTimelineX, _overflowAmount.x, true),\r\n              animateScrollbarOffset(_scrollbar, scrollTimelineY, _overflowAmount.y),\r\n            ]);\r\n          }\r\n        });\r\n      } else {\r\n        scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n        scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n      }\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const arrToPush = isHorizontal ? horizontalScrollbars : verticalScrollbars;\r\n    const transitionlessClass = isEmptyArray(arrToPush) ? classNameScrollbarTransitionless : '';\r\n    const scrollbar = createDiv(\r\n      `${classNameScrollbar} ${scrollbarClassName} ${transitionlessClass}`\r\n    );\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    if (!_cssCustomProperties) {\r\n      addClass(scrollbar, classNameScrollbarNoCssCustomProps);\r\n    }\r\n\r\n    push(arrToPush, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      cancelElementAnimations,\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        scrollbarStructureRefreshHandleOffset,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    setT(() => {\r\n      scrollbarsAddRemoveClass(classNameScrollbarTransitionless);\r\n    }, 300);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollTimeline: scrollTimelineX,\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollTimeline: scrollTimelineY,\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  offsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  stopPropagation,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  attrClass,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataValueHostScrollbarPressed,\r\n} from '~/classnames';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  refreshScrollbarStructuresHandleOffset: (\r\n    scrollbarStructure: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => void,\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState\r\n): ScrollbarsSetupEvents => {\r\n  const { _host, _scrollOffsetElement, _documentElm } = structureSetupElements;\r\n\r\n  return (\r\n    scrollbarStructure,\r\n    scrollbarsAddRemoveClass,\r\n    refreshScrollbarStructuresHandleOffset,\r\n    isHorizontal\r\n  ) => {\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [requestHandleTransitionAnimationFrame, cancelHandleTransitionTimeout] =\r\n      selfClearTimeout();\r\n    const refreshHandleOffsetTransition = bind(\r\n      refreshScrollbarStructuresHandleOffset,\r\n      [scrollbarStructure],\r\n      isHorizontal\r\n    );\r\n    const scrollByFn = !!_scrollOffsetElement.scrollBy;\r\n\r\n    const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY'; // for pointer event (can't use xy because of IE11)\r\n    const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n    const leftTopKey = isHorizontal ? 'left' : 'top'; // for BCR (can't use xy because of IE11)\r\n    const whKey = isHorizontal ? 'w' : 'h';\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n    const isAffectingTransition = (event: TransitionEvent) =>\r\n      event.propertyName.indexOf(widthHeightKey) > -1;\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointerleave pointercancel lostpointercapture';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = offsetSize(_track)[whKey] - offsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        attrClass(_host, dataAttributeHost, dataValueHostScrollbarPressed, true);\r\n\r\n        if (continuePointerDown) {\r\n          const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              offsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElmentScroll(_scrollOffsetElement)[xyKey] || 0,\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(offFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n\r\n          const offFns = [\r\n            bind(attrClass, _host, dataAttributeHost, dataValueHostScrollbarPressed),\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\r\n              const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\r\n\r\n              if (isDragScroll || instantClickScroll) {\r\n                moveHandleRelative(startOffset + relativeMovement);\r\n              }\r\n            }),\r\n          ];\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n\r\n            animateClickScroll &&\r\n              push(\r\n                offFns,\r\n                animateClickScroll(\r\n                  moveHandleRelative,\r\n                  getHandleOffset,\r\n                  startOffset,\r\n                  handleLength,\r\n                  relativeTrackPointerOffset\r\n                )\r\n              );\r\n          }\r\n\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (scrollByFn && wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            _scrollOffsetElement.scrollBy({\r\n              left: deltaX,\r\n              top: deltaY,\r\n              behavior: 'smooth',\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      addEventListener(_handle, 'transitionstart', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          const animateHandleOffset = () => {\r\n            refreshHandleOffsetTransition();\r\n            requestHandleTransitionAnimationFrame(animateHandleOffset);\r\n          };\r\n          animateHandleOffset();\r\n        }\r\n      }),\r\n      addEventListener(_handle, 'transitionend transitioncancel', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          cancelHandleTransitionTimeout();\r\n          refreshHandleOffsetTransition();\r\n        }\r\n      }),\r\n      // rootClickStopPropagationEvent\r\n      addEventListener(\r\n        _scrollbar,\r\n        'mousedown',\r\n        bind(addEventListener, _documentElm, 'click', stopPropagation, {\r\n          _once: true,\r\n          _capture: true,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      cancelHandleTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n","import { bind, noop, addEventListener, push, runEachAndClear, selfClearTimeout } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport { type ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideNotNever: boolean | undefined;\r\n  let mouseInHost: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  const [requestMouseMoveAnimationFrame, cancelMouseMoveAnimationFrame] = selfClearTimeout();\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [scrollTimeout, clearScrollTimeout] = selfClearTimeout(100);\r\n  const [auotHideMoveTimeout, clearAutoHideTimeout] = selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(options, structureSetupElements, structureSetupState)\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      mouseInHost && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [\r\n    clearScrollTimeout,\r\n    clearAutoTimeout,\r\n    clearAutoHideTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    cancelMouseMoveAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        requestMouseMoveAnimationFrame(() => {\r\n          clearScrollTimeout();\r\n          manageScrollbarsAutoHide(true);\r\n          auotHideMoveTimeout(() => {\r\n            autoHideIsMove && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n\r\n        autoHideNotNever && manageScrollbarsAutoHide(true);\r\n        scrollTimeout(() => {\r\n          autoHideNotNever && !mouseInHost && manageScrollbarsAutoHide(false);\r\n        });\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n        _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowAmount, _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged || _overflowAmountChanged || _directionChanged || _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (overflowStyle: OverflowStyle, isHorizontal: boolean) => {\r\n        const isVisible =\r\n          visibility === 'visible' || (visibility === 'auto' && overflowStyle === 'scroll');\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideNotNever = autoHide !== 'never';\r\n        manageScrollbarsAutoHide(!autoHideNotNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(_overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(_overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      if (updateScrollbars) {\r\n        // order is matter! length has to be refreshed before offset\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsScrollbarOffset();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  addClass,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  insertBefore,\r\n  attr,\r\n  keys,\r\n  removeAttr,\r\n  attrClass,\r\n  hasAttrClass,\r\n  noop,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  classNameScrollbarHidden,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n  resolveInitialization as generalResolveInitialization,\r\n} from '~/initialization';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _viewportArrange: HTMLStyleElement | false | null | undefined;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportIsContent: boolean;\r\n  _viewportHasClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string\r\n  ) => boolean;\r\n  _viewportAddRemoveClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string,\r\n    add?: boolean\r\n  ) => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n  const createUniqueViewportArrangeElement =\r\n    scrollbarsHidingPlugin && scrollbarsHidingPlugin._createUniqueViewportArrangeElement;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const isBody = targetElement === ownerDocument.body;\r\n  const docWnd = ownerDocument.defaultView as Window;\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const resolveInitialization = bind(generalResolveInitialization, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // check the default contentElement\r\n  // if truthy (so the element would be present in the DOM) the passed element is the final content element and the viewport element is generated\r\n  // if falsy (so the element wouldn't be present in the DOM) the passed element is the final viewport element and the content element is omitted\r\n  const viewportIsContent =\r\n    !viewportIsTarget &&\r\n    isHTMLElement(possibleViewportElement) &&\r\n    possibleViewportElement === possibleContentElement;\r\n  const defaultContentElementPresent =\r\n    viewportIsContent && !!resolveInitialization(defaultContentInitialization);\r\n  const viewportIstContentViewport = defaultContentElementPresent\r\n    ? generateViewportElement()\r\n    : possibleViewportElement;\r\n  const viewportIsContentContent = defaultContentElementPresent\r\n    ? possibleContentElement\r\n    : generateContentElement();\r\n  const nonBodyViewportElement = viewportIsContent\r\n    ? viewportIstContentViewport\r\n    : possibleViewportElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : nonBodyViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const contentElement = viewportIsContent ? viewportIsContentContent : possibleContentElement;\r\n  const activeElm = ownerDocument.activeElement;\r\n  const setViewportFocus =\r\n    !viewportIsTarget && docWnd.top === docWnd && activeElm === targetElement;\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        defaultPaddingInitialization,\r\n        paddingInitialization\r\n      ),\r\n    _content: contentElement,\r\n    _viewportArrange:\r\n      !viewportIsTarget &&\r\n      !_nativeScrollbarsHiding &&\r\n      createUniqueViewportArrangeElement &&\r\n      createUniqueViewportArrangeElement(env),\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _windowElm: docWnd,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportIsContent: viewportIsContent,\r\n    _viewportHasClass: (viewportAttributeClassName: string, hostAttributeClassName: string) =>\r\n      hasAttrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName\r\n      ),\r\n    _viewportAddRemoveClass: (\r\n      viewportAttributeClassName: string,\r\n      hostAttributeClassName: string,\r\n      add?: boolean\r\n    ) =>\r\n      attrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName,\r\n        add\r\n      ),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key) => {\r\n    const value = evaluatedTargetObj[key as keyof StructureSetupElementsObj];\r\n    return push(arr, value && isHTMLElement(value) && !parent(value) ? value : false);\r\n  }, [] as Array<HTMLElement | false>);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? inArray(generatedElements, elm) : null;\r\n  const { _target, _host, _padding, _viewport, _content, _viewportArrange } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttr(_host, dataAttributeHost);\r\n      removeAttr(_host, dataAttributeInitialize);\r\n      removeAttr(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttr(docElement, dataAttributeHost);\r\n        removeAttr(docElement, dataAttributeInitialize);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    attr(_host, dataAttributeHost, viewportIsTarget ? 'viewport' : 'host');\r\n    attr(_padding, dataAttributePadding, '');\r\n    attr(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      attr(_viewport, dataAttributeViewport, '');\r\n    }\r\n\r\n    const removeHtmlClass =\r\n      isBody && !viewportIsTarget\r\n        ? addClass(parent(targetElement), classNameScrollbarHidden)\r\n        : noop;\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, () => {\r\n      removeHtmlClass();\r\n      removeAttr(_padding, dataAttributePadding);\r\n      removeAttr(_content, dataAttributeContent);\r\n      removeAttr(_viewport, dataAttributeHostOverflowX);\r\n      removeAttr(_viewport, dataAttributeHostOverflowY);\r\n      removeAttr(_viewport, dataAttributeViewport);\r\n\r\n      elementIsGenerated(_content) && unwrap(_content);\r\n      elementIsGenerated(_viewport) && unwrap(_viewport);\r\n      elementIsGenerated(_padding) && unwrap(_padding);\r\n    });\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      attrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden, true);\r\n      push(destroyFns, bind(removeAttr, _viewport, dataAttributeViewport));\r\n    }\r\n    if (_viewportArrange) {\r\n      insertBefore(_viewport, _viewportArrange);\r\n      push(destroyFns, bind(removeElements, _viewportArrange));\r\n    }\r\n    if (setViewportFocus) {\r\n      const tabIndexStr = 'tabindex';\r\n      const ogTabindex = attr(_viewport, tabIndexStr);\r\n\r\n      attr(_viewport, tabIndexStr, '-1');\r\n      _viewport.focus();\r\n\r\n      const revertViewportTabIndex = () =>\r\n        ogTabindex ? attr(_viewport, tabIndexStr, ogTabindex) : removeAttr(_viewport, tabIndexStr);\r\n      const off = addEventListener(ownerDocument, 'pointerdown keydown', () => {\r\n        revertViewportTabIndex();\r\n        off();\r\n      });\r\n\r\n      push(destroyFns, [revertViewportTabIndex, off]);\r\n    } else if (activeElm && (activeElm as HTMLElement).focus) {\r\n      (activeElm as HTMLElement).focus();\r\n    }\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n","import { strHeight, style } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _flexboxGlue } = getEnvironment();\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged =\r\n      (_content || !_flexboxGlue) && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      style(_content, {\r\n        [strHeight]: _heightIntrinsic ? '' : '100%',\r\n      });\r\n    }\r\n  };\r\n","import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  style,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding, _flexboxGlue } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || (!_flexboxGlue && _contentMutation);\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative ? `calc(100% + ${paddingHorizontal}px)` : '',\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      style(_padding || _viewport, paddingStyle);\r\n      style(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  attr,\r\n  style,\r\n  scrollSize,\r\n  fractionalSize,\r\n  equalWH,\r\n  clientSize,\r\n  equalXY,\r\n  attrClass,\r\n  noop,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  windowSize,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strWidth,\r\n  strHeight,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataValueHostScrollbarHidden,\r\n  dataValueHostOverflowVisible,\r\n  dataValueViewportScrollbarHidden,\r\n  dataValueViewportOverflowVisible,\r\n  dataAttributeViewport,\r\n  dataAttributePadding,\r\n  dataValuePaddingOverflowVisible,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { WH, XY } from '~/support';\r\nimport type {\r\n  ArrangeViewport,\r\n  ScrollbarsHidingPlugin,\r\n  UndoArrangeViewport,\r\n} from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { StyleObject, OverflowStyle, StyleObjectKey } from '~/typings';\r\nimport type { OverflowBehavior } from '~/options';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\nexport interface ViewportOverflowState {\r\n  _scrollbarsHideOffset: XY<number>;\r\n  _scrollbarsHideOffsetArrange: XY<boolean>;\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport type GetViewportOverflowState = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  viewportStyleObj?: StyleObject\r\n) => ViewportOverflowState;\r\n\r\nexport type HideNativeScrollbars = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  directionIsRTL: boolean,\r\n  viewportArrange: boolean,\r\n  viewportStyleObj: StyleObject\r\n) => void;\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportArrange,\r\n    _viewportIsTarget,\r\n    _viewportAddRemoveClass,\r\n    _isBody,\r\n    _windowElm,\r\n  },\r\n  state\r\n) => {\r\n  const max0 = bind(mathMax, 0);\r\n  const strVisible = 'visible';\r\n  const overlaidScrollbarsHideOffset = 42;\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const xyCacheOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\r\n  };\r\n  const getOverflowAmount = (viewportScrollSize: WH<number>, viewportClientSize: WH<number>) => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n  const overflowIsVisible = (overflowBehavior: string) =>\r\n    overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _flexboxGlue,\r\n    _nativeScrollbarsHiding,\r\n    _nativeScrollbarsOverlaid,\r\n  } = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n  const doViewportArrange =\r\n    !_viewportIsTarget &&\r\n    !_nativeScrollbarsHiding &&\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(fractionalSize, _viewport)\r\n  );\r\n\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(scrollSize, _viewport));\r\n\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\r\n\r\n  /**\r\n   * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\r\n   * @param viewportOverflowState The current overflow state.\r\n   * @param heightIntrinsic Whether the host height is intrinsic or not.\r\n   */\r\n  const fixFlexboxGlue = (\r\n    viewportOverflowState: ViewportOverflowState,\r\n    heightIntrinsic: boolean\r\n  ) => {\r\n    style(_viewport, {\r\n      [strHeight]: '',\r\n    });\r\n\r\n    if (heightIntrinsic) {\r\n      const { _paddingAbsolute, _padding: padding } = state;\r\n      const { _overflowScroll, _scrollbarsHideOffset } = viewportOverflowState;\r\n      const fSize = fractionalSize(_host);\r\n      const hostClientSize = clientSize(_host);\r\n\r\n      // padding subtraction is only needed if padding is absolute or if viewport is content-box\r\n      const isContentBox = style(_viewport, 'boxSizing') === 'content-box';\r\n      const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\r\n      const subtractXScrollbar = !(_nativeScrollbarsOverlaid.x && isContentBox);\r\n\r\n      style(_viewport, {\r\n        [strHeight]:\r\n          hostClientSize.h +\r\n          fSize.h +\r\n          (_overflowScroll.x && subtractXScrollbar ? _scrollbarsHideOffset.x : 0) -\r\n          paddingVertical,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the current overflow state of the viewport.\r\n   * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n   * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\r\n   * @returns A object which contains informations about the current overflow state.\r\n   */\r\n  const getViewportOverflowState: GetViewportOverflowState = (\r\n    showNativeOverlaidScrollbars,\r\n    viewportStyleObj?\r\n  ) => {\r\n    const arrangeHideOffset =\r\n      !_nativeScrollbarsHiding && !showNativeOverlaidScrollbars ? overlaidScrollbarsHideOffset : 0;\r\n    const getStatePerAxis = (\r\n      styleKey: StyleObjectKey,\r\n      isOverlaid: boolean,\r\n      nativeScrollbarSize: number\r\n    ) => {\r\n      const overflowStyle = style(_viewport, styleKey);\r\n      // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\r\n      const objectPrefferedOverflowStyle = viewportStyleObj\r\n        ? viewportStyleObj[styleKey]\r\n        : overflowStyle;\r\n      const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\r\n      const nonScrollbarStylingHideOffset = isOverlaid ? arrangeHideOffset : nativeScrollbarSize;\r\n      const scrollbarsHideOffset =\r\n        overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n      const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n      return [overflowStyle, overflowScroll, scrollbarsHideOffset, scrollbarsHideOffsetArrange] as [\r\n        overflowStyle: OverflowStyle,\r\n        overflowScroll: boolean,\r\n        scrollbarsHideOffset: number,\r\n        scrollbarsHideOffsetArrange: boolean\r\n      ];\r\n    };\r\n\r\n    const [xOverflowStyle, xOverflowScroll, xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis(strOverflowX, _nativeScrollbarsOverlaid.x, _nativeScrollbarsSize.x);\r\n    const [yOverflowStyle, yOverflowScroll, yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis(strOverflowY, _nativeScrollbarsOverlaid.y, _nativeScrollbarsSize.y);\r\n\r\n    return {\r\n      _overflowStyle: {\r\n        x: xOverflowStyle,\r\n        y: yOverflowStyle,\r\n      },\r\n      _overflowScroll: {\r\n        x: xOverflowScroll,\r\n        y: yOverflowScroll,\r\n      },\r\n      _scrollbarsHideOffset: {\r\n        x: xScrollbarsHideOffset,\r\n        y: yScrollbarsHideOffset,\r\n      },\r\n      _scrollbarsHideOffsetArrange: {\r\n        x: xScrollbarsHideOffsetArrange,\r\n        y: yScrollbarsHideOffsetArrange,\r\n      },\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\r\n   * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\r\n   * @param overflowAmount The overflow amount.\r\n   * @param overflow The overflow behavior according to the options.\r\n   * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\r\n   * @returns A object which represents the newly set overflow state.\r\n   */\r\n  const setViewportOverflowState = (\r\n    showNativeOverlaidScrollbars: boolean,\r\n    hasOverflow: XY<boolean>,\r\n    overflowOption: XY<OverflowBehavior>,\r\n    viewportStyleObj: StyleObject\r\n  ): ViewportOverflowState => {\r\n    const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\r\n      const overflowVisible = overflowIsVisible(behavior);\r\n      const overflowVisibleBehavior =\r\n        (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) || '';\r\n      return [\r\n        hasOverflowAxis && !overflowVisible ? behavior : '',\r\n        overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\r\n      ];\r\n    };\r\n\r\n    const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\r\n    const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\r\n\r\n    viewportStyleObj[strOverflowX] = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\r\n    viewportStyleObj[strOverflowY] = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\r\n\r\n    return getViewportOverflowState(showNativeOverlaidScrollbars, viewportStyleObj);\r\n  };\r\n\r\n  /**\r\n   * Hides the native scrollbars according to the passed parameters.\r\n   * @param viewportOverflowState The viewport overflow state.\r\n   * @param directionIsRTL Whether the direction is RTL or not.\r\n   * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n   * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n   */\r\n  const hideNativeScrollbars: HideNativeScrollbars = (\r\n    viewportOverflowState,\r\n    directionIsRTL,\r\n    viewportArrange,\r\n    viewportStyleObj\r\n  ) => {\r\n    const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n    const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n    const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n    const { _viewportPaddingStyle: viewportPaddingStyle } = state;\r\n    const horizontalMarginKey: keyof StyleObject = directionIsRTL ? strMarginLeft : strMarginRight;\r\n    const viewportHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n      ? strPaddingLeft\r\n      : strPaddingRight;\r\n    const horizontalMarginValue = viewportPaddingStyle[horizontalMarginKey] as number;\r\n    const verticalMarginValue = viewportPaddingStyle[strMarginBottom] as number;\r\n    const horizontalPaddingValue = viewportPaddingStyle[viewportHorizontalPaddingKey] as number;\r\n    const verticalPaddingValue = viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n    // horizontal\r\n    viewportStyleObj[strWidth] = `calc(100% + ${hideOffsetY + horizontalMarginValue * -1}px)`;\r\n    viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n    // vertical\r\n    viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n    // viewport arrange additional styles\r\n    if (viewportArrange) {\r\n      viewportStyleObj[viewportHorizontalPaddingKey] =\r\n        horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n      viewportStyleObj[strPaddingBottom] = verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n    }\r\n  };\r\n\r\n  const [arrangeViewport, undoViewportArrange] = scrollbarsHidingPlugin\r\n    ? scrollbarsHidingPlugin._overflowUpdateSegment(\r\n        doViewportArrange,\r\n        _flexboxGlue,\r\n        _viewport,\r\n        _viewportArrange,\r\n        state,\r\n        getViewportOverflowState,\r\n        hideNativeScrollbars\r\n      )\r\n    : [(() => doViewportArrange) as ArrangeViewport, (() => [noop]) as UndoArrangeViewport];\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const {\r\n      _sizeChanged,\r\n      _hostMutation,\r\n      _contentMutation,\r\n      _heightIntrinsicChanged,\r\n      _directionChanged,\r\n      _scrollbarSizeChanged,\r\n    } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic, _directionIsRTL } = _observersState;\r\n    const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = _checkOption(\r\n      'showNativeOverlaidScrollbars'\r\n    );\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n\r\n    const showNativeOverlaidScrollbars =\r\n      showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y;\r\n    const adjustFlexboxGlue =\r\n      !_viewportIsTarget &&\r\n      !_flexboxGlue &&\r\n      (_sizeChanged ||\r\n        _contentMutation ||\r\n        _hostMutation ||\r\n        showNativeOverlaidScrollbarsChanged ||\r\n        _heightIntrinsicChanged);\r\n    const adjustViewportArrange =\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n    const overflowVisible = overflowXVisible || overflowYVisible;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(\r\n        dataValueViewportScrollbarHidden,\r\n        dataValueHostScrollbarHidden,\r\n        !showNativeOverlaidScrollbars\r\n      );\r\n    }\r\n\r\n    if (adjustFlexboxGlue) {\r\n      preMeasureViewportOverflowState = getViewportOverflowState(showNativeOverlaidScrollbars);\r\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\r\n    }\r\n\r\n    if (adjustViewportArrange) {\r\n      if (overflowVisible) {\r\n        _viewportAddRemoveClass(\r\n          dataValueViewportOverflowVisible,\r\n          dataValueHostOverflowVisible,\r\n          false\r\n        );\r\n      }\r\n\r\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = undoViewportArrange(\r\n        showNativeOverlaidScrollbars,\r\n        _directionIsRTL,\r\n        preMeasureViewportOverflowState\r\n      );\r\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = clientSize(_viewport);\r\n      let arrangedViewportScrollSize = viewportScrollSize;\r\n      let arrangedViewportClientSize = viewportClientSize;\r\n\r\n      redoViewportArrange();\r\n\r\n      // if re measure is required (only required if content arrange strategy is used)\r\n      if (\r\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\r\n        undoViewportArrangeOverflowState &&\r\n        !showNativeOverlaidScrollbars &&\r\n        arrangeViewport(\r\n          undoViewportArrangeOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          _directionIsRTL\r\n        )\r\n      ) {\r\n        arrangedViewportClientSize = clientSize(_viewport);\r\n        arrangedViewportScrollSize = scrollSize(_viewport);\r\n      }\r\n\r\n      const windowInnerSize = windowSize(_windowElm);\r\n      const overflowAmountScrollSize = {\r\n        w: max0(mathMax(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\r\n        h: max0(mathMax(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.w\r\n            : arrangedViewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.h\r\n            : arrangedViewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const hasOverflow = {\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    };\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      adjustFlexboxGlue ||\r\n      adjustViewportArrange;\r\n\r\n    if (adjustViewportStyle) {\r\n      const viewportStyle: StyleObject = {\r\n        [strMarginRight]: 0,\r\n        [strMarginBottom]: 0,\r\n        [strMarginLeft]: 0,\r\n        [strWidth]: '',\r\n        [strOverflowX]: '',\r\n        [strOverflowY]: '',\r\n      };\r\n      const viewportOverflowState = setViewportOverflowState(\r\n        showNativeOverlaidScrollbars,\r\n        hasOverflow,\r\n        overflow,\r\n        viewportStyle\r\n      );\r\n      const viewportArranged = arrangeViewport(\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        _directionIsRTL\r\n      );\r\n\r\n      if (!_viewportIsTarget) {\r\n        hideNativeScrollbars(\r\n          viewportOverflowState,\r\n          _directionIsRTL,\r\n          viewportArranged,\r\n          viewportStyle\r\n        );\r\n      }\r\n\r\n      if (adjustFlexboxGlue) {\r\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\r\n      }\r\n\r\n      if (_viewportIsTarget) {\r\n        attr(_host, dataAttributeHostOverflowX, viewportStyle[strOverflowX] as string);\r\n        attr(_host, dataAttributeHostOverflowY, viewportStyle[strOverflowY] as string);\r\n      } else {\r\n        style(_viewport, viewportStyle);\r\n      }\r\n    }\r\n\r\n    attrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\r\n    attrClass(_padding, dataAttributePadding, dataValuePaddingOverflowVisible, removeClipping);\r\n    if (!_viewportIsTarget) {\r\n      attrClass(\r\n        _viewport,\r\n        dataAttributeViewport,\r\n        dataValueViewportOverflowVisible,\r\n        overflowVisible\r\n      );\r\n    }\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      getViewportOverflowState(showNativeOverlaidScrollbars)._overflowStyle\r\n    );\r\n\r\n    assignDeep(state, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import { getEnvironment } from '~/environment';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport { dataValueHostUpdating } from '~/classnames';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n  };\r\n  const { _target, _viewport, _viewportAddRemoveClass, _viewportIsTarget } = elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _flexboxGlue } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange || !_flexboxGlue;\r\n      const scrollOffset = adjustScrollOffset && getElmentScroll(_viewport);\r\n\r\n      _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      _viewportAddRemoveClass('', dataValueHostUpdating);\r\n\r\n      scrollElementTo(_viewport, scrollOffset);\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  bind,\r\n  getElmentScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _target, _viewport, _documentElm, _isBody } = structureSetupElements;\r\n      const scrollingElement = _isBody ? _documentElm.documentElement : _target;\r\n      const initialScroll = getElmentScroll(scrollingElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n\r\n      scrollElementTo(_viewport, initialScroll);\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { Environment } from '~/environment';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n            _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _flexboxGlue,\r\n    _cssCustomProperties,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      flexboxGlue: _flexboxGlue,\r\n      cssCustomProperties: _cssCustomProperties,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}